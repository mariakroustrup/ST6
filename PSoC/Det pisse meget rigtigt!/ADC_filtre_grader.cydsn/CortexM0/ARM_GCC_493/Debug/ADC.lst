ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 2


  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 84B0     		sub	sp, sp, #16
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 5


 138:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC.c ****         };
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 173 0
  97 000e 564B     		ldr	r3, .L16
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC.c **** 
 176:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 544B     		ldr	r3, .L16+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 105              		.loc 1 180 0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 6


 106 001e 544B     		ldr	r3, .L16+8
 107 0020 1B68     		ldr	r3, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 108              		.loc 1 178 0
 109 0022 002B     		cmp	r3, #0
 110 0024 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 111              		.loc 1 178 0 is_stmt 0 discriminator 1
 112 0026 5349     		ldr	r1, .L16+12
 113 0028 00E0     		b	.L7
 114              	.L6:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 discriminator 2
 116 002a 5349     		ldr	r1, .L16+16
 117              	.L7:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 discriminator 4
 119 002c 534B     		ldr	r3, .L16+20
 120 002e 534A     		ldr	r2, .L16+20
 121 0030 1268     		ldr	r2, [r2]
 122 0032 0A43     		orr	r2, r1
 123 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 124              		.loc 1 182 0 is_stmt 1 discriminator 4
 125 0036 524B     		ldr	r3, .L16+24
 126 0038 524A     		ldr	r2, .L16+28
 127 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 128              		.loc 1 183 0 discriminator 4
 129 003c 524B     		ldr	r3, .L16+32
 130 003e 534A     		ldr	r2, .L16+36
 131 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 132              		.loc 1 184 0 discriminator 4
 133 0042 534B     		ldr	r3, .L16+40
 134 0044 0022     		mov	r2, #0
 135 0046 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 136              		.loc 1 185 0 discriminator 4
 137 0048 524B     		ldr	r3, .L16+44
 138 004a 534A     		ldr	r2, .L16+48
 139 004c 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 140              		.loc 1 186 0 discriminator 4
 141 004e 534B     		ldr	r3, .L16+52
 142 0050 534A     		ldr	r2, .L16+56
 143 0052 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     
 188:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 144              		.loc 1 190 0 discriminator 4
 145 0054 534B     		ldr	r3, .L16+60
 146 0056 534A     		ldr	r2, .L16+60
 147 0058 1268     		ldr	r2, [r2]
 148 005a 8021     		mov	r1, #128
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 7


 149 005c 4902     		lsl	r1, r1, #9
 150 005e 0A43     		orr	r2, r1
 151 0060 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 194:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 197 0 discriminator 4
 153 0062 514B     		ldr	r3, .L16+64
 154 0064 0022     		mov	r2, #0
 155 0066 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 198 0 discriminator 4
 157 0068 504B     		ldr	r3, .L16+68
 158 006a 0022     		mov	r2, #0
 159 006c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 160              		.loc 1 199 0 discriminator 4
 161 006e 504B     		ldr	r3, .L16+72
 162 0070 0122     		mov	r2, #1
 163 0072 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c **** 
 201:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC.c **** 
 205:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 164              		.loc 1 206 0 discriminator 4
 165 0074 4F4B     		ldr	r3, .L16+76
 166 0076 1B68     		ldr	r3, [r3]
 167 0078 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 168              		.loc 1 207 0 discriminator 4
 169 007a 7B68     		ldr	r3, [r7, #4]
 170 007c 4E4A     		ldr	r2, .L16+80
 171 007e 1340     		and	r3, r2
 172 0080 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     
 209:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC.c ****     #else
 216:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC.c ****         #else
 220:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 173              		.loc 1 220 0 discriminator 4
 174 0082 7B68     		ldr	r3, [r7, #4]
 175 0084 8022     		mov	r2, #128
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 8


 176 0086 9205     		lsl	r2, r2, #22
 177 0088 1343     		orr	r3, r2
 178 008a 7B60     		str	r3, [r7, #4]
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 179              		.loc 1 221 0 discriminator 4
 180 008c 7B68     		ldr	r3, [r7, #4]
 181 008e 0122     		mov	r2, #1
 182 0090 9343     		bic	r3, r2
 183 0092 7B60     		str	r3, [r7, #4]
 222:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC.c ****     
 226:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 184              		.loc 1 226 0 discriminator 4
 185 0094 474B     		ldr	r3, .L16+76
 186 0096 7A68     		ldr	r2, [r7, #4]
 187 0098 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC.c **** 
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 188              		.loc 1 232 0 discriminator 4
 189 009a 0023     		mov	r3, #0
 190 009c FB60     		str	r3, [r7, #12]
 191 009e 5CE0     		b	.L8
 192              	.L15:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 234:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 193              		.loc 1 234 0
 194 00a0 8023     		mov	r3, #128
 195 00a2 DA00     		lsl	r2, r3, #3
 196 00a4 DC23     		mov	r3, #220
 197 00a6 9B01     		lsl	r3, r3, #6
 198 00a8 1340     		and	r3, r2
 199 00aa 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 237:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC.c ****         
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC.c ****         */
 244:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC.c **** 
 249:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 9


 200              		.loc 1 253 0
 201 00ac FB68     		ldr	r3, [r7, #12]
 202 00ae 9B00     		lsl	r3, r3, #2
 203 00b0 424A     		ldr	r2, .L16+84
 204 00b2 9446     		mov	ip, r2
 205 00b4 6344     		add	r3, r3, ip
 206 00b6 7A68     		ldr	r2, [r7, #4]
 207 00b8 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC.c **** 
 255:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 208              		.loc 1 255 0
 209 00ba 8023     		mov	r3, #128
 210 00bc DB00     		lsl	r3, r3, #3
 211 00be 0122     		mov	r2, #1
 212 00c0 1340     		and	r3, r2
 213 00c2 09D0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC.c ****             {
 257:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 214              		.loc 1 257 0
 215 00c4 384B     		ldr	r3, .L16+64
 216 00c6 384A     		ldr	r2, .L16+64
 217 00c8 1268     		ldr	r2, [r2]
 218 00ca F968     		ldr	r1, [r7, #12]
 219 00cc 0120     		mov	r0, #1
 220 00ce 8840     		lsl	r0, r0, r1
 221 00d0 011C     		mov	r1, r0
 222 00d2 89B2     		uxth	r1, r1
 223 00d4 0A43     		orr	r2, r1
 224 00d6 1A60     		str	r2, [r3]
 225              	.L9:
 258:.\Generated_Source\PSoC4/ADC.c ****             }
 259:.\Generated_Source\PSoC4/ADC.c **** 
 260:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 226              		.loc 1 260 0
 227 00d8 8023     		mov	r3, #128
 228 00da DB00     		lsl	r3, r3, #3
 229 00dc 0222     		mov	r2, #2
 230 00de 1340     		and	r3, r2
 231 00e0 09D0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC.c ****             {
 262:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 232              		.loc 1 262 0
 233 00e2 324B     		ldr	r3, .L16+68
 234 00e4 314A     		ldr	r2, .L16+68
 235 00e6 1268     		ldr	r2, [r2]
 236 00e8 F968     		ldr	r1, [r7, #12]
 237 00ea 0120     		mov	r0, #1
 238 00ec 8840     		lsl	r0, r0, r1
 239 00ee 011C     		mov	r1, r0
 240 00f0 89B2     		uxth	r1, r1
 241 00f2 0A43     		orr	r2, r1
 242 00f4 1A60     		str	r2, [r3]
 243              	.L10:
 263:.\Generated_Source\PSoC4/ADC.c ****             }
 264:.\Generated_Source\PSoC4/ADC.c ****         }
 265:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC.c ****             else
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 10


 267:.\Generated_Source\PSoC4/ADC.c ****             {
 268:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:.\Generated_Source\PSoC4/ADC.c **** 
 270:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC.c ****                 {
 272:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC.c ****                 }
 274:.\Generated_Source\PSoC4/ADC.c **** 
 275:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:.\Generated_Source\PSoC4/ADC.c ****                 {
 277:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC.c ****                 }
 279:.\Generated_Source\PSoC4/ADC.c ****             }
 280:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC.c **** 
 282:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 244              		.loc 1 282 0
 245 00f6 8023     		mov	r3, #128
 246 00f8 DA00     		lsl	r2, r3, #3
 247 00fa 8023     		mov	r3, #128
 248 00fc 9B00     		lsl	r3, r3, #2
 249 00fe 1340     		and	r3, r2
 250 0100 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC.c ****         {
 284:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 251              		.loc 1 284 0
 252 0102 8023     		mov	r3, #128
 253 0104 5B00     		lsl	r3, r3, #1
 254 0106 BB60     		str	r3, [r7, #8]
 255 0108 02E0     		b	.L12
 256              	.L11:
 285:.\Generated_Source\PSoC4/ADC.c ****         }
 286:.\Generated_Source\PSoC4/ADC.c ****         else
 287:.\Generated_Source\PSoC4/ADC.c ****         {
 288:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 257              		.loc 1 288 0
 258 010a 8023     		mov	r3, #128
 259 010c 5B01     		lsl	r3, r3, #5
 260 010e BB60     		str	r3, [r7, #8]
 261              	.L12:
 289:.\Generated_Source\PSoC4/ADC.c ****         }
 290:.\Generated_Source\PSoC4/ADC.c **** 
 291:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 262              		.loc 1 291 0
 263 0110 8023     		mov	r3, #128
 264 0112 DA00     		lsl	r2, r3, #3
 265 0114 8023     		mov	r3, #128
 266 0116 5B00     		lsl	r3, r3, #1
 267 0118 1340     		and	r3, r2
 268 011a 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC.c ****         {
 293:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC.c ****             #else
 298:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 11


 269              		.loc 1 298 0
 270 011c 284B     		ldr	r3, .L16+88
 271 011e FA68     		ldr	r2, [r7, #12]
 272 0120 5200     		lsl	r2, r2, #1
 273 0122 0021     		mov	r1, #0
 274 0124 D152     		strh	r1, [r2, r3]
 275 0126 04E0     		b	.L14
 276              	.L13:
 299:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC.c ****         }
 301:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC.c ****         {
 303:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC.c ****             #else
 307:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 277              		.loc 1 307 0
 278 0128 254B     		ldr	r3, .L16+88
 279 012a FA68     		ldr	r2, [r7, #12]
 280 012c 5200     		lsl	r2, r2, #1
 281 012e 0021     		mov	r1, #0
 282 0130 D152     		strh	r1, [r2, r3]
 283              	.L14:
 308:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC.c ****         }
 310:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 284              		.loc 1 311 0 discriminator 2
 285 0132 BB68     		ldr	r3, [r7, #8]
 286 0134 234A     		ldr	r2, .L16+92
 287 0136 5343     		mul	r3, r2
 288 0138 234A     		ldr	r2, .L16+96
 289 013a 9446     		mov	ip, r2
 290 013c 6344     		add	r3, r3, ip
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 291              		.loc 1 312 0 discriminator 2
 292 013e 181C     		mov	r0, r3
 293 0140 2049     		ldr	r1, .L16+92
 294 0142 FFF7FEFF 		bl	__aeabi_idiv
 295 0146 031C     		mov	r3, r0
 311:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 296              		.loc 1 311 0 discriminator 2
 297 0148 9BB2     		uxth	r3, r3
 298 014a 19B2     		sxth	r1, r3
 299 014c 1F4B     		ldr	r3, .L16+100
 300 014e FA68     		ldr	r2, [r7, #12]
 301 0150 9200     		lsl	r2, r2, #2
 302 0152 D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 303              		.loc 1 232 0 discriminator 2
 304 0154 FB68     		ldr	r3, [r7, #12]
 305 0156 0133     		add	r3, r3, #1
 306 0158 FB60     		str	r3, [r7, #12]
 307              	.L8:
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 308              		.loc 1 232 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 12


 309 015a FB68     		ldr	r3, [r7, #12]
 310 015c 002B     		cmp	r3, #0
 311 015e 9FD0     		beq	.L15
 313:.\Generated_Source\PSoC4/ADC.c ****     }
 314:.\Generated_Source\PSoC4/ADC.c **** }
 312              		.loc 1 314 0 is_stmt 1
 313 0160 BD46     		mov	sp, r7
 314 0162 04B0     		add	sp, sp, #16
 315              		@ sp needed
 316 0164 80BD     		pop	{r7, pc}
 317              	.L17:
 318 0166 C046     		.align	2
 319              	.L16:
 320 0168 00000000 		.word	ADC_ISR
 321 016c 20003A40 		.word	1077542944
 322 0170 80033A40 		.word	1077543808
 323 0174 70021053 		.word	1393558128
 324 0178 70020053 		.word	1392509552
 325 017c 00003A40 		.word	1077542912
 326 0180 04003A40 		.word	1077542916
 327 0184 CC000080 		.word	-2147483444
 328 0188 18003A40 		.word	1077542936
 329 018c 00000908 		.word	134807552
 330 0190 1C003A40 		.word	1077542940
 331 0194 10003A40 		.word	1077542928
 332 0198 E3010400 		.word	262627
 333 019c 14003A40 		.word	1077542932
 334 01a0 04000400 		.word	262148
 335 01a4 00033A40 		.word	1077543680
 336 01a8 28023A40 		.word	1077543464
 337 01ac 38023A40 		.word	1077543480
 338 01b0 18023A40 		.word	1077543448
 339 01b4 30003A40 		.word	1077542960
 340 01b8 FFFFFFDF 		.word	-536870913
 341 01bc 80003A40 		.word	1077543040
 342 01c0 00000000 		.word	ADC_offset
 343 01c4 10270000 		.word	10000
 344 01c8 88130000 		.word	5000
 345 01cc 00000000 		.word	ADC_countsPer10Volt
 346              		.cfi_endproc
 347              	.LFE3:
 348              		.size	ADC_Init, .-ADC_Init
 349              		.section	.text.ADC_Enable,"ax",%progbits
 350              		.align	2
 351              		.global	ADC_Enable
 352              		.code	16
 353              		.thumb_func
 354              		.type	ADC_Enable, %function
 355              	ADC_Enable:
 356              	.LFB4:
 315:.\Generated_Source\PSoC4/ADC.c **** 
 316:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** *
 320:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 13


 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 357              		.loc 1 331 0
 358              		.cfi_startproc
 359 0000 80B5     		push	{r7, lr}
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 365              		.loc 1 332 0
 366 0004 0A4B     		ldr	r3, .L21
 367 0006 1B68     		ldr	r3, [r3]
 368 0008 002B     		cmp	r3, #0
 369 000a 0EDB     		blt	.L18
 333:.\Generated_Source\PSoC4/ADC.c ****     {
 334:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 370              		.loc 1 336 0
 371 000c C046     		mov	r8, r8
 372              	.L20:
 373              		.loc 1 336 0 is_stmt 0 discriminator 1
 374 000e 094B     		ldr	r3, .L21+4
 375 0010 1B68     		ldr	r3, [r3]
 376 0012 002B     		cmp	r3, #0
 377 0014 FBDB     		blt	.L20
 337:.\Generated_Source\PSoC4/ADC.c ****             {
 338:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC.c ****             }
 340:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC.c ****         
 342:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 378              		.loc 1 342 0 is_stmt 1
 379 0016 064B     		ldr	r3, .L21
 380 0018 054A     		ldr	r2, .L21
 381 001a 1268     		ldr	r2, [r2]
 382 001c 8021     		mov	r1, #128
 383 001e 0906     		lsl	r1, r1, #24
 384 0020 0A43     		orr	r2, r1
 385 0022 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC.c ****         
 344:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 386              		.loc 1 345 0
 387 0024 0A20     		mov	r0, #10
 388 0026 FFF7FEFF 		bl	CyDelayUs
 389              	.L18:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 14


 346:.\Generated_Source\PSoC4/ADC.c ****     }
 347:.\Generated_Source\PSoC4/ADC.c **** }
 390              		.loc 1 347 0
 391 002a BD46     		mov	sp, r7
 392              		@ sp needed
 393 002c 80BD     		pop	{r7, pc}
 394              	.L22:
 395 002e C046     		.align	2
 396              	.L21:
 397 0030 00003A40 		.word	1077542912
 398 0034 08023A40 		.word	1077543432
 399              		.cfi_endproc
 400              	.LFE4:
 401              		.size	ADC_Enable, .-ADC_Enable
 402              		.section	.text.ADC_Stop,"ax",%progbits
 403              		.align	2
 404              		.global	ADC_Stop
 405              		.code	16
 406              		.thumb_func
 407              		.type	ADC_Stop, %function
 408              	ADC_Stop:
 409              	.LFB5:
 348:.\Generated_Source\PSoC4/ADC.c **** 
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC.c **** *
 354:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC.c **** *
 361:.\Generated_Source\PSoC4/ADC.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC.c **** *
 364:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:.\Generated_Source\PSoC4/ADC.c **** {
 410              		.loc 1 366 0
 411              		.cfi_startproc
 412 0000 80B5     		push	{r7, lr}
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 418              		.loc 1 367 0
 419 0004 034B     		ldr	r3, .L24
 420 0006 034A     		ldr	r2, .L24
 421 0008 1268     		ldr	r2, [r2]
 422 000a 5200     		lsl	r2, r2, #1
 423 000c 5208     		lsr	r2, r2, #1
 424 000e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 15


 368:.\Generated_Source\PSoC4/ADC.c **** }
 425              		.loc 1 368 0
 426 0010 BD46     		mov	sp, r7
 427              		@ sp needed
 428 0012 80BD     		pop	{r7, pc}
 429              	.L25:
 430              		.align	2
 431              	.L24:
 432 0014 00003A40 		.word	1077542912
 433              		.cfi_endproc
 434              	.LFE5:
 435              		.size	ADC_Stop, .-ADC_Stop
 436              		.section	.text.ADC_StartConvert,"ax",%progbits
 437              		.align	2
 438              		.global	ADC_StartConvert
 439              		.code	16
 440              		.thumb_func
 441              		.type	ADC_StartConvert, %function
 442              	ADC_StartConvert:
 443              	.LFB6:
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC.c **** *
 375:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC.c **** *
 384:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC.c **** *
 387:.\Generated_Source\PSoC4/ADC.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC.c **** *
 390:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC.c **** {
 444              		.loc 1 392 0
 445              		.cfi_startproc
 446 0000 80B5     		push	{r7, lr}
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 00AF     		add	r7, sp, #0
 451              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 452              		.loc 1 394 0
 453 0004 044B     		ldr	r3, .L27
 454 0006 044A     		ldr	r2, .L27
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 16


 455 0008 1268     		ldr	r2, [r2]
 456 000a 8021     		mov	r1, #128
 457 000c 4902     		lsl	r1, r1, #9
 458 000e 0A43     		orr	r2, r1
 459 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC.c **** 
 399:.\Generated_Source\PSoC4/ADC.c **** }
 460              		.loc 1 399 0
 461 0012 BD46     		mov	sp, r7
 462              		@ sp needed
 463 0014 80BD     		pop	{r7, pc}
 464              	.L28:
 465 0016 C046     		.align	2
 466              	.L27:
 467 0018 04003A40 		.word	1077542916
 468              		.cfi_endproc
 469              	.LFE6:
 470              		.size	ADC_StartConvert, .-ADC_StartConvert
 471              		.section	.text.ADC_StopConvert,"ax",%progbits
 472              		.align	2
 473              		.global	ADC_StopConvert
 474              		.code	16
 475              		.thumb_func
 476              		.type	ADC_StopConvert, %function
 477              	ADC_StopConvert:
 478              	.LFB7:
 400:.\Generated_Source\PSoC4/ADC.c **** 
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC.c **** *
 406:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC.c **** *
 409:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC.c **** *
 412:.\Generated_Source\PSoC4/ADC.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC.c **** *
 415:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC.c **** {
 479              		.loc 1 417 0
 480              		.cfi_startproc
 481 0000 80B5     		push	{r7, lr}
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 17


 487              		.loc 1 419 0
 488 0004 034B     		ldr	r3, .L30
 489 0006 034A     		ldr	r2, .L30
 490 0008 1268     		ldr	r2, [r2]
 491 000a 0349     		ldr	r1, .L30+4
 492 000c 0A40     		and	r2, r1
 493 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC.c **** }
 494              		.loc 1 421 0
 495 0010 BD46     		mov	sp, r7
 496              		@ sp needed
 497 0012 80BD     		pop	{r7, pc}
 498              	.L31:
 499              		.align	2
 500              	.L30:
 501 0014 04003A40 		.word	1077542916
 502 0018 FFFFFEFF 		.word	-65537
 503              		.cfi_endproc
 504              	.LFE7:
 505              		.size	ADC_StopConvert, .-ADC_StopConvert
 506              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 507              		.align	2
 508              		.global	ADC_IsEndConversion
 509              		.code	16
 510              		.thumb_func
 511              		.type	ADC_IsEndConversion, %function
 512              	ADC_IsEndConversion:
 513              	.LFB8:
 422:.\Generated_Source\PSoC4/ADC.c **** 
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC.c **** *
 428:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC.c **** *
 437:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC.c **** *
 445:.\Generated_Source\PSoC4/ADC.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC.c **** *
 449:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 18


 450:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC.c **** {
 514              		.loc 1 451 0
 515              		.cfi_startproc
 516 0000 80B5     		push	{r7, lr}
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 84B0     		sub	sp, sp, #16
 521              		.cfi_def_cfa_offset 24
 522 0004 00AF     		add	r7, sp, #0
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 525              		.loc 1 452 0
 526 0008 0023     		mov	r3, #0
 527 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 528              		.loc 1 454 0
 529 000c 7B68     		ldr	r3, [r7, #4]
 530 000e 0322     		mov	r2, #3
 531 0010 1340     		and	r3, r2
 532 0012 11D0     		beq	.L33
 533              	.L35:
 455:.\Generated_Source\PSoC4/ADC.c ****     {
 456:.\Generated_Source\PSoC4/ADC.c ****         do
 457:.\Generated_Source\PSoC4/ADC.c ****         {
 458:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 534              		.loc 1 458 0 discriminator 2
 535 0014 0B4B     		ldr	r3, .L37
 536 0016 1B68     		ldr	r3, [r3]
 537 0018 0122     		mov	r2, #1
 538 001a 1340     		and	r3, r2
 539 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 540              		.loc 1 459 0 discriminator 2
 541 001e FB68     		ldr	r3, [r7, #12]
 542 0020 002B     		cmp	r3, #0
 543 0022 03D1     		bne	.L34
 544              		.loc 1 459 0 is_stmt 0 discriminator 1
 545 0024 7B68     		ldr	r3, [r7, #4]
 546 0026 0222     		mov	r2, #2
 547 0028 1340     		and	r3, r2
 548 002a F3D1     		bne	.L35
 549              	.L34:
 460:.\Generated_Source\PSoC4/ADC.c **** 
 461:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 550              		.loc 1 461 0 is_stmt 1
 551 002c FB68     		ldr	r3, [r7, #12]
 552 002e 002B     		cmp	r3, #0
 553 0030 02D0     		beq	.L33
 462:.\Generated_Source\PSoC4/ADC.c ****         {
 463:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 554              		.loc 1 464 0
 555 0032 044B     		ldr	r3, .L37
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 19


 556 0034 0122     		mov	r2, #1
 557 0036 1A60     		str	r2, [r3]
 558              	.L33:
 465:.\Generated_Source\PSoC4/ADC.c ****         }
 466:.\Generated_Source\PSoC4/ADC.c ****     }
 467:.\Generated_Source\PSoC4/ADC.c **** 
 468:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC.c ****         {
 471:.\Generated_Source\PSoC4/ADC.c ****             do
 472:.\Generated_Source\PSoC4/ADC.c ****             {
 473:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC.c **** 
 477:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC.c ****             {
 479:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC.c ****             }
 482:.\Generated_Source\PSoC4/ADC.c ****         }
 483:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC.c **** 
 485:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 559              		.loc 1 485 0
 560 0038 FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC.c **** }
 561              		.loc 1 486 0
 562 003a 181C     		mov	r0, r3
 563 003c BD46     		mov	sp, r7
 564 003e 04B0     		add	sp, sp, #16
 565              		@ sp needed
 566 0040 80BD     		pop	{r7, pc}
 567              	.L38:
 568 0042 C046     		.align	2
 569              	.L37:
 570 0044 10023A40 		.word	1077543440
 571              		.cfi_endproc
 572              	.LFE8:
 573              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 574              		.section	.text.ADC_GetResult16,"ax",%progbits
 575              		.align	2
 576              		.global	ADC_GetResult16
 577              		.code	16
 578              		.thumb_func
 579              		.type	ADC_GetResult16, %function
 580              	ADC_GetResult16:
 581              	.LFB9:
 487:.\Generated_Source\PSoC4/ADC.c **** 
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC.c **** *
 493:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 20


 496:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC.c **** *
 500:.\Generated_Source\PSoC4/ADC.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC.c **** *
 503:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC.c **** {
 582              		.loc 1 505 0
 583              		.cfi_startproc
 584 0000 80B5     		push	{r7, lr}
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 84B0     		sub	sp, sp, #16
 589              		.cfi_def_cfa_offset 24
 590 0004 00AF     		add	r7, sp, #0
 591              		.cfi_def_cfa_register 7
 592 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC.c **** 
 508:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 593              		.loc 1 509 0
 594 0008 7B68     		ldr	r3, [r7, #4]
 595 000a 002B     		cmp	r3, #0
 596 000c 02D0     		beq	.L40
 597              		.loc 1 509 0 is_stmt 0 discriminator 1
 598 000e 0020     		mov	r0, #0
 599 0010 FFF7FEFF 		bl	CyHalt
 600              	.L40:
 510:.\Generated_Source\PSoC4/ADC.c **** 
 511:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 601              		.loc 1 511 0 is_stmt 1
 602 0014 7B68     		ldr	r3, [r7, #4]
 603 0016 002B     		cmp	r3, #0
 604 0018 09D1     		bne	.L41
 512:.\Generated_Source\PSoC4/ADC.c ****     {
 513:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 605              		.loc 1 513 0
 606 001a 7B68     		ldr	r3, [r7, #4]
 607 001c 9B00     		lsl	r3, r3, #2
 608 001e 084A     		ldr	r2, .L44
 609 0020 9446     		mov	ip, r2
 610 0022 6344     		add	r3, r3, ip
 611 0024 1B68     		ldr	r3, [r3]
 612 0026 1B04     		lsl	r3, r3, #16
 613 0028 1B0C     		lsr	r3, r3, #16
 614 002a FB60     		str	r3, [r7, #12]
 615 002c 01E0     		b	.L42
 616              	.L41:
 514:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC.c ****     }
 516:.\Generated_Source\PSoC4/ADC.c ****     else
 517:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 21


 518:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC.c ****         #else
 521:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 617              		.loc 1 521 0
 618 002e 0023     		mov	r3, #0
 619 0030 FB60     		str	r3, [r7, #12]
 620              	.L42:
 522:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC.c ****     }
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 621              		.loc 1 525 0
 622 0032 FB68     		ldr	r3, [r7, #12]
 623 0034 9BB2     		uxth	r3, r3
 624 0036 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC.c **** }
 625              		.loc 1 526 0
 626 0038 181C     		mov	r0, r3
 627 003a BD46     		mov	sp, r7
 628 003c 04B0     		add	sp, sp, #16
 629              		@ sp needed
 630 003e 80BD     		pop	{r7, pc}
 631              	.L45:
 632              		.align	2
 633              	.L44:
 634 0040 80013A40 		.word	1077543296
 635              		.cfi_endproc
 636              	.LFE9:
 637              		.size	ADC_GetResult16, .-ADC_GetResult16
 638              		.section	.text.ADC_SetChanMask,"ax",%progbits
 639              		.align	2
 640              		.global	ADC_SetChanMask
 641              		.code	16
 642              		.thumb_func
 643              		.type	ADC_SetChanMask, %function
 644              	ADC_SetChanMask:
 645              	.LFB10:
 527:.\Generated_Source\PSoC4/ADC.c **** 
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC.c **** *
 533:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC.c **** *
 536:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC.c **** *
 545:.\Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 22


 546:.\Generated_Source\PSoC4/ADC.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC.c **** {
 646              		.loc 1 550 0
 647              		.cfi_startproc
 648 0000 80B5     		push	{r7, lr}
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 7, -8
 651              		.cfi_offset 14, -4
 652 0002 82B0     		sub	sp, sp, #8
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              		.cfi_def_cfa_register 7
 656 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 657              		.loc 1 551 0
 658 0008 034B     		ldr	r3, .L47
 659 000a 7A68     		ldr	r2, [r7, #4]
 660 000c 0121     		mov	r1, #1
 661 000e 0A40     		and	r2, r1
 662 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC.c **** }
 663              		.loc 1 552 0
 664 0012 BD46     		mov	sp, r7
 665 0014 02B0     		add	sp, sp, #8
 666              		@ sp needed
 667 0016 80BD     		pop	{r7, pc}
 668              	.L48:
 669              		.align	2
 670              	.L47:
 671 0018 20003A40 		.word	1077542944
 672              		.cfi_endproc
 673              	.LFE10:
 674              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 675              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 676              		.align	2
 677              		.global	ADC_SetLowLimit
 678              		.code	16
 679              		.thumb_func
 680              		.type	ADC_SetLowLimit, %function
 681              	ADC_SetLowLimit:
 682              	.LFB11:
 553:.\Generated_Source\PSoC4/ADC.c **** 
 554:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC.c **** 
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC.c ****     *
 561:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC.c ****     *
 564:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC.c ****     *  None.
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 23


 566:.\Generated_Source\PSoC4/ADC.c ****     *
 567:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC.c ****     *
 570:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC.c ****     {
 573:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC.c ****     }
 575:.\Generated_Source\PSoC4/ADC.c **** 
 576:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC.c **** 
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC.c **** *
 583:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC.c **** *
 586:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC.c **** *
 589:.\Generated_Source\PSoC4/ADC.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC.c **** *
 592:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC.c **** {
 683              		.loc 1 594 0
 684              		.cfi_startproc
 685 0000 80B5     		push	{r7, lr}
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 7, -8
 688              		.cfi_offset 14, -4
 689 0002 82B0     		sub	sp, sp, #8
 690              		.cfi_def_cfa_offset 16
 691 0004 00AF     		add	r7, sp, #0
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 694              		.loc 1 595 0
 695 0008 084B     		ldr	r3, .L50
 696 000a 084A     		ldr	r2, .L50
 697 000c 1268     		ldr	r2, [r2]
 698 000e 120C     		lsr	r2, r2, #16
 699 0010 1204     		lsl	r2, r2, #16
 700 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 701              		.loc 1 596 0
 702 0014 054B     		ldr	r3, .L50
 703 0016 054A     		ldr	r2, .L50
 704 0018 1168     		ldr	r1, [r2]
 705 001a 7A68     		ldr	r2, [r7, #4]
 706 001c 1204     		lsl	r2, r2, #16
 707 001e 120C     		lsr	r2, r2, #16
 708 0020 0A43     		orr	r2, r1
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 24


 709 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c **** }
 710              		.loc 1 597 0
 711 0024 BD46     		mov	sp, r7
 712 0026 02B0     		add	sp, sp, #8
 713              		@ sp needed
 714 0028 80BD     		pop	{r7, pc}
 715              	.L51:
 716 002a C046     		.align	2
 717              	.L50:
 718 002c 18003A40 		.word	1077542936
 719              		.cfi_endproc
 720              	.LFE11:
 721              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 722              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 723              		.align	2
 724              		.global	ADC_SetHighLimit
 725              		.code	16
 726              		.thumb_func
 727              		.type	ADC_SetHighLimit, %function
 728              	ADC_SetHighLimit:
 729              	.LFB12:
 598:.\Generated_Source\PSoC4/ADC.c **** 
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC.c **** *
 604:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC.c **** *
 607:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC.c **** *
 610:.\Generated_Source\PSoC4/ADC.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC.c **** {
 730              		.loc 1 615 0
 731              		.cfi_startproc
 732 0000 80B5     		push	{r7, lr}
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 7, -8
 735              		.cfi_offset 14, -4
 736 0002 82B0     		sub	sp, sp, #8
 737              		.cfi_def_cfa_offset 16
 738 0004 00AF     		add	r7, sp, #0
 739              		.cfi_def_cfa_register 7
 740 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 741              		.loc 1 616 0
 742 0008 074B     		ldr	r3, .L53
 743 000a 074A     		ldr	r2, .L53
 744 000c 1268     		ldr	r2, [r2]
 745 000e 1204     		lsl	r2, r2, #16
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 25


 746 0010 120C     		lsr	r2, r2, #16
 747 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 748              		.loc 1 617 0
 749 0014 044B     		ldr	r3, .L53
 750 0016 044A     		ldr	r2, .L53
 751 0018 1168     		ldr	r1, [r2]
 752 001a 7A68     		ldr	r2, [r7, #4]
 753 001c 1204     		lsl	r2, r2, #16
 754 001e 0A43     		orr	r2, r1
 755 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c **** }
 756              		.loc 1 618 0
 757 0022 BD46     		mov	sp, r7
 758 0024 02B0     		add	sp, sp, #8
 759              		@ sp needed
 760 0026 80BD     		pop	{r7, pc}
 761              	.L54:
 762              		.align	2
 763              	.L53:
 764 0028 18003A40 		.word	1077542936
 765              		.cfi_endproc
 766              	.LFE12:
 767              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 768              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 769              		.align	2
 770              		.global	ADC_SetLimitMask
 771              		.code	16
 772              		.thumb_func
 773              		.type	ADC_SetLimitMask, %function
 774              	ADC_SetLimitMask:
 775              	.LFB13:
 619:.\Generated_Source\PSoC4/ADC.c **** 
 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC.c **** *
 634:.\Generated_Source\PSoC4/ADC.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC.c **** *
 637:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC.c **** {
 776              		.loc 1 639 0
 777              		.cfi_startproc
 778 0000 80B5     		push	{r7, lr}
 779              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 26


 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0002 82B0     		sub	sp, sp, #8
 783              		.cfi_def_cfa_offset 16
 784 0004 00AF     		add	r7, sp, #0
 785              		.cfi_def_cfa_register 7
 786 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 787              		.loc 1 640 0
 788 0008 034B     		ldr	r3, .L56
 789 000a 7A68     		ldr	r2, [r7, #4]
 790 000c 0121     		mov	r1, #1
 791 000e 0A40     		and	r2, r1
 792 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC.c **** }
 793              		.loc 1 641 0
 794 0012 BD46     		mov	sp, r7
 795 0014 02B0     		add	sp, sp, #8
 796              		@ sp needed
 797 0016 80BD     		pop	{r7, pc}
 798              	.L57:
 799              		.align	2
 800              	.L56:
 801 0018 38023A40 		.word	1077543480
 802              		.cfi_endproc
 803              	.LFE13:
 804              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 805              		.section	.text.ADC_SetSatMask,"ax",%progbits
 806              		.align	2
 807              		.global	ADC_SetSatMask
 808              		.code	16
 809              		.thumb_func
 810              		.type	ADC_SetSatMask, %function
 811              	ADC_SetSatMask:
 812              	.LFB14:
 642:.\Generated_Source\PSoC4/ADC.c **** 
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC.c **** *
 648:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC.c **** *
 651:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC.c **** *
 657:.\Generated_Source\PSoC4/ADC.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC.c **** *
 660:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC.c **** {
 813              		.loc 1 662 0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 27


 814              		.cfi_startproc
 815 0000 80B5     		push	{r7, lr}
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 7, -8
 818              		.cfi_offset 14, -4
 819 0002 82B0     		sub	sp, sp, #8
 820              		.cfi_def_cfa_offset 16
 821 0004 00AF     		add	r7, sp, #0
 822              		.cfi_def_cfa_register 7
 823 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 824              		.loc 1 663 0
 825 0008 034B     		ldr	r3, .L59
 826 000a 7A68     		ldr	r2, [r7, #4]
 827 000c 0121     		mov	r1, #1
 828 000e 0A40     		and	r2, r1
 829 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC.c **** }
 830              		.loc 1 664 0
 831 0012 BD46     		mov	sp, r7
 832 0014 02B0     		add	sp, sp, #8
 833              		@ sp needed
 834 0016 80BD     		pop	{r7, pc}
 835              	.L60:
 836              		.align	2
 837              	.L59:
 838 0018 28023A40 		.word	1077543464
 839              		.cfi_endproc
 840              	.LFE14:
 841              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 842              		.section	.text.ADC_SetOffset,"ax",%progbits
 843              		.align	2
 844              		.global	ADC_SetOffset
 845              		.code	16
 846              		.thumb_func
 847              		.type	ADC_SetOffset, %function
 848              	ADC_SetOffset:
 849              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC.c **** *
 671:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC.c **** *
 677:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC.c **** *
 682:.\Generated_Source\PSoC4/ADC.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 28


 684:.\Generated_Source\PSoC4/ADC.c **** *
 685:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC.c **** *
 688:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC.c **** {
 850              		.loc 1 690 0
 851              		.cfi_startproc
 852 0000 80B5     		push	{r7, lr}
 853              		.cfi_def_cfa_offset 8
 854              		.cfi_offset 7, -8
 855              		.cfi_offset 14, -4
 856 0002 82B0     		sub	sp, sp, #8
 857              		.cfi_def_cfa_offset 16
 858 0004 00AF     		add	r7, sp, #0
 859              		.cfi_def_cfa_register 7
 860 0006 7860     		str	r0, [r7, #4]
 861 0008 0A1C     		mov	r2, r1
 862 000a BB1C     		add	r3, r7, #2
 863 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 864              		.loc 1 692 0
 865 000e 7B68     		ldr	r3, [r7, #4]
 866 0010 002B     		cmp	r3, #0
 867 0012 02D0     		beq	.L62
 868              		.loc 1 692 0 is_stmt 0 discriminator 1
 869 0014 0020     		mov	r0, #0
 870 0016 FFF7FEFF 		bl	CyHalt
 871              	.L62:
 693:.\Generated_Source\PSoC4/ADC.c **** 
 694:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 872              		.loc 1 694 0 is_stmt 1
 873 001a 044B     		ldr	r3, .L63
 874 001c 7A68     		ldr	r2, [r7, #4]
 875 001e 5200     		lsl	r2, r2, #1
 876 0020 B91C     		add	r1, r7, #2
 877 0022 0988     		ldrh	r1, [r1]
 878 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC.c **** }
 879              		.loc 1 695 0
 880 0026 BD46     		mov	sp, r7
 881 0028 02B0     		add	sp, sp, #8
 882              		@ sp needed
 883 002a 80BD     		pop	{r7, pc}
 884              	.L64:
 885              		.align	2
 886              	.L63:
 887 002c 00000000 		.word	ADC_offset
 888              		.cfi_endproc
 889              	.LFE15:
 890              		.size	ADC_SetOffset, .-ADC_SetOffset
 891              		.section	.text.ADC_SetGain,"ax",%progbits
 892              		.align	2
 893              		.global	ADC_SetGain
 894              		.code	16
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 29


 895              		.thumb_func
 896              		.type	ADC_SetGain, %function
 897              	ADC_SetGain:
 898              	.LFB16:
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c **** *
 702:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC.c **** *
 711:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC.c **** *
 715:.\Generated_Source\PSoC4/ADC.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC.c **** *
 718:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC.c **** *
 722:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC.c **** {
 899              		.loc 1 724 0
 900              		.cfi_startproc
 901 0000 80B5     		push	{r7, lr}
 902              		.cfi_def_cfa_offset 8
 903              		.cfi_offset 7, -8
 904              		.cfi_offset 14, -4
 905 0002 82B0     		sub	sp, sp, #8
 906              		.cfi_def_cfa_offset 16
 907 0004 00AF     		add	r7, sp, #0
 908              		.cfi_def_cfa_register 7
 909 0006 7860     		str	r0, [r7, #4]
 910 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 911              		.loc 1 726 0
 912 000a 7B68     		ldr	r3, [r7, #4]
 913 000c 002B     		cmp	r3, #0
 914 000e 02D0     		beq	.L66
 915              		.loc 1 726 0 is_stmt 0 discriminator 1
 916 0010 0020     		mov	r0, #0
 917 0012 FFF7FEFF 		bl	CyHalt
 918              	.L66:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 30


 919              		.loc 1 728 0 is_stmt 1
 920 0016 044B     		ldr	r3, .L67
 921 0018 7A68     		ldr	r2, [r7, #4]
 922 001a 9200     		lsl	r2, r2, #2
 923 001c 3968     		ldr	r1, [r7]
 924 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC.c **** }
 925              		.loc 1 729 0
 926 0020 BD46     		mov	sp, r7
 927 0022 02B0     		add	sp, sp, #8
 928              		@ sp needed
 929 0024 80BD     		pop	{r7, pc}
 930              	.L68:
 931 0026 C046     		.align	2
 932              	.L67:
 933 0028 00000000 		.word	ADC_countsPer10Volt
 934              		.cfi_endproc
 935              	.LFE16:
 936              		.size	ADC_SetGain, .-ADC_SetGain
 937              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 938              		.align	2
 939              		.global	ADC_CountsTo_mVolts
 940              		.code	16
 941              		.thumb_func
 942              		.type	ADC_CountsTo_mVolts, %function
 943              	ADC_CountsTo_mVolts:
 944              	.LFB17:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:.\Generated_Source\PSoC4/ADC.c **** 
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC.c ****     *
 739:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC.c ****     *
 743:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC.c ****     *
 747:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     *
 750:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC.c ****     {
 945              		.loc 1 757 0
 946              		.cfi_startproc
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 31


 947 0000 80B5     		push	{r7, lr}
 948              		.cfi_def_cfa_offset 8
 949              		.cfi_offset 7, -8
 950              		.cfi_offset 14, -4
 951 0002 84B0     		sub	sp, sp, #16
 952              		.cfi_def_cfa_offset 24
 953 0004 00AF     		add	r7, sp, #0
 954              		.cfi_def_cfa_register 7
 955 0006 7860     		str	r0, [r7, #4]
 956 0008 0A1C     		mov	r2, r1
 957 000a BB1C     		add	r3, r7, #2
 958 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC.c **** 
 760:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 959              		.loc 1 761 0
 960 000e 7B68     		ldr	r3, [r7, #4]
 961 0010 002B     		cmp	r3, #0
 962 0012 02D0     		beq	.L70
 963              		.loc 1 761 0 is_stmt 0 discriminator 1
 964 0014 0020     		mov	r0, #0
 965 0016 FFF7FEFF 		bl	CyHalt
 966              	.L70:
 762:.\Generated_Source\PSoC4/ADC.c **** 
 763:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC.c ****             {
 767:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC.c ****             }
 769:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC.c **** 
 771:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 967              		.loc 1 772 0 is_stmt 1
 968 001a 1F4B     		ldr	r3, .L76
 969 001c 7A68     		ldr	r2, [r7, #4]
 970 001e 5200     		lsl	r2, r2, #1
 971 0020 D35A     		ldrh	r3, [r2, r3]
 972 0022 99B2     		uxth	r1, r3
 973 0024 BB1C     		add	r3, r7, #2
 974 0026 1A88     		ldrh	r2, [r3]
 975 0028 8BB2     		uxth	r3, r1
 976 002a D31A     		sub	r3, r2, r3
 977 002c 9AB2     		uxth	r2, r3
 978 002e BB1C     		add	r3, r7, #2
 979 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC.c **** 
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 980              		.loc 1 774 0
 981 0032 BB1C     		add	r3, r7, #2
 982 0034 0022     		mov	r2, #0
 983 0036 9B5E     		ldrsh	r3, [r3, r2]
 984 0038 184A     		ldr	r2, .L76+4
 985 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 32


 986              		.loc 1 775 0
 987 003c BB1C     		add	r3, r7, #2
 988 003e 0021     		mov	r1, #0
 989 0040 5B5E     		ldrsh	r3, [r3, r1]
 990 0042 002B     		cmp	r3, #0
 991 0044 08DD     		ble	.L71
 992              		.loc 1 775 0 is_stmt 0 discriminator 1
 993 0046 164B     		ldr	r3, .L76+8
 994 0048 7968     		ldr	r1, [r7, #4]
 995 004a 8900     		lsl	r1, r1, #2
 996 004c CB58     		ldr	r3, [r1, r3]
 997 004e 002B     		cmp	r3, #0
 998 0050 00DA     		bge	.L72
 999 0052 0133     		add	r3, r3, #1
 1000              	.L72:
 1001 0054 5B10     		asr	r3, r3, #1
 1002 0056 08E0     		b	.L73
 1003              	.L71:
 1004              		.loc 1 775 0 discriminator 2
 1005 0058 114B     		ldr	r3, .L76+8
 1006 005a 7968     		ldr	r1, [r7, #4]
 1007 005c 8900     		lsl	r1, r1, #2
 1008 005e CB58     		ldr	r3, [r1, r3]
 1009 0060 002B     		cmp	r3, #0
 1010 0062 00DA     		bge	.L74
 1011 0064 0133     		add	r3, r3, #1
 1012              	.L74:
 1013 0066 5B10     		asr	r3, r3, #1
 1014 0068 5B42     		neg	r3, r3
 1015              	.L73:
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1016              		.loc 1 774 0 is_stmt 1
 1017 006a D118     		add	r1, r2, r3
 776:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1018              		.loc 1 776 0
 1019 006c 0C4B     		ldr	r3, .L76+8
 1020 006e 7A68     		ldr	r2, [r7, #4]
 1021 0070 9200     		lsl	r2, r2, #2
 1022 0072 D358     		ldr	r3, [r2, r3]
 1023 0074 081C     		mov	r0, r1
 1024 0076 191C     		mov	r1, r3
 1025 0078 FFF7FEFF 		bl	__aeabi_idiv
 1026 007c 031C     		mov	r3, r0
 1027 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1028              		.loc 1 774 0
 1029 0080 0E23     		mov	r3, #14
 1030 0082 FB18     		add	r3, r7, r3
 1031 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c **** 
 778:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1032              		.loc 1 778 0
 1033 0086 0E23     		mov	r3, #14
 1034 0088 FB18     		add	r3, r7, r3
 1035 008a 1B88     		ldrh	r3, [r3]
 1036 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 33


 1037              		.loc 1 779 0
 1038 008e 181C     		mov	r0, r3
 1039 0090 BD46     		mov	sp, r7
 1040 0092 04B0     		add	sp, sp, #16
 1041              		@ sp needed
 1042 0094 80BD     		pop	{r7, pc}
 1043              	.L77:
 1044 0096 C046     		.align	2
 1045              	.L76:
 1046 0098 00000000 		.word	ADC_offset
 1047 009c 10270000 		.word	10000
 1048 00a0 00000000 		.word	ADC_countsPer10Volt
 1049              		.cfi_endproc
 1050              	.LFE17:
 1051              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1052              		.global	__aeabi_lmul
 1053              		.global	__aeabi_ldivmod
 1054              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1055              		.align	2
 1056              		.global	ADC_CountsTo_uVolts
 1057              		.code	16
 1058              		.thumb_func
 1059              		.type	ADC_CountsTo_uVolts, %function
 1060              	ADC_CountsTo_uVolts:
 1061              	.LFB18:
 780:.\Generated_Source\PSoC4/ADC.c **** 
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC.c ****     *
 786:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC.c ****     *
 790:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC.c ****     *
 794:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC.c ****     *
 797:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC.c ****     *
 802:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC.c ****     *
 809:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 34


 1062              		.loc 1 811 0
 1063              		.cfi_startproc
 1064 0000 B0B5     		push	{r4, r5, r7, lr}
 1065              		.cfi_def_cfa_offset 16
 1066              		.cfi_offset 4, -16
 1067              		.cfi_offset 5, -12
 1068              		.cfi_offset 7, -8
 1069              		.cfi_offset 14, -4
 1070 0002 86B0     		sub	sp, sp, #24
 1071              		.cfi_def_cfa_offset 40
 1072 0004 00AF     		add	r7, sp, #0
 1073              		.cfi_def_cfa_register 7
 1074 0006 F860     		str	r0, [r7, #12]
 1075 0008 0A1C     		mov	r2, r1
 1076 000a 0A23     		mov	r3, #10
 1077 000c FB18     		add	r3, r7, r3
 1078 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC.c **** 
 814:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1079              		.loc 1 815 0
 1080 0010 FB68     		ldr	r3, [r7, #12]
 1081 0012 002B     		cmp	r3, #0
 1082 0014 02D0     		beq	.L79
 1083              		.loc 1 815 0 is_stmt 0 discriminator 1
 1084 0016 0020     		mov	r0, #0
 1085 0018 FFF7FEFF 		bl	CyHalt
 1086              	.L79:
 816:.\Generated_Source\PSoC4/ADC.c **** 
 817:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC.c ****             {
 821:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC.c ****             }
 823:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC.c **** 
 825:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1087              		.loc 1 826 0 is_stmt 1
 1088 001c 194B     		ldr	r3, .L81
 1089 001e FA68     		ldr	r2, [r7, #12]
 1090 0020 5200     		lsl	r2, r2, #1
 1091 0022 D35A     		ldrh	r3, [r2, r3]
 1092 0024 99B2     		uxth	r1, r3
 1093 0026 0A23     		mov	r3, #10
 1094 0028 FB18     		add	r3, r7, r3
 1095 002a 1A88     		ldrh	r2, [r3]
 1096 002c 8BB2     		uxth	r3, r1
 1097 002e D31A     		sub	r3, r2, r3
 1098 0030 9AB2     		uxth	r2, r3
 1099 0032 0A23     		mov	r3, #10
 1100 0034 FB18     		add	r3, r7, r3
 1101 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC.c **** 
 828:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 35


 1102              		.loc 1 828 0
 1103 0038 0A23     		mov	r3, #10
 1104 003a FB18     		add	r3, r7, r3
 1105 003c 1B88     		ldrh	r3, [r3]
 1106 003e 1BB2     		sxth	r3, r3
 1107 0040 3B60     		str	r3, [r7]
 1108 0042 DB17     		asr	r3, r3, #31
 1109 0044 7B60     		str	r3, [r7, #4]
 1110 0046 3868     		ldr	r0, [r7]
 1111 0048 7968     		ldr	r1, [r7, #4]
 1112 004a 0F4A     		ldr	r2, .L81+4
 1113 004c 0023     		mov	r3, #0
 1114 004e FFF7FEFF 		bl	__aeabi_lmul
 1115 0052 021C     		mov	r2, r0
 1116 0054 0B1C     		mov	r3, r1
 1117 0056 101C     		mov	r0, r2
 1118 0058 191C     		mov	r1, r3
 1119 005a 0C4B     		ldr	r3, .L81+8
 1120 005c FA68     		ldr	r2, [r7, #12]
 1121 005e 9200     		lsl	r2, r2, #2
 1122 0060 D358     		ldr	r3, [r2, r3]
 1123 0062 1C1C     		mov	r4, r3
 1124 0064 DB17     		asr	r3, r3, #31
 1125 0066 1D1C     		mov	r5, r3
 1126 0068 221C     		mov	r2, r4
 1127 006a 2B1C     		mov	r3, r5
 1128 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1129 0070 031C     		mov	r3, r0
 1130 0072 0C1C     		mov	r4, r1
 1131 0074 3B61     		str	r3, [r7, #16]
 1132 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1133              		.loc 1 830 0
 1134 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC.c ****     }
 1135              		.loc 1 831 0
 1136 007a 181C     		mov	r0, r3
 1137 007c BD46     		mov	sp, r7
 1138 007e 06B0     		add	sp, sp, #24
 1139              		@ sp needed
 1140 0080 B0BD     		pop	{r4, r5, r7, pc}
 1141              	.L82:
 1142 0082 C046     		.align	2
 1143              	.L81:
 1144 0084 00000000 		.word	ADC_offset
 1145 0088 80969800 		.word	10000000
 1146 008c 00000000 		.word	ADC_countsPer10Volt
 1147              		.cfi_endproc
 1148              	.LFE18:
 1149              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1150              		.global	__aeabi_i2f
 1151              		.global	__aeabi_fmul
 1152              		.global	__aeabi_fdiv
 1153              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1154              		.align	2
 1155              		.global	ADC_CountsTo_Volts
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 36


 1156              		.code	16
 1157              		.thumb_func
 1158              		.type	ADC_CountsTo_Volts, %function
 1159              	ADC_CountsTo_Volts:
 1160              	.LFB19:
 832:.\Generated_Source\PSoC4/ADC.c **** 
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC.c ****     *
 838:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC.c ****     *
 842:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC.c ****     *
 846:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC.c ****     *
 849:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC.c ****     *
 854:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC.c ****     {
 1161              		.loc 1 856 0
 1162              		.cfi_startproc
 1163 0000 90B5     		push	{r4, r7, lr}
 1164              		.cfi_def_cfa_offset 12
 1165              		.cfi_offset 4, -12
 1166              		.cfi_offset 7, -8
 1167              		.cfi_offset 14, -4
 1168 0002 85B0     		sub	sp, sp, #20
 1169              		.cfi_def_cfa_offset 32
 1170 0004 00AF     		add	r7, sp, #0
 1171              		.cfi_def_cfa_register 7
 1172 0006 7860     		str	r0, [r7, #4]
 1173 0008 0A1C     		mov	r2, r1
 1174 000a BB1C     		add	r3, r7, #2
 1175 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC.c **** 
 859:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1176              		.loc 1 860 0
 1177 000e 7B68     		ldr	r3, [r7, #4]
 1178 0010 002B     		cmp	r3, #0
 1179 0012 02D0     		beq	.L84
 1180              		.loc 1 860 0 is_stmt 0 discriminator 1
 1181 0014 0020     		mov	r0, #0
 1182 0016 FFF7FEFF 		bl	CyHalt
 1183              	.L84:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 37


 861:.\Generated_Source\PSoC4/ADC.c **** 
 862:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC.c ****             {
 866:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC.c ****             }
 868:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC.c **** 
 870:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1184              		.loc 1 871 0 is_stmt 1
 1185 001a 164B     		ldr	r3, .L86
 1186 001c 7A68     		ldr	r2, [r7, #4]
 1187 001e 5200     		lsl	r2, r2, #1
 1188 0020 D35A     		ldrh	r3, [r2, r3]
 1189 0022 99B2     		uxth	r1, r3
 1190 0024 BB1C     		add	r3, r7, #2
 1191 0026 1A88     		ldrh	r2, [r3]
 1192 0028 8BB2     		uxth	r3, r1
 1193 002a D31A     		sub	r3, r2, r3
 1194 002c 9AB2     		uxth	r2, r3
 1195 002e BB1C     		add	r3, r7, #2
 1196 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC.c **** 
 873:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1197              		.loc 1 873 0
 1198 0032 BB1C     		add	r3, r7, #2
 1199 0034 0022     		mov	r2, #0
 1200 0036 9B5E     		ldrsh	r3, [r3, r2]
 1201 0038 181C     		mov	r0, r3
 1202 003a FFF7FEFF 		bl	__aeabi_i2f
 1203 003e 031C     		add	r3, r0, #0
 1204 0040 181C     		add	r0, r3, #0
 1205 0042 0D49     		ldr	r1, .L86+4
 1206 0044 FFF7FEFF 		bl	__aeabi_fmul
 1207 0048 031C     		add	r3, r0, #0
 1208 004a 1C1C     		add	r4, r3, #0
 1209 004c 0B4B     		ldr	r3, .L86+8
 1210 004e 7A68     		ldr	r2, [r7, #4]
 1211 0050 9200     		lsl	r2, r2, #2
 1212 0052 D358     		ldr	r3, [r2, r3]
 1213 0054 181C     		mov	r0, r3
 1214 0056 FFF7FEFF 		bl	__aeabi_i2f
 1215 005a 031C     		add	r3, r0, #0
 1216 005c 201C     		add	r0, r4, #0
 1217 005e 191C     		add	r1, r3, #0
 1218 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1219 0064 031C     		add	r3, r0, #0
 1220 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC.c **** 
 875:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1221              		.loc 1 875 0
 1222 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC.c ****     }
 1223              		.loc 1 876 0
 1224 006a 181C     		add	r0, r3, #0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 38


 1225 006c BD46     		mov	sp, r7
 1226 006e 05B0     		add	sp, sp, #20
 1227              		@ sp needed
 1228 0070 90BD     		pop	{r4, r7, pc}
 1229              	.L87:
 1230 0072 C046     		.align	2
 1231              	.L86:
 1232 0074 00000000 		.word	ADC_offset
 1233 0078 00002041 		.word	1092616192
 1234 007c 00000000 		.word	ADC_countsPer10Volt
 1235              		.cfi_endproc
 1236              	.LFE19:
 1237              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1238              		.text
 1239              	.Letext0:
 1240              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1241              		.section	.debug_info,"",%progbits
 1242              	.Ldebug_info0:
 1243 0000 77040000 		.4byte	0x477
 1244 0004 0400     		.2byte	0x4
 1245 0006 00000000 		.4byte	.Ldebug_abbrev0
 1246 000a 04       		.byte	0x4
 1247 000b 01       		.uleb128 0x1
 1248 000c 27000000 		.4byte	.LASF59
 1249 0010 01       		.byte	0x1
 1250 0011 B5000000 		.4byte	.LASF60
 1251 0015 88020000 		.4byte	.LASF61
 1252 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1253 001d 00000000 		.4byte	0
 1254 0021 00000000 		.4byte	.Ldebug_line0
 1255 0025 02       		.uleb128 0x2
 1256 0026 01       		.byte	0x1
 1257 0027 06       		.byte	0x6
 1258 0028 6E030000 		.4byte	.LASF0
 1259 002c 02       		.uleb128 0x2
 1260 002d 01       		.byte	0x1
 1261 002e 08       		.byte	0x8
 1262 002f 71010000 		.4byte	.LASF1
 1263 0033 02       		.uleb128 0x2
 1264 0034 02       		.byte	0x2
 1265 0035 05       		.byte	0x5
 1266 0036 19010000 		.4byte	.LASF2
 1267 003a 02       		.uleb128 0x2
 1268 003b 02       		.byte	0x2
 1269 003c 07       		.byte	0x7
 1270 003d 06010000 		.4byte	.LASF3
 1271 0041 02       		.uleb128 0x2
 1272 0042 04       		.byte	0x4
 1273 0043 05       		.byte	0x5
 1274 0044 60030000 		.4byte	.LASF4
 1275 0048 02       		.uleb128 0x2
 1276 0049 04       		.byte	0x4
 1277 004a 07       		.byte	0x7
 1278 004b 96010000 		.4byte	.LASF5
 1279 004f 02       		.uleb128 0x2
 1280 0050 08       		.byte	0x8
 1281 0051 05       		.byte	0x5
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 39


 1282 0052 00000000 		.4byte	.LASF6
 1283 0056 02       		.uleb128 0x2
 1284 0057 08       		.byte	0x8
 1285 0058 07       		.byte	0x7
 1286 0059 51020000 		.4byte	.LASF7
 1287 005d 03       		.uleb128 0x3
 1288 005e 04       		.byte	0x4
 1289 005f 05       		.byte	0x5
 1290 0060 696E7400 		.ascii	"int\000"
 1291 0064 02       		.uleb128 0x2
 1292 0065 04       		.byte	0x4
 1293 0066 07       		.byte	0x7
 1294 0067 32020000 		.4byte	.LASF8
 1295 006b 04       		.uleb128 0x4
 1296 006c 46030000 		.4byte	.LASF9
 1297 0070 02       		.byte	0x2
 1298 0071 3801     		.2byte	0x138
 1299 0073 2C000000 		.4byte	0x2c
 1300 0077 04       		.uleb128 0x4
 1301 0078 09020000 		.4byte	.LASF10
 1302 007c 02       		.byte	0x2
 1303 007d 3901     		.2byte	0x139
 1304 007f 3A000000 		.4byte	0x3a
 1305 0083 04       		.uleb128 0x4
 1306 0084 1A020000 		.4byte	.LASF11
 1307 0088 02       		.byte	0x2
 1308 0089 3A01     		.2byte	0x13a
 1309 008b 48000000 		.4byte	0x48
 1310 008f 04       		.uleb128 0x4
 1311 0090 90010000 		.4byte	.LASF12
 1312 0094 02       		.byte	0x2
 1313 0095 3C01     		.2byte	0x13c
 1314 0097 33000000 		.4byte	0x33
 1315 009b 04       		.uleb128 0x4
 1316 009c A8010000 		.4byte	.LASF13
 1317 00a0 02       		.byte	0x2
 1318 00a1 3D01     		.2byte	0x13d
 1319 00a3 41000000 		.4byte	0x41
 1320 00a7 04       		.uleb128 0x4
 1321 00a8 48010000 		.4byte	.LASF14
 1322 00ac 02       		.byte	0x2
 1323 00ad 3E01     		.2byte	0x13e
 1324 00af B3000000 		.4byte	0xb3
 1325 00b3 02       		.uleb128 0x2
 1326 00b4 04       		.byte	0x4
 1327 00b5 04       		.byte	0x4
 1328 00b6 DB000000 		.4byte	.LASF15
 1329 00ba 02       		.uleb128 0x2
 1330 00bb 08       		.byte	0x8
 1331 00bc 04       		.byte	0x4
 1332 00bd F1010000 		.4byte	.LASF16
 1333 00c1 04       		.uleb128 0x4
 1334 00c2 86030000 		.4byte	.LASF17
 1335 00c6 02       		.byte	0x2
 1336 00c7 4301     		.2byte	0x143
 1337 00c9 4F000000 		.4byte	0x4f
 1338 00cd 02       		.uleb128 0x2
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 40


 1339 00ce 01       		.byte	0x1
 1340 00cf 08       		.byte	0x8
 1341 00d0 69030000 		.4byte	.LASF18
 1342 00d4 04       		.uleb128 0x4
 1343 00d5 21000000 		.4byte	.LASF19
 1344 00d9 02       		.byte	0x2
 1345 00da E401     		.2byte	0x1e4
 1346 00dc E0000000 		.4byte	0xe0
 1347 00e0 05       		.uleb128 0x5
 1348 00e1 83000000 		.4byte	0x83
 1349 00e5 02       		.uleb128 0x2
 1350 00e6 04       		.byte	0x4
 1351 00e7 07       		.byte	0x7
 1352 00e8 DD020000 		.4byte	.LASF20
 1353 00ec 06       		.uleb128 0x6
 1354 00ed 6F020000 		.4byte	.LASF24
 1355 00f1 01       		.byte	0x1
 1356 00f2 3F       		.byte	0x3f
 1357 00f3 00000000 		.4byte	.LFB2
 1358 00f7 24000000 		.4byte	.LFE2-.LFB2
 1359 00fb 01       		.uleb128 0x1
 1360 00fc 9C       		.byte	0x9c
 1361 00fd 07       		.uleb128 0x7
 1362 00fe 79020000 		.4byte	.LASF35
 1363 0102 01       		.byte	0x1
 1364 0103 5E       		.byte	0x5e
 1365 0104 00000000 		.4byte	.LFB3
 1366 0108 D0010000 		.4byte	.LFE3-.LFB3
 1367 010c 01       		.uleb128 0x1
 1368 010d 9C       		.byte	0x9c
 1369 010e 3D010000 		.4byte	0x13d
 1370 0112 08       		.uleb128 0x8
 1371 0113 23030000 		.4byte	.LASF21
 1372 0117 01       		.byte	0x1
 1373 0118 60       		.byte	0x60
 1374 0119 83000000 		.4byte	0x83
 1375 011d 02       		.uleb128 0x2
 1376 011e 91       		.byte	0x91
 1377 011f 74       		.sleb128 -12
 1378 0120 08       		.uleb128 0x8
 1379 0121 5B010000 		.4byte	.LASF22
 1380 0125 01       		.byte	0x1
 1381 0126 61       		.byte	0x61
 1382 0127 83000000 		.4byte	0x83
 1383 012b 02       		.uleb128 0x2
 1384 012c 91       		.byte	0x91
 1385 012d 6C       		.sleb128 -20
 1386 012e 08       		.uleb128 0x8
 1387 012f 4A020000 		.4byte	.LASF23
 1388 0133 01       		.byte	0x1
 1389 0134 62       		.byte	0x62
 1390 0135 9B000000 		.4byte	0x9b
 1391 0139 02       		.uleb128 0x2
 1392 013a 91       		.byte	0x91
 1393 013b 70       		.sleb128 -16
 1394 013c 00       		.byte	0
 1395 013d 09       		.uleb128 0x9
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 41


 1396 013e 3F020000 		.4byte	.LASF25
 1397 0142 01       		.byte	0x1
 1398 0143 4A01     		.2byte	0x14a
 1399 0145 00000000 		.4byte	.LFB4
 1400 0149 38000000 		.4byte	.LFE4-.LFB4
 1401 014d 01       		.uleb128 0x1
 1402 014e 9C       		.byte	0x9c
 1403 014f 0A       		.uleb128 0xa
 1404 0150 8C030000 		.4byte	.LASF26
 1405 0154 01       		.byte	0x1
 1406 0155 6D01     		.2byte	0x16d
 1407 0157 00000000 		.4byte	.LFB5
 1408 015b 18000000 		.4byte	.LFE5-.LFB5
 1409 015f 01       		.uleb128 0x1
 1410 0160 9C       		.byte	0x9c
 1411 0161 0A       		.uleb128 0xa
 1412 0162 0D030000 		.4byte	.LASF27
 1413 0166 01       		.byte	0x1
 1414 0167 8701     		.2byte	0x187
 1415 0169 00000000 		.4byte	.LFB6
 1416 016d 1C000000 		.4byte	.LFE6-.LFB6
 1417 0171 01       		.uleb128 0x1
 1418 0172 9C       		.byte	0x9c
 1419 0173 0A       		.uleb128 0xa
 1420 0174 36030000 		.4byte	.LASF28
 1421 0178 01       		.byte	0x1
 1422 0179 A001     		.2byte	0x1a0
 1423 017b 00000000 		.4byte	.LFB7
 1424 017f 1C000000 		.4byte	.LFE7-.LFB7
 1425 0183 01       		.uleb128 0x1
 1426 0184 9C       		.byte	0x9c
 1427 0185 0B       		.uleb128 0xb
 1428 0186 DD010000 		.4byte	.LASF30
 1429 018a 01       		.byte	0x1
 1430 018b C201     		.2byte	0x1c2
 1431 018d 83000000 		.4byte	0x83
 1432 0191 00000000 		.4byte	.LFB8
 1433 0195 48000000 		.4byte	.LFE8-.LFB8
 1434 0199 01       		.uleb128 0x1
 1435 019a 9C       		.byte	0x9c
 1436 019b BE010000 		.4byte	0x1be
 1437 019f 0C       		.uleb128 0xc
 1438 01a0 29030000 		.4byte	.LASF32
 1439 01a4 01       		.byte	0x1
 1440 01a5 C201     		.2byte	0x1c2
 1441 01a7 83000000 		.4byte	0x83
 1442 01ab 02       		.uleb128 0x2
 1443 01ac 91       		.byte	0x91
 1444 01ad 6C       		.sleb128 -20
 1445 01ae 0D       		.uleb128 0xd
 1446 01af 41010000 		.4byte	.LASF29
 1447 01b3 01       		.byte	0x1
 1448 01b4 C401     		.2byte	0x1c4
 1449 01b6 83000000 		.4byte	0x83
 1450 01ba 02       		.uleb128 0x2
 1451 01bb 91       		.byte	0x91
 1452 01bc 74       		.sleb128 -12
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 42


 1453 01bd 00       		.byte	0
 1454 01be 0E       		.uleb128 0xe
 1455 01bf AE010000 		.4byte	.LASF31
 1456 01c3 01       		.byte	0x1
 1457 01c4 F801     		.2byte	0x1f8
 1458 01c6 8F000000 		.4byte	0x8f
 1459 01ca 00000000 		.4byte	.LFB9
 1460 01ce 44000000 		.4byte	.LFE9-.LFB9
 1461 01d2 01       		.uleb128 0x1
 1462 01d3 9C       		.byte	0x9c
 1463 01d4 F7010000 		.4byte	0x1f7
 1464 01d8 0C       		.uleb128 0xc
 1465 01d9 31030000 		.4byte	.LASF33
 1466 01dd 01       		.byte	0x1
 1467 01de F801     		.2byte	0x1f8
 1468 01e0 83000000 		.4byte	0x83
 1469 01e4 02       		.uleb128 0x2
 1470 01e5 91       		.byte	0x91
 1471 01e6 6C       		.sleb128 -20
 1472 01e7 0D       		.uleb128 0xd
 1473 01e8 68020000 		.4byte	.LASF34
 1474 01ec 01       		.byte	0x1
 1475 01ed FA01     		.2byte	0x1fa
 1476 01ef 83000000 		.4byte	0x83
 1477 01f3 02       		.uleb128 0x2
 1478 01f4 91       		.byte	0x91
 1479 01f5 74       		.sleb128 -12
 1480 01f6 00       		.byte	0
 1481 01f7 0F       		.uleb128 0xf
 1482 01f8 BE010000 		.4byte	.LASF36
 1483 01fc 01       		.byte	0x1
 1484 01fd 2502     		.2byte	0x225
 1485 01ff 00000000 		.4byte	.LFB10
 1486 0203 1C000000 		.4byte	.LFE10-.LFB10
 1487 0207 01       		.uleb128 0x1
 1488 0208 9C       		.byte	0x9c
 1489 0209 1D020000 		.4byte	0x21d
 1490 020d 0C       		.uleb128 0xc
 1491 020e 1E030000 		.4byte	.LASF37
 1492 0212 01       		.byte	0x1
 1493 0213 2502     		.2byte	0x225
 1494 0215 83000000 		.4byte	0x83
 1495 0219 02       		.uleb128 0x2
 1496 021a 91       		.byte	0x91
 1497 021b 74       		.sleb128 -12
 1498 021c 00       		.byte	0
 1499 021d 0F       		.uleb128 0xf
 1500 021e 31010000 		.4byte	.LASF38
 1501 0222 01       		.byte	0x1
 1502 0223 5102     		.2byte	0x251
 1503 0225 00000000 		.4byte	.LFB11
 1504 0229 30000000 		.4byte	.LFE11-.LFB11
 1505 022d 01       		.uleb128 0x1
 1506 022e 9C       		.byte	0x9c
 1507 022f 43020000 		.4byte	0x243
 1508 0233 0C       		.uleb128 0xc
 1509 0234 F8010000 		.4byte	.LASF39
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 43


 1510 0238 01       		.byte	0x1
 1511 0239 5102     		.2byte	0x251
 1512 023b 83000000 		.4byte	0x83
 1513 023f 02       		.uleb128 0x2
 1514 0240 91       		.byte	0x91
 1515 0241 74       		.sleb128 -12
 1516 0242 00       		.byte	0
 1517 0243 0F       		.uleb128 0xf
 1518 0244 7F010000 		.4byte	.LASF40
 1519 0248 01       		.byte	0x1
 1520 0249 6602     		.2byte	0x266
 1521 024b 00000000 		.4byte	.LFB12
 1522 024f 2C000000 		.4byte	.LFE12-.LFB12
 1523 0253 01       		.uleb128 0x1
 1524 0254 9C       		.byte	0x9c
 1525 0255 69020000 		.4byte	0x269
 1526 0259 0C       		.uleb128 0xc
 1527 025a E1000000 		.4byte	.LASF41
 1528 025e 01       		.byte	0x1
 1529 025f 6602     		.2byte	0x266
 1530 0261 83000000 		.4byte	0x83
 1531 0265 02       		.uleb128 0x2
 1532 0266 91       		.byte	0x91
 1533 0267 74       		.sleb128 -12
 1534 0268 00       		.byte	0
 1535 0269 0F       		.uleb128 0xf
 1536 026a 21020000 		.4byte	.LASF42
 1537 026e 01       		.byte	0x1
 1538 026f 7E02     		.2byte	0x27e
 1539 0271 00000000 		.4byte	.LFB13
 1540 0275 1C000000 		.4byte	.LFE13-.LFB13
 1541 0279 01       		.uleb128 0x1
 1542 027a 9C       		.byte	0x9c
 1543 027b 8F020000 		.4byte	0x28f
 1544 027f 0C       		.uleb128 0xc
 1545 0280 1E030000 		.4byte	.LASF37
 1546 0284 01       		.byte	0x1
 1547 0285 7E02     		.2byte	0x27e
 1548 0287 83000000 		.4byte	0x83
 1549 028b 02       		.uleb128 0x2
 1550 028c 91       		.byte	0x91
 1551 028d 74       		.sleb128 -12
 1552 028e 00       		.byte	0
 1553 028f 0F       		.uleb128 0xf
 1554 0290 CE010000 		.4byte	.LASF43
 1555 0294 01       		.byte	0x1
 1556 0295 9502     		.2byte	0x295
 1557 0297 00000000 		.4byte	.LFB14
 1558 029b 1C000000 		.4byte	.LFE14-.LFB14
 1559 029f 01       		.uleb128 0x1
 1560 02a0 9C       		.byte	0x9c
 1561 02a1 B5020000 		.4byte	0x2b5
 1562 02a5 0C       		.uleb128 0xc
 1563 02a6 1E030000 		.4byte	.LASF37
 1564 02aa 01       		.byte	0x1
 1565 02ab 9502     		.2byte	0x295
 1566 02ad 83000000 		.4byte	0x83
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 44


 1567 02b1 02       		.uleb128 0x2
 1568 02b2 91       		.byte	0x91
 1569 02b3 74       		.sleb128 -12
 1570 02b4 00       		.byte	0
 1571 02b5 10       		.uleb128 0x10
 1572 02b6 23010000 		.4byte	.LASF44
 1573 02ba 01       		.byte	0x1
 1574 02bb B102     		.2byte	0x2b1
 1575 02bd 00000000 		.4byte	.LFB15
 1576 02c1 30000000 		.4byte	.LFE15-.LFB15
 1577 02c5 01       		.uleb128 0x1
 1578 02c6 9C       		.byte	0x9c
 1579 02c7 EA020000 		.4byte	0x2ea
 1580 02cb 0C       		.uleb128 0xc
 1581 02cc 31030000 		.4byte	.LASF33
 1582 02d0 01       		.byte	0x1
 1583 02d1 B102     		.2byte	0x2b1
 1584 02d3 83000000 		.4byte	0x83
 1585 02d7 02       		.uleb128 0x2
 1586 02d8 91       		.byte	0x91
 1587 02d9 74       		.sleb128 -12
 1588 02da 0C       		.uleb128 0xc
 1589 02db D4000000 		.4byte	.LASF45
 1590 02df 01       		.byte	0x1
 1591 02e0 B102     		.2byte	0x2b1
 1592 02e2 8F000000 		.4byte	0x8f
 1593 02e6 02       		.uleb128 0x2
 1594 02e7 91       		.byte	0x91
 1595 02e8 72       		.sleb128 -14
 1596 02e9 00       		.byte	0
 1597 02ea 10       		.uleb128 0x10
 1598 02eb 65010000 		.4byte	.LASF46
 1599 02ef 01       		.byte	0x1
 1600 02f0 D302     		.2byte	0x2d3
 1601 02f2 00000000 		.4byte	.LFB16
 1602 02f6 2C000000 		.4byte	.LFE16-.LFB16
 1603 02fa 01       		.uleb128 0x1
 1604 02fb 9C       		.byte	0x9c
 1605 02fc 1F030000 		.4byte	0x31f
 1606 0300 0C       		.uleb128 0xc
 1607 0301 31030000 		.4byte	.LASF33
 1608 0305 01       		.byte	0x1
 1609 0306 D302     		.2byte	0x2d3
 1610 0308 83000000 		.4byte	0x83
 1611 030c 02       		.uleb128 0x2
 1612 030d 91       		.byte	0x91
 1613 030e 74       		.sleb128 -12
 1614 030f 0C       		.uleb128 0xc
 1615 0310 01020000 		.4byte	.LASF47
 1616 0314 01       		.byte	0x1
 1617 0315 D302     		.2byte	0x2d3
 1618 0317 9B000000 		.4byte	0x9b
 1619 031b 02       		.uleb128 0x2
 1620 031c 91       		.byte	0x91
 1621 031d 70       		.sleb128 -16
 1622 031e 00       		.byte	0
 1623 031f 0E       		.uleb128 0xe
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 45


 1624 0320 EB000000 		.4byte	.LASF48
 1625 0324 01       		.byte	0x1
 1626 0325 F402     		.2byte	0x2f4
 1627 0327 8F000000 		.4byte	0x8f
 1628 032b 00000000 		.4byte	.LFB17
 1629 032f A4000000 		.4byte	.LFE17-.LFB17
 1630 0333 01       		.uleb128 0x1
 1631 0334 9C       		.byte	0x9c
 1632 0335 67030000 		.4byte	0x367
 1633 0339 0C       		.uleb128 0xc
 1634 033a 31030000 		.4byte	.LASF33
 1635 033e 01       		.byte	0x1
 1636 033f F402     		.2byte	0x2f4
 1637 0341 83000000 		.4byte	0x83
 1638 0345 02       		.uleb128 0x2
 1639 0346 91       		.byte	0x91
 1640 0347 6C       		.sleb128 -20
 1641 0348 0C       		.uleb128 0xc
 1642 0349 10020000 		.4byte	.LASF49
 1643 034d 01       		.byte	0x1
 1644 034e F402     		.2byte	0x2f4
 1645 0350 8F000000 		.4byte	0x8f
 1646 0354 02       		.uleb128 0x2
 1647 0355 91       		.byte	0x91
 1648 0356 6A       		.sleb128 -22
 1649 0357 0D       		.uleb128 0xd
 1650 0358 D6020000 		.4byte	.LASF50
 1651 035c 01       		.byte	0x1
 1652 035d F602     		.2byte	0x2f6
 1653 035f 8F000000 		.4byte	0x8f
 1654 0363 02       		.uleb128 0x2
 1655 0364 91       		.byte	0x91
 1656 0365 76       		.sleb128 -10
 1657 0366 00       		.byte	0
 1658 0367 0E       		.uleb128 0xe
 1659 0368 E6020000 		.4byte	.LASF51
 1660 036c 01       		.byte	0x1
 1661 036d 2A03     		.2byte	0x32a
 1662 036f 9B000000 		.4byte	0x9b
 1663 0373 00000000 		.4byte	.LFB18
 1664 0377 90000000 		.4byte	.LFE18-.LFB18
 1665 037b 01       		.uleb128 0x1
 1666 037c 9C       		.byte	0x9c
 1667 037d AF030000 		.4byte	0x3af
 1668 0381 0C       		.uleb128 0xc
 1669 0382 31030000 		.4byte	.LASF33
 1670 0386 01       		.byte	0x1
 1671 0387 2A03     		.2byte	0x32a
 1672 0389 83000000 		.4byte	0x83
 1673 038d 02       		.uleb128 0x2
 1674 038e 91       		.byte	0x91
 1675 038f 64       		.sleb128 -28
 1676 0390 0C       		.uleb128 0xc
 1677 0391 10020000 		.4byte	.LASF49
 1678 0395 01       		.byte	0x1
 1679 0396 2A03     		.2byte	0x32a
 1680 0398 8F000000 		.4byte	0x8f
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 46


 1681 039c 02       		.uleb128 0x2
 1682 039d 91       		.byte	0x91
 1683 039e 62       		.sleb128 -30
 1684 039f 0D       		.uleb128 0xd
 1685 03a0 FF000000 		.4byte	.LASF52
 1686 03a4 01       		.byte	0x1
 1687 03a5 2C03     		.2byte	0x32c
 1688 03a7 C1000000 		.4byte	0xc1
 1689 03ab 02       		.uleb128 0x2
 1690 03ac 91       		.byte	0x91
 1691 03ad 68       		.sleb128 -24
 1692 03ae 00       		.byte	0
 1693 03af 0E       		.uleb128 0xe
 1694 03b0 FA020000 		.4byte	.LASF53
 1695 03b4 01       		.byte	0x1
 1696 03b5 5703     		.2byte	0x357
 1697 03b7 A7000000 		.4byte	0xa7
 1698 03bb 00000000 		.4byte	.LFB19
 1699 03bf 80000000 		.4byte	.LFE19-.LFB19
 1700 03c3 01       		.uleb128 0x1
 1701 03c4 9C       		.byte	0x9c
 1702 03c5 F7030000 		.4byte	0x3f7
 1703 03c9 0C       		.uleb128 0xc
 1704 03ca 31030000 		.4byte	.LASF33
 1705 03ce 01       		.byte	0x1
 1706 03cf 5703     		.2byte	0x357
 1707 03d1 83000000 		.4byte	0x83
 1708 03d5 02       		.uleb128 0x2
 1709 03d6 91       		.byte	0x91
 1710 03d7 64       		.sleb128 -28
 1711 03d8 0C       		.uleb128 0xc
 1712 03d9 10020000 		.4byte	.LASF49
 1713 03dd 01       		.byte	0x1
 1714 03de 5703     		.2byte	0x357
 1715 03e0 8F000000 		.4byte	0x8f
 1716 03e4 02       		.uleb128 0x2
 1717 03e5 91       		.byte	0x91
 1718 03e6 62       		.sleb128 -30
 1719 03e7 0D       		.uleb128 0xd
 1720 03e8 82020000 		.4byte	.LASF54
 1721 03ec 01       		.byte	0x1
 1722 03ed 5903     		.2byte	0x359
 1723 03ef A7000000 		.4byte	0xa7
 1724 03f3 02       		.uleb128 0x2
 1725 03f4 91       		.byte	0x91
 1726 03f5 6C       		.sleb128 -20
 1727 03f6 00       		.byte	0
 1728 03f7 11       		.uleb128 0x11
 1729 03f8 83000000 		.4byte	0x83
 1730 03fc 07040000 		.4byte	0x407
 1731 0400 12       		.uleb128 0x12
 1732 0401 E5000000 		.4byte	0xe5
 1733 0405 00       		.byte	0
 1734 0406 00       		.byte	0
 1735 0407 08       		.uleb128 0x8
 1736 0408 0E000000 		.4byte	.LASF55
 1737 040c 01       		.byte	0x1
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 47


 1738 040d 21       		.byte	0x21
 1739 040e 18040000 		.4byte	0x418
 1740 0412 05       		.uleb128 0x5
 1741 0413 03       		.byte	0x3
 1742 0414 00000000 		.4byte	ADC_channelsConfig
 1743 0418 13       		.uleb128 0x13
 1744 0419 F7030000 		.4byte	0x3f7
 1745 041d 14       		.uleb128 0x14
 1746 041e 7A030000 		.4byte	.LASF56
 1747 0422 01       		.byte	0x1
 1748 0423 18       		.byte	0x18
 1749 0424 6B000000 		.4byte	0x6b
 1750 0428 05       		.uleb128 0x5
 1751 0429 03       		.byte	0x3
 1752 042a 00000000 		.4byte	ADC_initVar
 1753 042e 11       		.uleb128 0x11
 1754 042f 8F000000 		.4byte	0x8f
 1755 0433 3E040000 		.4byte	0x43e
 1756 0437 12       		.uleb128 0x12
 1757 0438 E5000000 		.4byte	0xe5
 1758 043c 00       		.byte	0
 1759 043d 00       		.byte	0
 1760 043e 14       		.uleb128 0x14
 1761 043f 50010000 		.4byte	.LASF57
 1762 0443 01       		.byte	0x1
 1763 0444 19       		.byte	0x19
 1764 0445 4F040000 		.4byte	0x44f
 1765 0449 05       		.uleb128 0x5
 1766 044a 03       		.byte	0x3
 1767 044b 00000000 		.4byte	ADC_offset
 1768 044f 05       		.uleb128 0x5
 1769 0450 2E040000 		.4byte	0x42e
 1770 0454 11       		.uleb128 0x11
 1771 0455 9B000000 		.4byte	0x9b
 1772 0459 64040000 		.4byte	0x464
 1773 045d 12       		.uleb128 0x12
 1774 045e E5000000 		.4byte	0xe5
 1775 0462 00       		.byte	0
 1776 0463 00       		.byte	0
 1777 0464 14       		.uleb128 0x14
 1778 0465 4C030000 		.4byte	.LASF58
 1779 0469 01       		.byte	0x1
 1780 046a 1A       		.byte	0x1a
 1781 046b 75040000 		.4byte	0x475
 1782 046f 05       		.uleb128 0x5
 1783 0470 03       		.byte	0x3
 1784 0471 00000000 		.4byte	ADC_countsPer10Volt
 1785 0475 05       		.uleb128 0x5
 1786 0476 54040000 		.4byte	0x454
 1787 047a 00       		.byte	0
 1788              		.section	.debug_abbrev,"",%progbits
 1789              	.Ldebug_abbrev0:
 1790 0000 01       		.uleb128 0x1
 1791 0001 11       		.uleb128 0x11
 1792 0002 01       		.byte	0x1
 1793 0003 25       		.uleb128 0x25
 1794 0004 0E       		.uleb128 0xe
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 48


 1795 0005 13       		.uleb128 0x13
 1796 0006 0B       		.uleb128 0xb
 1797 0007 03       		.uleb128 0x3
 1798 0008 0E       		.uleb128 0xe
 1799 0009 1B       		.uleb128 0x1b
 1800 000a 0E       		.uleb128 0xe
 1801 000b 55       		.uleb128 0x55
 1802 000c 17       		.uleb128 0x17
 1803 000d 11       		.uleb128 0x11
 1804 000e 01       		.uleb128 0x1
 1805 000f 10       		.uleb128 0x10
 1806 0010 17       		.uleb128 0x17
 1807 0011 00       		.byte	0
 1808 0012 00       		.byte	0
 1809 0013 02       		.uleb128 0x2
 1810 0014 24       		.uleb128 0x24
 1811 0015 00       		.byte	0
 1812 0016 0B       		.uleb128 0xb
 1813 0017 0B       		.uleb128 0xb
 1814 0018 3E       		.uleb128 0x3e
 1815 0019 0B       		.uleb128 0xb
 1816 001a 03       		.uleb128 0x3
 1817 001b 0E       		.uleb128 0xe
 1818 001c 00       		.byte	0
 1819 001d 00       		.byte	0
 1820 001e 03       		.uleb128 0x3
 1821 001f 24       		.uleb128 0x24
 1822 0020 00       		.byte	0
 1823 0021 0B       		.uleb128 0xb
 1824 0022 0B       		.uleb128 0xb
 1825 0023 3E       		.uleb128 0x3e
 1826 0024 0B       		.uleb128 0xb
 1827 0025 03       		.uleb128 0x3
 1828 0026 08       		.uleb128 0x8
 1829 0027 00       		.byte	0
 1830 0028 00       		.byte	0
 1831 0029 04       		.uleb128 0x4
 1832 002a 16       		.uleb128 0x16
 1833 002b 00       		.byte	0
 1834 002c 03       		.uleb128 0x3
 1835 002d 0E       		.uleb128 0xe
 1836 002e 3A       		.uleb128 0x3a
 1837 002f 0B       		.uleb128 0xb
 1838 0030 3B       		.uleb128 0x3b
 1839 0031 05       		.uleb128 0x5
 1840 0032 49       		.uleb128 0x49
 1841 0033 13       		.uleb128 0x13
 1842 0034 00       		.byte	0
 1843 0035 00       		.byte	0
 1844 0036 05       		.uleb128 0x5
 1845 0037 35       		.uleb128 0x35
 1846 0038 00       		.byte	0
 1847 0039 49       		.uleb128 0x49
 1848 003a 13       		.uleb128 0x13
 1849 003b 00       		.byte	0
 1850 003c 00       		.byte	0
 1851 003d 06       		.uleb128 0x6
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 49


 1852 003e 2E       		.uleb128 0x2e
 1853 003f 00       		.byte	0
 1854 0040 3F       		.uleb128 0x3f
 1855 0041 19       		.uleb128 0x19
 1856 0042 03       		.uleb128 0x3
 1857 0043 0E       		.uleb128 0xe
 1858 0044 3A       		.uleb128 0x3a
 1859 0045 0B       		.uleb128 0xb
 1860 0046 3B       		.uleb128 0x3b
 1861 0047 0B       		.uleb128 0xb
 1862 0048 27       		.uleb128 0x27
 1863 0049 19       		.uleb128 0x19
 1864 004a 11       		.uleb128 0x11
 1865 004b 01       		.uleb128 0x1
 1866 004c 12       		.uleb128 0x12
 1867 004d 06       		.uleb128 0x6
 1868 004e 40       		.uleb128 0x40
 1869 004f 18       		.uleb128 0x18
 1870 0050 9642     		.uleb128 0x2116
 1871 0052 19       		.uleb128 0x19
 1872 0053 00       		.byte	0
 1873 0054 00       		.byte	0
 1874 0055 07       		.uleb128 0x7
 1875 0056 2E       		.uleb128 0x2e
 1876 0057 01       		.byte	0x1
 1877 0058 3F       		.uleb128 0x3f
 1878 0059 19       		.uleb128 0x19
 1879 005a 03       		.uleb128 0x3
 1880 005b 0E       		.uleb128 0xe
 1881 005c 3A       		.uleb128 0x3a
 1882 005d 0B       		.uleb128 0xb
 1883 005e 3B       		.uleb128 0x3b
 1884 005f 0B       		.uleb128 0xb
 1885 0060 27       		.uleb128 0x27
 1886 0061 19       		.uleb128 0x19
 1887 0062 11       		.uleb128 0x11
 1888 0063 01       		.uleb128 0x1
 1889 0064 12       		.uleb128 0x12
 1890 0065 06       		.uleb128 0x6
 1891 0066 40       		.uleb128 0x40
 1892 0067 18       		.uleb128 0x18
 1893 0068 9642     		.uleb128 0x2116
 1894 006a 19       		.uleb128 0x19
 1895 006b 01       		.uleb128 0x1
 1896 006c 13       		.uleb128 0x13
 1897 006d 00       		.byte	0
 1898 006e 00       		.byte	0
 1899 006f 08       		.uleb128 0x8
 1900 0070 34       		.uleb128 0x34
 1901 0071 00       		.byte	0
 1902 0072 03       		.uleb128 0x3
 1903 0073 0E       		.uleb128 0xe
 1904 0074 3A       		.uleb128 0x3a
 1905 0075 0B       		.uleb128 0xb
 1906 0076 3B       		.uleb128 0x3b
 1907 0077 0B       		.uleb128 0xb
 1908 0078 49       		.uleb128 0x49
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 50


 1909 0079 13       		.uleb128 0x13
 1910 007a 02       		.uleb128 0x2
 1911 007b 18       		.uleb128 0x18
 1912 007c 00       		.byte	0
 1913 007d 00       		.byte	0
 1914 007e 09       		.uleb128 0x9
 1915 007f 2E       		.uleb128 0x2e
 1916 0080 00       		.byte	0
 1917 0081 3F       		.uleb128 0x3f
 1918 0082 19       		.uleb128 0x19
 1919 0083 03       		.uleb128 0x3
 1920 0084 0E       		.uleb128 0xe
 1921 0085 3A       		.uleb128 0x3a
 1922 0086 0B       		.uleb128 0xb
 1923 0087 3B       		.uleb128 0x3b
 1924 0088 05       		.uleb128 0x5
 1925 0089 27       		.uleb128 0x27
 1926 008a 19       		.uleb128 0x19
 1927 008b 11       		.uleb128 0x11
 1928 008c 01       		.uleb128 0x1
 1929 008d 12       		.uleb128 0x12
 1930 008e 06       		.uleb128 0x6
 1931 008f 40       		.uleb128 0x40
 1932 0090 18       		.uleb128 0x18
 1933 0091 9642     		.uleb128 0x2116
 1934 0093 19       		.uleb128 0x19
 1935 0094 00       		.byte	0
 1936 0095 00       		.byte	0
 1937 0096 0A       		.uleb128 0xa
 1938 0097 2E       		.uleb128 0x2e
 1939 0098 00       		.byte	0
 1940 0099 3F       		.uleb128 0x3f
 1941 009a 19       		.uleb128 0x19
 1942 009b 03       		.uleb128 0x3
 1943 009c 0E       		.uleb128 0xe
 1944 009d 3A       		.uleb128 0x3a
 1945 009e 0B       		.uleb128 0xb
 1946 009f 3B       		.uleb128 0x3b
 1947 00a0 05       		.uleb128 0x5
 1948 00a1 27       		.uleb128 0x27
 1949 00a2 19       		.uleb128 0x19
 1950 00a3 11       		.uleb128 0x11
 1951 00a4 01       		.uleb128 0x1
 1952 00a5 12       		.uleb128 0x12
 1953 00a6 06       		.uleb128 0x6
 1954 00a7 40       		.uleb128 0x40
 1955 00a8 18       		.uleb128 0x18
 1956 00a9 9742     		.uleb128 0x2117
 1957 00ab 19       		.uleb128 0x19
 1958 00ac 00       		.byte	0
 1959 00ad 00       		.byte	0
 1960 00ae 0B       		.uleb128 0xb
 1961 00af 2E       		.uleb128 0x2e
 1962 00b0 01       		.byte	0x1
 1963 00b1 3F       		.uleb128 0x3f
 1964 00b2 19       		.uleb128 0x19
 1965 00b3 03       		.uleb128 0x3
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 51


 1966 00b4 0E       		.uleb128 0xe
 1967 00b5 3A       		.uleb128 0x3a
 1968 00b6 0B       		.uleb128 0xb
 1969 00b7 3B       		.uleb128 0x3b
 1970 00b8 05       		.uleb128 0x5
 1971 00b9 27       		.uleb128 0x27
 1972 00ba 19       		.uleb128 0x19
 1973 00bb 49       		.uleb128 0x49
 1974 00bc 13       		.uleb128 0x13
 1975 00bd 11       		.uleb128 0x11
 1976 00be 01       		.uleb128 0x1
 1977 00bf 12       		.uleb128 0x12
 1978 00c0 06       		.uleb128 0x6
 1979 00c1 40       		.uleb128 0x40
 1980 00c2 18       		.uleb128 0x18
 1981 00c3 9742     		.uleb128 0x2117
 1982 00c5 19       		.uleb128 0x19
 1983 00c6 01       		.uleb128 0x1
 1984 00c7 13       		.uleb128 0x13
 1985 00c8 00       		.byte	0
 1986 00c9 00       		.byte	0
 1987 00ca 0C       		.uleb128 0xc
 1988 00cb 05       		.uleb128 0x5
 1989 00cc 00       		.byte	0
 1990 00cd 03       		.uleb128 0x3
 1991 00ce 0E       		.uleb128 0xe
 1992 00cf 3A       		.uleb128 0x3a
 1993 00d0 0B       		.uleb128 0xb
 1994 00d1 3B       		.uleb128 0x3b
 1995 00d2 05       		.uleb128 0x5
 1996 00d3 49       		.uleb128 0x49
 1997 00d4 13       		.uleb128 0x13
 1998 00d5 02       		.uleb128 0x2
 1999 00d6 18       		.uleb128 0x18
 2000 00d7 00       		.byte	0
 2001 00d8 00       		.byte	0
 2002 00d9 0D       		.uleb128 0xd
 2003 00da 34       		.uleb128 0x34
 2004 00db 00       		.byte	0
 2005 00dc 03       		.uleb128 0x3
 2006 00dd 0E       		.uleb128 0xe
 2007 00de 3A       		.uleb128 0x3a
 2008 00df 0B       		.uleb128 0xb
 2009 00e0 3B       		.uleb128 0x3b
 2010 00e1 05       		.uleb128 0x5
 2011 00e2 49       		.uleb128 0x49
 2012 00e3 13       		.uleb128 0x13
 2013 00e4 02       		.uleb128 0x2
 2014 00e5 18       		.uleb128 0x18
 2015 00e6 00       		.byte	0
 2016 00e7 00       		.byte	0
 2017 00e8 0E       		.uleb128 0xe
 2018 00e9 2E       		.uleb128 0x2e
 2019 00ea 01       		.byte	0x1
 2020 00eb 3F       		.uleb128 0x3f
 2021 00ec 19       		.uleb128 0x19
 2022 00ed 03       		.uleb128 0x3
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 52


 2023 00ee 0E       		.uleb128 0xe
 2024 00ef 3A       		.uleb128 0x3a
 2025 00f0 0B       		.uleb128 0xb
 2026 00f1 3B       		.uleb128 0x3b
 2027 00f2 05       		.uleb128 0x5
 2028 00f3 27       		.uleb128 0x27
 2029 00f4 19       		.uleb128 0x19
 2030 00f5 49       		.uleb128 0x49
 2031 00f6 13       		.uleb128 0x13
 2032 00f7 11       		.uleb128 0x11
 2033 00f8 01       		.uleb128 0x1
 2034 00f9 12       		.uleb128 0x12
 2035 00fa 06       		.uleb128 0x6
 2036 00fb 40       		.uleb128 0x40
 2037 00fc 18       		.uleb128 0x18
 2038 00fd 9642     		.uleb128 0x2116
 2039 00ff 19       		.uleb128 0x19
 2040 0100 01       		.uleb128 0x1
 2041 0101 13       		.uleb128 0x13
 2042 0102 00       		.byte	0
 2043 0103 00       		.byte	0
 2044 0104 0F       		.uleb128 0xf
 2045 0105 2E       		.uleb128 0x2e
 2046 0106 01       		.byte	0x1
 2047 0107 3F       		.uleb128 0x3f
 2048 0108 19       		.uleb128 0x19
 2049 0109 03       		.uleb128 0x3
 2050 010a 0E       		.uleb128 0xe
 2051 010b 3A       		.uleb128 0x3a
 2052 010c 0B       		.uleb128 0xb
 2053 010d 3B       		.uleb128 0x3b
 2054 010e 05       		.uleb128 0x5
 2055 010f 27       		.uleb128 0x27
 2056 0110 19       		.uleb128 0x19
 2057 0111 11       		.uleb128 0x11
 2058 0112 01       		.uleb128 0x1
 2059 0113 12       		.uleb128 0x12
 2060 0114 06       		.uleb128 0x6
 2061 0115 40       		.uleb128 0x40
 2062 0116 18       		.uleb128 0x18
 2063 0117 9742     		.uleb128 0x2117
 2064 0119 19       		.uleb128 0x19
 2065 011a 01       		.uleb128 0x1
 2066 011b 13       		.uleb128 0x13
 2067 011c 00       		.byte	0
 2068 011d 00       		.byte	0
 2069 011e 10       		.uleb128 0x10
 2070 011f 2E       		.uleb128 0x2e
 2071 0120 01       		.byte	0x1
 2072 0121 3F       		.uleb128 0x3f
 2073 0122 19       		.uleb128 0x19
 2074 0123 03       		.uleb128 0x3
 2075 0124 0E       		.uleb128 0xe
 2076 0125 3A       		.uleb128 0x3a
 2077 0126 0B       		.uleb128 0xb
 2078 0127 3B       		.uleb128 0x3b
 2079 0128 05       		.uleb128 0x5
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 53


 2080 0129 27       		.uleb128 0x27
 2081 012a 19       		.uleb128 0x19
 2082 012b 11       		.uleb128 0x11
 2083 012c 01       		.uleb128 0x1
 2084 012d 12       		.uleb128 0x12
 2085 012e 06       		.uleb128 0x6
 2086 012f 40       		.uleb128 0x40
 2087 0130 18       		.uleb128 0x18
 2088 0131 9642     		.uleb128 0x2116
 2089 0133 19       		.uleb128 0x19
 2090 0134 01       		.uleb128 0x1
 2091 0135 13       		.uleb128 0x13
 2092 0136 00       		.byte	0
 2093 0137 00       		.byte	0
 2094 0138 11       		.uleb128 0x11
 2095 0139 01       		.uleb128 0x1
 2096 013a 01       		.byte	0x1
 2097 013b 49       		.uleb128 0x49
 2098 013c 13       		.uleb128 0x13
 2099 013d 01       		.uleb128 0x1
 2100 013e 13       		.uleb128 0x13
 2101 013f 00       		.byte	0
 2102 0140 00       		.byte	0
 2103 0141 12       		.uleb128 0x12
 2104 0142 21       		.uleb128 0x21
 2105 0143 00       		.byte	0
 2106 0144 49       		.uleb128 0x49
 2107 0145 13       		.uleb128 0x13
 2108 0146 2F       		.uleb128 0x2f
 2109 0147 0B       		.uleb128 0xb
 2110 0148 00       		.byte	0
 2111 0149 00       		.byte	0
 2112 014a 13       		.uleb128 0x13
 2113 014b 26       		.uleb128 0x26
 2114 014c 00       		.byte	0
 2115 014d 49       		.uleb128 0x49
 2116 014e 13       		.uleb128 0x13
 2117 014f 00       		.byte	0
 2118 0150 00       		.byte	0
 2119 0151 14       		.uleb128 0x14
 2120 0152 34       		.uleb128 0x34
 2121 0153 00       		.byte	0
 2122 0154 03       		.uleb128 0x3
 2123 0155 0E       		.uleb128 0xe
 2124 0156 3A       		.uleb128 0x3a
 2125 0157 0B       		.uleb128 0xb
 2126 0158 3B       		.uleb128 0x3b
 2127 0159 0B       		.uleb128 0xb
 2128 015a 49       		.uleb128 0x49
 2129 015b 13       		.uleb128 0x13
 2130 015c 3F       		.uleb128 0x3f
 2131 015d 19       		.uleb128 0x19
 2132 015e 02       		.uleb128 0x2
 2133 015f 18       		.uleb128 0x18
 2134 0160 00       		.byte	0
 2135 0161 00       		.byte	0
 2136 0162 00       		.byte	0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 54


 2137              		.section	.debug_aranges,"",%progbits
 2138 0000 A4000000 		.4byte	0xa4
 2139 0004 0200     		.2byte	0x2
 2140 0006 00000000 		.4byte	.Ldebug_info0
 2141 000a 04       		.byte	0x4
 2142 000b 00       		.byte	0
 2143 000c 0000     		.2byte	0
 2144 000e 0000     		.2byte	0
 2145 0010 00000000 		.4byte	.LFB2
 2146 0014 24000000 		.4byte	.LFE2-.LFB2
 2147 0018 00000000 		.4byte	.LFB3
 2148 001c D0010000 		.4byte	.LFE3-.LFB3
 2149 0020 00000000 		.4byte	.LFB4
 2150 0024 38000000 		.4byte	.LFE4-.LFB4
 2151 0028 00000000 		.4byte	.LFB5
 2152 002c 18000000 		.4byte	.LFE5-.LFB5
 2153 0030 00000000 		.4byte	.LFB6
 2154 0034 1C000000 		.4byte	.LFE6-.LFB6
 2155 0038 00000000 		.4byte	.LFB7
 2156 003c 1C000000 		.4byte	.LFE7-.LFB7
 2157 0040 00000000 		.4byte	.LFB8
 2158 0044 48000000 		.4byte	.LFE8-.LFB8
 2159 0048 00000000 		.4byte	.LFB9
 2160 004c 44000000 		.4byte	.LFE9-.LFB9
 2161 0050 00000000 		.4byte	.LFB10
 2162 0054 1C000000 		.4byte	.LFE10-.LFB10
 2163 0058 00000000 		.4byte	.LFB11
 2164 005c 30000000 		.4byte	.LFE11-.LFB11
 2165 0060 00000000 		.4byte	.LFB12
 2166 0064 2C000000 		.4byte	.LFE12-.LFB12
 2167 0068 00000000 		.4byte	.LFB13
 2168 006c 1C000000 		.4byte	.LFE13-.LFB13
 2169 0070 00000000 		.4byte	.LFB14
 2170 0074 1C000000 		.4byte	.LFE14-.LFB14
 2171 0078 00000000 		.4byte	.LFB15
 2172 007c 30000000 		.4byte	.LFE15-.LFB15
 2173 0080 00000000 		.4byte	.LFB16
 2174 0084 2C000000 		.4byte	.LFE16-.LFB16
 2175 0088 00000000 		.4byte	.LFB17
 2176 008c A4000000 		.4byte	.LFE17-.LFB17
 2177 0090 00000000 		.4byte	.LFB18
 2178 0094 90000000 		.4byte	.LFE18-.LFB18
 2179 0098 00000000 		.4byte	.LFB19
 2180 009c 80000000 		.4byte	.LFE19-.LFB19
 2181 00a0 00000000 		.4byte	0
 2182 00a4 00000000 		.4byte	0
 2183              		.section	.debug_ranges,"",%progbits
 2184              	.Ldebug_ranges0:
 2185 0000 00000000 		.4byte	.LFB2
 2186 0004 24000000 		.4byte	.LFE2
 2187 0008 00000000 		.4byte	.LFB3
 2188 000c D0010000 		.4byte	.LFE3
 2189 0010 00000000 		.4byte	.LFB4
 2190 0014 38000000 		.4byte	.LFE4
 2191 0018 00000000 		.4byte	.LFB5
 2192 001c 18000000 		.4byte	.LFE5
 2193 0020 00000000 		.4byte	.LFB6
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 55


 2194 0024 1C000000 		.4byte	.LFE6
 2195 0028 00000000 		.4byte	.LFB7
 2196 002c 1C000000 		.4byte	.LFE7
 2197 0030 00000000 		.4byte	.LFB8
 2198 0034 48000000 		.4byte	.LFE8
 2199 0038 00000000 		.4byte	.LFB9
 2200 003c 44000000 		.4byte	.LFE9
 2201 0040 00000000 		.4byte	.LFB10
 2202 0044 1C000000 		.4byte	.LFE10
 2203 0048 00000000 		.4byte	.LFB11
 2204 004c 30000000 		.4byte	.LFE11
 2205 0050 00000000 		.4byte	.LFB12
 2206 0054 2C000000 		.4byte	.LFE12
 2207 0058 00000000 		.4byte	.LFB13
 2208 005c 1C000000 		.4byte	.LFE13
 2209 0060 00000000 		.4byte	.LFB14
 2210 0064 1C000000 		.4byte	.LFE14
 2211 0068 00000000 		.4byte	.LFB15
 2212 006c 30000000 		.4byte	.LFE15
 2213 0070 00000000 		.4byte	.LFB16
 2214 0074 2C000000 		.4byte	.LFE16
 2215 0078 00000000 		.4byte	.LFB17
 2216 007c A4000000 		.4byte	.LFE17
 2217 0080 00000000 		.4byte	.LFB18
 2218 0084 90000000 		.4byte	.LFE18
 2219 0088 00000000 		.4byte	.LFB19
 2220 008c 80000000 		.4byte	.LFE19
 2221 0090 00000000 		.4byte	0
 2222 0094 00000000 		.4byte	0
 2223              		.section	.debug_line,"",%progbits
 2224              	.Ldebug_line0:
 2225 0000 9A020000 		.section	.debug_str,"MS",%progbits,1
 2225      02004200 
 2225      00000201 
 2225      FB0E0D00 
 2225      01010101 
 2226              	.LASF6:
 2227 0000 6C6F6E67 		.ascii	"long long int\000"
 2227      206C6F6E 
 2227      6720696E 
 2227      7400
 2228              	.LASF55:
 2229 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2229      6368616E 
 2229      6E656C73 
 2229      436F6E66 
 2229      696700
 2230              	.LASF19:
 2231 0021 72656733 		.ascii	"reg32\000"
 2231      3200
 2232              	.LASF59:
 2233 0027 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2233      4320342E 
 2233      392E3320 
 2233      32303135 
 2233      30333033 
 2234 005a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 56


 2234      20726576 
 2234      6973696F 
 2234      6E203232 
 2234      31323230 
 2235 008d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2235      66756E63 
 2235      74696F6E 
 2235      2D736563 
 2235      74696F6E 
 2236              	.LASF60:
 2237 00b5 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2237      6E657261 
 2237      7465645F 
 2237      536F7572 
 2237      63655C50 
 2238              	.LASF45:
 2239 00d4 6F666673 		.ascii	"offset\000"
 2239      657400
 2240              	.LASF15:
 2241 00db 666C6F61 		.ascii	"float\000"
 2241      7400
 2242              	.LASF41:
 2243 00e1 68696768 		.ascii	"highLimit\000"
 2243      4C696D69 
 2243      7400
 2244              	.LASF48:
 2245 00eb 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2245      436F756E 
 2245      7473546F 
 2245      5F6D566F 
 2245      6C747300 
 2246              	.LASF52:
 2247 00ff 75566F6C 		.ascii	"uVolts\000"
 2247      747300
 2248              	.LASF3:
 2249 0106 73686F72 		.ascii	"short unsigned int\000"
 2249      7420756E 
 2249      7369676E 
 2249      65642069 
 2249      6E7400
 2250              	.LASF2:
 2251 0119 73686F72 		.ascii	"short int\000"
 2251      7420696E 
 2251      7400
 2252              	.LASF44:
 2253 0123 4144435F 		.ascii	"ADC_SetOffset\000"
 2253      5365744F 
 2253      66667365 
 2253      7400
 2254              	.LASF38:
 2255 0131 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2255      5365744C 
 2255      6F774C69 
 2255      6D697400 
 2256              	.LASF29:
 2257 0141 73746174 		.ascii	"status\000"
 2257      757300
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 57


 2258              	.LASF14:
 2259 0148 666C6F61 		.ascii	"float32\000"
 2259      74333200 
 2260              	.LASF57:
 2261 0150 4144435F 		.ascii	"ADC_offset\000"
 2261      6F666673 
 2261      657400
 2262              	.LASF22:
 2263 015b 746D7052 		.ascii	"tmpRegVal\000"
 2263      65675661 
 2263      6C00
 2264              	.LASF46:
 2265 0165 4144435F 		.ascii	"ADC_SetGain\000"
 2265      53657447 
 2265      61696E00 
 2266              	.LASF1:
 2267 0171 756E7369 		.ascii	"unsigned char\000"
 2267      676E6564 
 2267      20636861 
 2267      7200
 2268              	.LASF40:
 2269 017f 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2269      53657448 
 2269      6967684C 
 2269      696D6974 
 2269      00
 2270              	.LASF12:
 2271 0190 696E7431 		.ascii	"int16\000"
 2271      3600
 2272              	.LASF5:
 2273 0196 6C6F6E67 		.ascii	"long unsigned int\000"
 2273      20756E73 
 2273      69676E65 
 2273      6420696E 
 2273      7400
 2274              	.LASF13:
 2275 01a8 696E7433 		.ascii	"int32\000"
 2275      3200
 2276              	.LASF31:
 2277 01ae 4144435F 		.ascii	"ADC_GetResult16\000"
 2277      47657452 
 2277      6573756C 
 2277      74313600 
 2278              	.LASF36:
 2279 01be 4144435F 		.ascii	"ADC_SetChanMask\000"
 2279      53657443 
 2279      68616E4D 
 2279      61736B00 
 2280              	.LASF43:
 2281 01ce 4144435F 		.ascii	"ADC_SetSatMask\000"
 2281      53657453 
 2281      61744D61 
 2281      736B00
 2282              	.LASF30:
 2283 01dd 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2283      4973456E 
 2283      64436F6E 
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 58


 2283      76657273 
 2283      696F6E00 
 2284              	.LASF16:
 2285 01f1 646F7562 		.ascii	"double\000"
 2285      6C6500
 2286              	.LASF39:
 2287 01f8 6C6F774C 		.ascii	"lowLimit\000"
 2287      696D6974 
 2287      00
 2288              	.LASF47:
 2289 0201 61646347 		.ascii	"adcGain\000"
 2289      61696E00 
 2290              	.LASF10:
 2291 0209 75696E74 		.ascii	"uint16\000"
 2291      313600
 2292              	.LASF49:
 2293 0210 61646343 		.ascii	"adcCounts\000"
 2293      6F756E74 
 2293      7300
 2294              	.LASF11:
 2295 021a 75696E74 		.ascii	"uint32\000"
 2295      333200
 2296              	.LASF42:
 2297 0221 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2297      5365744C 
 2297      696D6974 
 2297      4D61736B 
 2297      00
 2298              	.LASF8:
 2299 0232 756E7369 		.ascii	"unsigned int\000"
 2299      676E6564 
 2299      20696E74 
 2299      00
 2300              	.LASF25:
 2301 023f 4144435F 		.ascii	"ADC_Enable\000"
 2301      456E6162 
 2301      6C6500
 2302              	.LASF23:
 2303 024a 636F756E 		.ascii	"counts\000"
 2303      747300
 2304              	.LASF7:
 2305 0251 6C6F6E67 		.ascii	"long long unsigned int\000"
 2305      206C6F6E 
 2305      6720756E 
 2305      7369676E 
 2305      65642069 
 2306              	.LASF34:
 2307 0268 72657375 		.ascii	"result\000"
 2307      6C7400
 2308              	.LASF24:
 2309 026f 4144435F 		.ascii	"ADC_Start\000"
 2309      53746172 
 2309      7400
 2310              	.LASF35:
 2311 0279 4144435F 		.ascii	"ADC_Init\000"
 2311      496E6974 
 2311      00
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 59


 2312              	.LASF54:
 2313 0282 766F6C74 		.ascii	"volts\000"
 2313      7300
 2314              	.LASF61:
 2315 0288 433A5C55 		.ascii	"C:\\Users\\Linette Helena\\Desktop\\Det pisse meget"
 2315      73657273 
 2315      5C4C696E 
 2315      65747465 
 2315      2048656C 
 2316 02b7 20726967 		.ascii	" rigtigt!\\ADC_med_filtre.cydsn\000"
 2316      74696774 
 2316      215C4144 
 2316      435F6D65 
 2316      645F6669 
 2317              	.LASF50:
 2318 02d6 6D566F6C 		.ascii	"mVolts\000"
 2318      747300
 2319              	.LASF20:
 2320 02dd 73697A65 		.ascii	"sizetype\000"
 2320      74797065 
 2320      00
 2321              	.LASF51:
 2322 02e6 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2322      436F756E 
 2322      7473546F 
 2322      5F75566F 
 2322      6C747300 
 2323              	.LASF53:
 2324 02fa 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2324      436F756E 
 2324      7473546F 
 2324      5F566F6C 
 2324      747300
 2325              	.LASF27:
 2326 030d 4144435F 		.ascii	"ADC_StartConvert\000"
 2326      53746172 
 2326      74436F6E 
 2326      76657274 
 2326      00
 2327              	.LASF37:
 2328 031e 6D61736B 		.ascii	"mask\000"
 2328      00
 2329              	.LASF21:
 2330 0323 63684E75 		.ascii	"chNum\000"
 2330      6D00
 2331              	.LASF32:
 2332 0329 7265744D 		.ascii	"retMode\000"
 2332      6F646500 
 2333              	.LASF33:
 2334 0331 6368616E 		.ascii	"chan\000"
 2334      00
 2335              	.LASF28:
 2336 0336 4144435F 		.ascii	"ADC_StopConvert\000"
 2336      53746F70 
 2336      436F6E76 
 2336      65727400 
 2337              	.LASF9:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccXVkUAn.s 			page 60


 2338 0346 75696E74 		.ascii	"uint8\000"
 2338      3800
 2339              	.LASF58:
 2340 034c 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2340      636F756E 
 2340      74735065 
 2340      72313056 
 2340      6F6C7400 
 2341              	.LASF4:
 2342 0360 6C6F6E67 		.ascii	"long int\000"
 2342      20696E74 
 2342      00
 2343              	.LASF18:
 2344 0369 63686172 		.ascii	"char\000"
 2344      00
 2345              	.LASF0:
 2346 036e 7369676E 		.ascii	"signed char\000"
 2346      65642063 
 2346      68617200 
 2347              	.LASF56:
 2348 037a 4144435F 		.ascii	"ADC_initVar\000"
 2348      696E6974 
 2348      56617200 
 2349              	.LASF17:
 2350 0386 696E7436 		.ascii	"int64\000"
 2350      3400
 2351              	.LASF26:
 2352 038c 4144435F 		.ascii	"ADC_Stop\000"
 2352      53746F70 
 2352      00
 2353              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
