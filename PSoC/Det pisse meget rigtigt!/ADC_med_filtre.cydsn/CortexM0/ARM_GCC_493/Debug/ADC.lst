ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB2:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE2:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.global	__aeabi_idiv
  75              		.section	.text.ADC_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_Init, %function
  81              	ADC_Init:
  82              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 4


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 80B5     		push	{r7, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 84B0     		sub	sp, sp, #16
  90              		.cfi_def_cfa_offset 24
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC.c ****         };
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 172 0
  94 0006 0F20     		mov	r0, #15
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 173 0
  98 000e 624B     		ldr	r3, .L16
  99 0010 0F20     		mov	r0, #15
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC.c **** 
 176:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 177 0
 103 0018 604B     		ldr	r3, .L16+4
 104 001a 0322     		mov	r2, #3
 105 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 179:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 6


 106              		.loc 1 180 0
 107 001e 604B     		ldr	r3, .L16+8
 108 0020 1B68     		ldr	r3, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 109              		.loc 1 178 0
 110 0022 002B     		cmp	r3, #0
 111 0024 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 112              		.loc 1 178 0 is_stmt 0 discriminator 1
 113 0026 5F49     		ldr	r1, .L16+12
 114 0028 00E0     		b	.L7
 115              	.L6:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 178 0 discriminator 2
 117 002a 5F49     		ldr	r1, .L16+16
 118              	.L7:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 119              		.loc 1 178 0 discriminator 4
 120 002c 5F4B     		ldr	r3, .L16+20
 121 002e 5F4A     		ldr	r2, .L16+20
 122 0030 1268     		ldr	r2, [r2]
 123 0032 0A43     		orr	r2, r1
 124 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 125              		.loc 1 182 0 is_stmt 1 discriminator 4
 126 0036 5E4B     		ldr	r3, .L16+24
 127 0038 5E4A     		ldr	r2, .L16+28
 128 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 129              		.loc 1 183 0 discriminator 4
 130 003c 5E4B     		ldr	r3, .L16+32
 131 003e 5F4A     		ldr	r2, .L16+36
 132 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 133              		.loc 1 184 0 discriminator 4
 134 0042 5F4B     		ldr	r3, .L16+40
 135 0044 0022     		mov	r2, #0
 136 0046 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 137              		.loc 1 185 0 discriminator 4
 138 0048 5E4B     		ldr	r3, .L16+44
 139 004a 5F4A     		ldr	r2, .L16+48
 140 004c 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 141              		.loc 1 186 0 discriminator 4
 142 004e 5F4B     		ldr	r3, .L16+52
 143 0050 5F4A     		ldr	r2, .L16+56
 144 0052 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     
 188:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 145              		.loc 1 190 0 discriminator 4
 146 0054 5F4B     		ldr	r3, .L16+60
 147 0056 5F4A     		ldr	r2, .L16+60
 148 0058 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 7


 149 005a 8021     		mov	r1, #128
 150 005c 4902     		lsl	r1, r1, #9
 151 005e 0A43     		orr	r2, r1
 152 0060 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 153              		.loc 1 193 0 discriminator 4
 154 0062 5D4B     		ldr	r3, .L16+64
 155 0064 5C4A     		ldr	r2, .L16+64
 156 0066 1268     		ldr	r2, [r2]
 157 0068 8021     		mov	r1, #128
 158 006a 4902     		lsl	r1, r1, #9
 159 006c 0A43     		orr	r2, r1
 160 006e 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 161              		.loc 1 197 0 discriminator 4
 162 0070 5A4B     		ldr	r3, .L16+68
 163 0072 0022     		mov	r2, #0
 164 0074 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 165              		.loc 1 198 0 discriminator 4
 166 0076 5A4B     		ldr	r3, .L16+72
 167 0078 0022     		mov	r2, #0
 168 007a 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 169              		.loc 1 199 0 discriminator 4
 170 007c 594B     		ldr	r3, .L16+76
 171 007e 0122     		mov	r2, #1
 172 0080 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c **** 
 201:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 203:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC.c **** 
 205:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 173              		.loc 1 206 0 discriminator 4
 174 0082 594B     		ldr	r3, .L16+80
 175 0084 1B68     		ldr	r3, [r3]
 176 0086 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 177              		.loc 1 207 0 discriminator 4
 178 0088 7B68     		ldr	r3, [r7, #4]
 179 008a 584A     		ldr	r2, .L16+84
 180 008c 1340     		and	r3, r2
 181 008e 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     
 209:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 214:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 8


 215:.\Generated_Source\PSoC4/ADC.c ****     #else
 216:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC.c ****         #else
 220:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 182              		.loc 1 220 0 discriminator 4
 183 0090 7B68     		ldr	r3, [r7, #4]
 184 0092 8022     		mov	r2, #128
 185 0094 9205     		lsl	r2, r2, #22
 186 0096 1343     		orr	r3, r2
 187 0098 7B60     		str	r3, [r7, #4]
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 188              		.loc 1 221 0 discriminator 4
 189 009a 7B68     		ldr	r3, [r7, #4]
 190 009c 0122     		mov	r2, #1
 191 009e 9343     		bic	r3, r2
 192 00a0 7B60     		str	r3, [r7, #4]
 222:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC.c ****     
 226:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 193              		.loc 1 226 0 discriminator 4
 194 00a2 514B     		ldr	r3, .L16+80
 195 00a4 7A68     		ldr	r2, [r7, #4]
 196 00a6 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC.c **** 
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 197              		.loc 1 232 0 discriminator 4
 198 00a8 0023     		mov	r3, #0
 199 00aa FB60     		str	r3, [r7, #12]
 200 00ac 6EE0     		b	.L8
 201              	.L15:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 234:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 202              		.loc 1 234 0
 203 00ae 504B     		ldr	r3, .L16+88
 204 00b0 FA68     		ldr	r2, [r7, #12]
 205 00b2 9200     		lsl	r2, r2, #2
 206 00b4 D258     		ldr	r2, [r2, r3]
 207 00b6 DC23     		mov	r3, #220
 208 00b8 9B01     		lsl	r3, r3, #6
 209 00ba 1340     		and	r3, r2
 210 00bc 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 211              		.loc 1 236 0
 212 00be 4D4A     		ldr	r2, .L16+92
 213 00c0 FB68     		ldr	r3, [r7, #12]
 214 00c2 D318     		add	r3, r2, r3
 215 00c4 1B78     		ldrb	r3, [r3]
 216 00c6 1A1C     		mov	r2, r3
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 9


 217 00c8 7B68     		ldr	r3, [r7, #4]
 218 00ca 1343     		orr	r3, r2
 219 00cc 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC.c ****         
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC.c ****         */
 244:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC.c **** 
 249:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 220              		.loc 1 253 0
 221 00ce FB68     		ldr	r3, [r7, #12]
 222 00d0 9B00     		lsl	r3, r3, #2
 223 00d2 494A     		ldr	r2, .L16+96
 224 00d4 9446     		mov	ip, r2
 225 00d6 6344     		add	r3, r3, ip
 226 00d8 7A68     		ldr	r2, [r7, #4]
 227 00da 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC.c **** 
 255:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 228              		.loc 1 255 0
 229 00dc 444B     		ldr	r3, .L16+88
 230 00de FA68     		ldr	r2, [r7, #12]
 231 00e0 9200     		lsl	r2, r2, #2
 232 00e2 D358     		ldr	r3, [r2, r3]
 233 00e4 0122     		mov	r2, #1
 234 00e6 1340     		and	r3, r2
 235 00e8 09D0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC.c ****             {
 257:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 236              		.loc 1 257 0
 237 00ea 3C4B     		ldr	r3, .L16+68
 238 00ec 3B4A     		ldr	r2, .L16+68
 239 00ee 1268     		ldr	r2, [r2]
 240 00f0 F968     		ldr	r1, [r7, #12]
 241 00f2 0120     		mov	r0, #1
 242 00f4 8840     		lsl	r0, r0, r1
 243 00f6 011C     		mov	r1, r0
 244 00f8 89B2     		uxth	r1, r1
 245 00fa 0A43     		orr	r2, r1
 246 00fc 1A60     		str	r2, [r3]
 247              	.L9:
 258:.\Generated_Source\PSoC4/ADC.c ****             }
 259:.\Generated_Source\PSoC4/ADC.c **** 
 260:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 248              		.loc 1 260 0
 249 00fe 3C4B     		ldr	r3, .L16+88
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 10


 250 0100 FA68     		ldr	r2, [r7, #12]
 251 0102 9200     		lsl	r2, r2, #2
 252 0104 D358     		ldr	r3, [r2, r3]
 253 0106 0222     		mov	r2, #2
 254 0108 1340     		and	r3, r2
 255 010a 09D0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC.c ****             {
 262:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 256              		.loc 1 262 0
 257 010c 344B     		ldr	r3, .L16+72
 258 010e 344A     		ldr	r2, .L16+72
 259 0110 1268     		ldr	r2, [r2]
 260 0112 F968     		ldr	r1, [r7, #12]
 261 0114 0120     		mov	r0, #1
 262 0116 8840     		lsl	r0, r0, r1
 263 0118 011C     		mov	r1, r0
 264 011a 89B2     		uxth	r1, r1
 265 011c 0A43     		orr	r2, r1
 266 011e 1A60     		str	r2, [r3]
 267              	.L10:
 263:.\Generated_Source\PSoC4/ADC.c ****             }
 264:.\Generated_Source\PSoC4/ADC.c ****         }
 265:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC.c ****             else
 267:.\Generated_Source\PSoC4/ADC.c ****             {
 268:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:.\Generated_Source\PSoC4/ADC.c **** 
 270:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC.c ****                 {
 272:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC.c ****                 }
 274:.\Generated_Source\PSoC4/ADC.c **** 
 275:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:.\Generated_Source\PSoC4/ADC.c ****                 {
 277:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC.c ****                 }
 279:.\Generated_Source\PSoC4/ADC.c ****             }
 280:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC.c **** 
 282:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 268              		.loc 1 282 0
 269 0120 334B     		ldr	r3, .L16+88
 270 0122 FA68     		ldr	r2, [r7, #12]
 271 0124 9200     		lsl	r2, r2, #2
 272 0126 D258     		ldr	r2, [r2, r3]
 273 0128 8023     		mov	r3, #128
 274 012a 9B00     		lsl	r3, r3, #2
 275 012c 1340     		and	r3, r2
 276 012e 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC.c ****         {
 284:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 277              		.loc 1 284 0
 278 0130 8023     		mov	r3, #128
 279 0132 5B00     		lsl	r3, r3, #1
 280 0134 BB60     		str	r3, [r7, #8]
 281 0136 02E0     		b	.L12
 282              	.L11:
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 11


 285:.\Generated_Source\PSoC4/ADC.c ****         }
 286:.\Generated_Source\PSoC4/ADC.c ****         else
 287:.\Generated_Source\PSoC4/ADC.c ****         {
 288:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 283              		.loc 1 288 0
 284 0138 8023     		mov	r3, #128
 285 013a 5B01     		lsl	r3, r3, #5
 286 013c BB60     		str	r3, [r7, #8]
 287              	.L12:
 289:.\Generated_Source\PSoC4/ADC.c ****         }
 290:.\Generated_Source\PSoC4/ADC.c **** 
 291:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 288              		.loc 1 291 0
 289 013e 2C4B     		ldr	r3, .L16+88
 290 0140 FA68     		ldr	r2, [r7, #12]
 291 0142 9200     		lsl	r2, r2, #2
 292 0144 D258     		ldr	r2, [r2, r3]
 293 0146 8023     		mov	r3, #128
 294 0148 5B00     		lsl	r3, r3, #1
 295 014a 1340     		and	r3, r2
 296 014c 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC.c ****         {
 293:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC.c ****             #else
 298:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 297              		.loc 1 298 0
 298 014e 2B4B     		ldr	r3, .L16+100
 299 0150 FA68     		ldr	r2, [r7, #12]
 300 0152 5200     		lsl	r2, r2, #1
 301 0154 0021     		mov	r1, #0
 302 0156 D152     		strh	r1, [r2, r3]
 303 0158 04E0     		b	.L14
 304              	.L13:
 299:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC.c ****         }
 301:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC.c ****         {
 303:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC.c ****             #else
 307:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 305              		.loc 1 307 0
 306 015a 284B     		ldr	r3, .L16+100
 307 015c FA68     		ldr	r2, [r7, #12]
 308 015e 5200     		lsl	r2, r2, #1
 309 0160 0021     		mov	r1, #0
 310 0162 D152     		strh	r1, [r2, r3]
 311              	.L14:
 308:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC.c ****         }
 310:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 312              		.loc 1 311 0 discriminator 2
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 12


 313 0164 BB68     		ldr	r3, [r7, #8]
 314 0166 264A     		ldr	r2, .L16+104
 315 0168 5343     		mul	r3, r2
 316 016a 264A     		ldr	r2, .L16+108
 317 016c 9446     		mov	ip, r2
 318 016e 6344     		add	r3, r3, ip
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 319              		.loc 1 312 0 discriminator 2
 320 0170 181C     		mov	r0, r3
 321 0172 2349     		ldr	r1, .L16+104
 322 0174 FFF7FEFF 		bl	__aeabi_idiv
 323 0178 031C     		mov	r3, r0
 311:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 324              		.loc 1 311 0 discriminator 2
 325 017a 9BB2     		uxth	r3, r3
 326 017c 19B2     		sxth	r1, r3
 327 017e 224B     		ldr	r3, .L16+112
 328 0180 FA68     		ldr	r2, [r7, #12]
 329 0182 9200     		lsl	r2, r2, #2
 330 0184 D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 331              		.loc 1 232 0 discriminator 2
 332 0186 FB68     		ldr	r3, [r7, #12]
 333 0188 0133     		add	r3, r3, #1
 334 018a FB60     		str	r3, [r7, #12]
 335              	.L8:
 232:.\Generated_Source\PSoC4/ADC.c ****     {
 336              		.loc 1 232 0 is_stmt 0 discriminator 1
 337 018c FB68     		ldr	r3, [r7, #12]
 338 018e 012B     		cmp	r3, #1
 339 0190 8DD9     		bls	.L15
 313:.\Generated_Source\PSoC4/ADC.c ****     }
 314:.\Generated_Source\PSoC4/ADC.c **** }
 340              		.loc 1 314 0 is_stmt 1
 341 0192 BD46     		mov	sp, r7
 342 0194 04B0     		add	sp, sp, #16
 343              		@ sp needed
 344 0196 80BD     		pop	{r7, pc}
 345              	.L17:
 346              		.align	2
 347              	.L16:
 348 0198 00000000 		.word	ADC_ISR
 349 019c 20003A40 		.word	1077542944
 350 01a0 80033A40 		.word	1077543808
 351 01a4 70201013 		.word	319823984
 352 01a8 70200013 		.word	318775408
 353 01ac 00003A40 		.word	1077542912
 354 01b0 04003A40 		.word	1077542916
 355 01b4 CC000080 		.word	-2147483444
 356 01b8 18003A40 		.word	1077542936
 357 01bc 00000908 		.word	134807552
 358 01c0 1C003A40 		.word	1077542940
 359 01c4 10003A40 		.word	1077542928
 360 01c8 EB000400 		.word	262379
 361 01cc 14003A40 		.word	1077542932
 362 01d0 04000400 		.word	262148
 363 01d4 00033A40 		.word	1077543680
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 13


 364 01d8 40033A40 		.word	1077543744
 365 01dc 28023A40 		.word	1077543464
 366 01e0 38023A40 		.word	1077543480
 367 01e4 18023A40 		.word	1077543448
 368 01e8 30003A40 		.word	1077542960
 369 01ec FFFFFFDF 		.word	-536870913
 370 01f0 00000000 		.word	ADC_channelsConfig
 371 01f4 08000000 		.word	ADC_InputsPlacement.4768
 372 01f8 80003A40 		.word	1077543040
 373 01fc 00000000 		.word	ADC_offset
 374 0200 10270000 		.word	10000
 375 0204 88130000 		.word	5000
 376 0208 00000000 		.word	ADC_countsPer10Volt
 377              		.cfi_endproc
 378              	.LFE3:
 379              		.size	ADC_Init, .-ADC_Init
 380              		.section	.text.ADC_Enable,"ax",%progbits
 381              		.align	2
 382              		.global	ADC_Enable
 383              		.code	16
 384              		.thumb_func
 385              		.type	ADC_Enable, %function
 386              	ADC_Enable:
 387              	.LFB4:
 315:.\Generated_Source\PSoC4/ADC.c **** 
 316:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** *
 320:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 388              		.loc 1 331 0
 389              		.cfi_startproc
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 00AF     		add	r7, sp, #0
 395              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 396              		.loc 1 332 0
 397 0004 0A4B     		ldr	r3, .L21
 398 0006 1B68     		ldr	r3, [r3]
 399 0008 002B     		cmp	r3, #0
 400 000a 0EDB     		blt	.L18
 333:.\Generated_Source\PSoC4/ADC.c ****     {
 334:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 14


 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 401              		.loc 1 336 0
 402 000c C046     		mov	r8, r8
 403              	.L20:
 404              		.loc 1 336 0 is_stmt 0 discriminator 1
 405 000e 094B     		ldr	r3, .L21+4
 406 0010 1B68     		ldr	r3, [r3]
 407 0012 002B     		cmp	r3, #0
 408 0014 FBDB     		blt	.L20
 337:.\Generated_Source\PSoC4/ADC.c ****             {
 338:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC.c ****             }
 340:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC.c ****         
 342:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 409              		.loc 1 342 0 is_stmt 1
 410 0016 064B     		ldr	r3, .L21
 411 0018 054A     		ldr	r2, .L21
 412 001a 1268     		ldr	r2, [r2]
 413 001c 8021     		mov	r1, #128
 414 001e 0906     		lsl	r1, r1, #24
 415 0020 0A43     		orr	r2, r1
 416 0022 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC.c ****         
 344:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 417              		.loc 1 345 0
 418 0024 0A20     		mov	r0, #10
 419 0026 FFF7FEFF 		bl	CyDelayUs
 420              	.L18:
 346:.\Generated_Source\PSoC4/ADC.c ****     }
 347:.\Generated_Source\PSoC4/ADC.c **** }
 421              		.loc 1 347 0
 422 002a BD46     		mov	sp, r7
 423              		@ sp needed
 424 002c 80BD     		pop	{r7, pc}
 425              	.L22:
 426 002e C046     		.align	2
 427              	.L21:
 428 0030 00003A40 		.word	1077542912
 429 0034 08023A40 		.word	1077543432
 430              		.cfi_endproc
 431              	.LFE4:
 432              		.size	ADC_Enable, .-ADC_Enable
 433              		.section	.text.ADC_Stop,"ax",%progbits
 434              		.align	2
 435              		.global	ADC_Stop
 436              		.code	16
 437              		.thumb_func
 438              		.type	ADC_Stop, %function
 439              	ADC_Stop:
 440              	.LFB5:
 348:.\Generated_Source\PSoC4/ADC.c **** 
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 15


 352:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC.c **** *
 354:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC.c **** *
 361:.\Generated_Source\PSoC4/ADC.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC.c **** *
 364:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:.\Generated_Source\PSoC4/ADC.c **** {
 441              		.loc 1 366 0
 442              		.cfi_startproc
 443 0000 80B5     		push	{r7, lr}
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 7, -8
 446              		.cfi_offset 14, -4
 447 0002 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 449              		.loc 1 367 0
 450 0004 034B     		ldr	r3, .L24
 451 0006 034A     		ldr	r2, .L24
 452 0008 1268     		ldr	r2, [r2]
 453 000a 5200     		lsl	r2, r2, #1
 454 000c 5208     		lsr	r2, r2, #1
 455 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC.c **** }
 456              		.loc 1 368 0
 457 0010 BD46     		mov	sp, r7
 458              		@ sp needed
 459 0012 80BD     		pop	{r7, pc}
 460              	.L25:
 461              		.align	2
 462              	.L24:
 463 0014 00003A40 		.word	1077542912
 464              		.cfi_endproc
 465              	.LFE5:
 466              		.size	ADC_Stop, .-ADC_Stop
 467              		.section	.text.ADC_StartConvert,"ax",%progbits
 468              		.align	2
 469              		.global	ADC_StartConvert
 470              		.code	16
 471              		.thumb_func
 472              		.type	ADC_StartConvert, %function
 473              	ADC_StartConvert:
 474              	.LFB6:
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 16


 375:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC.c **** *
 384:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC.c **** *
 387:.\Generated_Source\PSoC4/ADC.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC.c **** *
 390:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC.c **** {
 475              		.loc 1 392 0
 476              		.cfi_startproc
 477 0000 80B5     		push	{r7, lr}
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 7, -8
 480              		.cfi_offset 14, -4
 481 0002 00AF     		add	r7, sp, #0
 482              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 483              		.loc 1 394 0
 484 0004 044B     		ldr	r3, .L27
 485 0006 044A     		ldr	r2, .L27
 486 0008 1268     		ldr	r2, [r2]
 487 000a 8021     		mov	r1, #128
 488 000c 4902     		lsl	r1, r1, #9
 489 000e 0A43     		orr	r2, r1
 490 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC.c **** 
 399:.\Generated_Source\PSoC4/ADC.c **** }
 491              		.loc 1 399 0
 492 0012 BD46     		mov	sp, r7
 493              		@ sp needed
 494 0014 80BD     		pop	{r7, pc}
 495              	.L28:
 496 0016 C046     		.align	2
 497              	.L27:
 498 0018 04003A40 		.word	1077542916
 499              		.cfi_endproc
 500              	.LFE6:
 501              		.size	ADC_StartConvert, .-ADC_StartConvert
 502              		.section	.text.ADC_StopConvert,"ax",%progbits
 503              		.align	2
 504              		.global	ADC_StopConvert
 505              		.code	16
 506              		.thumb_func
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 17


 507              		.type	ADC_StopConvert, %function
 508              	ADC_StopConvert:
 509              	.LFB7:
 400:.\Generated_Source\PSoC4/ADC.c **** 
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC.c **** *
 406:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC.c **** *
 409:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC.c **** *
 412:.\Generated_Source\PSoC4/ADC.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC.c **** *
 415:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC.c **** {
 510              		.loc 1 417 0
 511              		.cfi_startproc
 512 0000 80B5     		push	{r7, lr}
 513              		.cfi_def_cfa_offset 8
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 00AF     		add	r7, sp, #0
 517              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 518              		.loc 1 419 0
 519 0004 034B     		ldr	r3, .L30
 520 0006 034A     		ldr	r2, .L30
 521 0008 1268     		ldr	r2, [r2]
 522 000a 0349     		ldr	r1, .L30+4
 523 000c 0A40     		and	r2, r1
 524 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC.c **** }
 525              		.loc 1 421 0
 526 0010 BD46     		mov	sp, r7
 527              		@ sp needed
 528 0012 80BD     		pop	{r7, pc}
 529              	.L31:
 530              		.align	2
 531              	.L30:
 532 0014 04003A40 		.word	1077542916
 533 0018 FFFFFEFF 		.word	-65537
 534              		.cfi_endproc
 535              	.LFE7:
 536              		.size	ADC_StopConvert, .-ADC_StopConvert
 537              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 538              		.align	2
 539              		.global	ADC_IsEndConversion
 540              		.code	16
 541              		.thumb_func
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 18


 542              		.type	ADC_IsEndConversion, %function
 543              	ADC_IsEndConversion:
 544              	.LFB8:
 422:.\Generated_Source\PSoC4/ADC.c **** 
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC.c **** *
 428:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC.c **** *
 437:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC.c **** *
 445:.\Generated_Source\PSoC4/ADC.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC.c **** *
 449:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC.c **** {
 545              		.loc 1 451 0
 546              		.cfi_startproc
 547 0000 80B5     		push	{r7, lr}
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 7, -8
 550              		.cfi_offset 14, -4
 551 0002 84B0     		sub	sp, sp, #16
 552              		.cfi_def_cfa_offset 24
 553 0004 00AF     		add	r7, sp, #0
 554              		.cfi_def_cfa_register 7
 555 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 556              		.loc 1 452 0
 557 0008 0023     		mov	r3, #0
 558 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 559              		.loc 1 454 0
 560 000c 7B68     		ldr	r3, [r7, #4]
 561 000e 0322     		mov	r2, #3
 562 0010 1340     		and	r3, r2
 563 0012 11D0     		beq	.L33
 564              	.L35:
 455:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 19


 456:.\Generated_Source\PSoC4/ADC.c ****         do
 457:.\Generated_Source\PSoC4/ADC.c ****         {
 458:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 565              		.loc 1 458 0 discriminator 2
 566 0014 0B4B     		ldr	r3, .L37
 567 0016 1B68     		ldr	r3, [r3]
 568 0018 0122     		mov	r2, #1
 569 001a 1340     		and	r3, r2
 570 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 571              		.loc 1 459 0 discriminator 2
 572 001e FB68     		ldr	r3, [r7, #12]
 573 0020 002B     		cmp	r3, #0
 574 0022 03D1     		bne	.L34
 575              		.loc 1 459 0 is_stmt 0 discriminator 1
 576 0024 7B68     		ldr	r3, [r7, #4]
 577 0026 0222     		mov	r2, #2
 578 0028 1340     		and	r3, r2
 579 002a F3D1     		bne	.L35
 580              	.L34:
 460:.\Generated_Source\PSoC4/ADC.c **** 
 461:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 581              		.loc 1 461 0 is_stmt 1
 582 002c FB68     		ldr	r3, [r7, #12]
 583 002e 002B     		cmp	r3, #0
 584 0030 02D0     		beq	.L33
 462:.\Generated_Source\PSoC4/ADC.c ****         {
 463:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 585              		.loc 1 464 0
 586 0032 044B     		ldr	r3, .L37
 587 0034 0122     		mov	r2, #1
 588 0036 1A60     		str	r2, [r3]
 589              	.L33:
 465:.\Generated_Source\PSoC4/ADC.c ****         }
 466:.\Generated_Source\PSoC4/ADC.c ****     }
 467:.\Generated_Source\PSoC4/ADC.c **** 
 468:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC.c ****         {
 471:.\Generated_Source\PSoC4/ADC.c ****             do
 472:.\Generated_Source\PSoC4/ADC.c ****             {
 473:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC.c **** 
 477:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC.c ****             {
 479:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC.c ****             }
 482:.\Generated_Source\PSoC4/ADC.c ****         }
 483:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC.c **** 
 485:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 590              		.loc 1 485 0
 591 0038 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 20


 486:.\Generated_Source\PSoC4/ADC.c **** }
 592              		.loc 1 486 0
 593 003a 181C     		mov	r0, r3
 594 003c BD46     		mov	sp, r7
 595 003e 04B0     		add	sp, sp, #16
 596              		@ sp needed
 597 0040 80BD     		pop	{r7, pc}
 598              	.L38:
 599 0042 C046     		.align	2
 600              	.L37:
 601 0044 10023A40 		.word	1077543440
 602              		.cfi_endproc
 603              	.LFE8:
 604              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 605              		.section	.text.ADC_GetResult16,"ax",%progbits
 606              		.align	2
 607              		.global	ADC_GetResult16
 608              		.code	16
 609              		.thumb_func
 610              		.type	ADC_GetResult16, %function
 611              	ADC_GetResult16:
 612              	.LFB9:
 487:.\Generated_Source\PSoC4/ADC.c **** 
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC.c **** *
 493:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC.c **** *
 496:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC.c **** *
 500:.\Generated_Source\PSoC4/ADC.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC.c **** *
 503:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC.c **** {
 613              		.loc 1 505 0
 614              		.cfi_startproc
 615 0000 80B5     		push	{r7, lr}
 616              		.cfi_def_cfa_offset 8
 617              		.cfi_offset 7, -8
 618              		.cfi_offset 14, -4
 619 0002 84B0     		sub	sp, sp, #16
 620              		.cfi_def_cfa_offset 24
 621 0004 00AF     		add	r7, sp, #0
 622              		.cfi_def_cfa_register 7
 623 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC.c **** 
 508:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 624              		.loc 1 509 0
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 21


 625 0008 7B68     		ldr	r3, [r7, #4]
 626 000a 012B     		cmp	r3, #1
 627 000c 02D9     		bls	.L40
 628              		.loc 1 509 0 is_stmt 0 discriminator 1
 629 000e 0020     		mov	r0, #0
 630 0010 FFF7FEFF 		bl	CyHalt
 631              	.L40:
 510:.\Generated_Source\PSoC4/ADC.c **** 
 511:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 632              		.loc 1 511 0 is_stmt 1
 633 0014 7B68     		ldr	r3, [r7, #4]
 634 0016 012B     		cmp	r3, #1
 635 0018 09D8     		bhi	.L41
 512:.\Generated_Source\PSoC4/ADC.c ****     {
 513:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 636              		.loc 1 513 0
 637 001a 7B68     		ldr	r3, [r7, #4]
 638 001c 9B00     		lsl	r3, r3, #2
 639 001e 084A     		ldr	r2, .L44
 640 0020 9446     		mov	ip, r2
 641 0022 6344     		add	r3, r3, ip
 642 0024 1B68     		ldr	r3, [r3]
 643 0026 1B04     		lsl	r3, r3, #16
 644 0028 1B0C     		lsr	r3, r3, #16
 645 002a FB60     		str	r3, [r7, #12]
 646 002c 01E0     		b	.L42
 647              	.L41:
 514:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC.c ****     }
 516:.\Generated_Source\PSoC4/ADC.c ****     else
 517:.\Generated_Source\PSoC4/ADC.c ****     {
 518:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC.c ****         #else
 521:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 648              		.loc 1 521 0
 649 002e 0023     		mov	r3, #0
 650 0030 FB60     		str	r3, [r7, #12]
 651              	.L42:
 522:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC.c ****     }
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 652              		.loc 1 525 0
 653 0032 FB68     		ldr	r3, [r7, #12]
 654 0034 9BB2     		uxth	r3, r3
 655 0036 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC.c **** }
 656              		.loc 1 526 0
 657 0038 181C     		mov	r0, r3
 658 003a BD46     		mov	sp, r7
 659 003c 04B0     		add	sp, sp, #16
 660              		@ sp needed
 661 003e 80BD     		pop	{r7, pc}
 662              	.L45:
 663              		.align	2
 664              	.L44:
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 22


 665 0040 80013A40 		.word	1077543296
 666              		.cfi_endproc
 667              	.LFE9:
 668              		.size	ADC_GetResult16, .-ADC_GetResult16
 669              		.section	.text.ADC_SetChanMask,"ax",%progbits
 670              		.align	2
 671              		.global	ADC_SetChanMask
 672              		.code	16
 673              		.thumb_func
 674              		.type	ADC_SetChanMask, %function
 675              	ADC_SetChanMask:
 676              	.LFB10:
 527:.\Generated_Source\PSoC4/ADC.c **** 
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC.c **** *
 533:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC.c **** *
 536:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC.c **** *
 545:.\Generated_Source\PSoC4/ADC.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC.c **** {
 677              		.loc 1 550 0
 678              		.cfi_startproc
 679 0000 80B5     		push	{r7, lr}
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 82B0     		sub	sp, sp, #8
 684              		.cfi_def_cfa_offset 16
 685 0004 00AF     		add	r7, sp, #0
 686              		.cfi_def_cfa_register 7
 687 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 688              		.loc 1 551 0
 689 0008 034B     		ldr	r3, .L47
 690 000a 7A68     		ldr	r2, [r7, #4]
 691 000c 0321     		mov	r1, #3
 692 000e 0A40     		and	r2, r1
 693 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC.c **** }
 694              		.loc 1 552 0
 695 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 23


 696 0014 02B0     		add	sp, sp, #8
 697              		@ sp needed
 698 0016 80BD     		pop	{r7, pc}
 699              	.L48:
 700              		.align	2
 701              	.L47:
 702 0018 20003A40 		.word	1077542944
 703              		.cfi_endproc
 704              	.LFE10:
 705              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 706              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 707              		.align	2
 708              		.global	ADC_SetLowLimit
 709              		.code	16
 710              		.thumb_func
 711              		.type	ADC_SetLowLimit, %function
 712              	ADC_SetLowLimit:
 713              	.LFB11:
 553:.\Generated_Source\PSoC4/ADC.c **** 
 554:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC.c **** 
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC.c ****     *
 561:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC.c ****     *
 564:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC.c ****     *
 567:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC.c ****     *
 570:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC.c ****     {
 573:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC.c ****     }
 575:.\Generated_Source\PSoC4/ADC.c **** 
 576:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC.c **** 
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC.c **** *
 583:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC.c **** *
 586:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC.c **** *
 589:.\Generated_Source\PSoC4/ADC.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 24


 592:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC.c **** {
 714              		.loc 1 594 0
 715              		.cfi_startproc
 716 0000 80B5     		push	{r7, lr}
 717              		.cfi_def_cfa_offset 8
 718              		.cfi_offset 7, -8
 719              		.cfi_offset 14, -4
 720 0002 82B0     		sub	sp, sp, #8
 721              		.cfi_def_cfa_offset 16
 722 0004 00AF     		add	r7, sp, #0
 723              		.cfi_def_cfa_register 7
 724 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 725              		.loc 1 595 0
 726 0008 084B     		ldr	r3, .L50
 727 000a 084A     		ldr	r2, .L50
 728 000c 1268     		ldr	r2, [r2]
 729 000e 120C     		lsr	r2, r2, #16
 730 0010 1204     		lsl	r2, r2, #16
 731 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 732              		.loc 1 596 0
 733 0014 054B     		ldr	r3, .L50
 734 0016 054A     		ldr	r2, .L50
 735 0018 1168     		ldr	r1, [r2]
 736 001a 7A68     		ldr	r2, [r7, #4]
 737 001c 1204     		lsl	r2, r2, #16
 738 001e 120C     		lsr	r2, r2, #16
 739 0020 0A43     		orr	r2, r1
 740 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c **** }
 741              		.loc 1 597 0
 742 0024 BD46     		mov	sp, r7
 743 0026 02B0     		add	sp, sp, #8
 744              		@ sp needed
 745 0028 80BD     		pop	{r7, pc}
 746              	.L51:
 747 002a C046     		.align	2
 748              	.L50:
 749 002c 18003A40 		.word	1077542936
 750              		.cfi_endproc
 751              	.LFE11:
 752              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 753              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 754              		.align	2
 755              		.global	ADC_SetHighLimit
 756              		.code	16
 757              		.thumb_func
 758              		.type	ADC_SetHighLimit, %function
 759              	ADC_SetHighLimit:
 760              	.LFB12:
 598:.\Generated_Source\PSoC4/ADC.c **** 
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 25


 602:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC.c **** *
 604:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC.c **** *
 607:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC.c **** *
 610:.\Generated_Source\PSoC4/ADC.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC.c **** {
 761              		.loc 1 615 0
 762              		.cfi_startproc
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 82B0     		sub	sp, sp, #8
 768              		.cfi_def_cfa_offset 16
 769 0004 00AF     		add	r7, sp, #0
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 772              		.loc 1 616 0
 773 0008 074B     		ldr	r3, .L53
 774 000a 074A     		ldr	r2, .L53
 775 000c 1268     		ldr	r2, [r2]
 776 000e 1204     		lsl	r2, r2, #16
 777 0010 120C     		lsr	r2, r2, #16
 778 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 779              		.loc 1 617 0
 780 0014 044B     		ldr	r3, .L53
 781 0016 044A     		ldr	r2, .L53
 782 0018 1168     		ldr	r1, [r2]
 783 001a 7A68     		ldr	r2, [r7, #4]
 784 001c 1204     		lsl	r2, r2, #16
 785 001e 0A43     		orr	r2, r1
 786 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c **** }
 787              		.loc 1 618 0
 788 0022 BD46     		mov	sp, r7
 789 0024 02B0     		add	sp, sp, #8
 790              		@ sp needed
 791 0026 80BD     		pop	{r7, pc}
 792              	.L54:
 793              		.align	2
 794              	.L53:
 795 0028 18003A40 		.word	1077542936
 796              		.cfi_endproc
 797              	.LFE12:
 798              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 799              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 800              		.align	2
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 26


 801              		.global	ADC_SetLimitMask
 802              		.code	16
 803              		.thumb_func
 804              		.type	ADC_SetLimitMask, %function
 805              	ADC_SetLimitMask:
 806              	.LFB13:
 619:.\Generated_Source\PSoC4/ADC.c **** 
 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC.c **** *
 634:.\Generated_Source\PSoC4/ADC.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC.c **** *
 637:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC.c **** {
 807              		.loc 1 639 0
 808              		.cfi_startproc
 809 0000 80B5     		push	{r7, lr}
 810              		.cfi_def_cfa_offset 8
 811              		.cfi_offset 7, -8
 812              		.cfi_offset 14, -4
 813 0002 82B0     		sub	sp, sp, #8
 814              		.cfi_def_cfa_offset 16
 815 0004 00AF     		add	r7, sp, #0
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 818              		.loc 1 640 0
 819 0008 034B     		ldr	r3, .L56
 820 000a 7A68     		ldr	r2, [r7, #4]
 821 000c 0321     		mov	r1, #3
 822 000e 0A40     		and	r2, r1
 823 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC.c **** }
 824              		.loc 1 641 0
 825 0012 BD46     		mov	sp, r7
 826 0014 02B0     		add	sp, sp, #8
 827              		@ sp needed
 828 0016 80BD     		pop	{r7, pc}
 829              	.L57:
 830              		.align	2
 831              	.L56:
 832 0018 38023A40 		.word	1077543480
 833              		.cfi_endproc
 834              	.LFE13:
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 27


 835              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 836              		.section	.text.ADC_SetSatMask,"ax",%progbits
 837              		.align	2
 838              		.global	ADC_SetSatMask
 839              		.code	16
 840              		.thumb_func
 841              		.type	ADC_SetSatMask, %function
 842              	ADC_SetSatMask:
 843              	.LFB14:
 642:.\Generated_Source\PSoC4/ADC.c **** 
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC.c **** *
 648:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC.c **** *
 651:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC.c **** *
 657:.\Generated_Source\PSoC4/ADC.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC.c **** *
 660:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC.c **** {
 844              		.loc 1 662 0
 845              		.cfi_startproc
 846 0000 80B5     		push	{r7, lr}
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 7, -8
 849              		.cfi_offset 14, -4
 850 0002 82B0     		sub	sp, sp, #8
 851              		.cfi_def_cfa_offset 16
 852 0004 00AF     		add	r7, sp, #0
 853              		.cfi_def_cfa_register 7
 854 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 855              		.loc 1 663 0
 856 0008 034B     		ldr	r3, .L59
 857 000a 7A68     		ldr	r2, [r7, #4]
 858 000c 0321     		mov	r1, #3
 859 000e 0A40     		and	r2, r1
 860 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC.c **** }
 861              		.loc 1 664 0
 862 0012 BD46     		mov	sp, r7
 863 0014 02B0     		add	sp, sp, #8
 864              		@ sp needed
 865 0016 80BD     		pop	{r7, pc}
 866              	.L60:
 867              		.align	2
 868              	.L59:
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 28


 869 0018 28023A40 		.word	1077543464
 870              		.cfi_endproc
 871              	.LFE14:
 872              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 873              		.section	.text.ADC_SetOffset,"ax",%progbits
 874              		.align	2
 875              		.global	ADC_SetOffset
 876              		.code	16
 877              		.thumb_func
 878              		.type	ADC_SetOffset, %function
 879              	ADC_SetOffset:
 880              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC.c **** *
 671:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC.c **** *
 677:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC.c **** *
 682:.\Generated_Source\PSoC4/ADC.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC.c **** *
 685:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC.c **** *
 688:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC.c **** {
 881              		.loc 1 690 0
 882              		.cfi_startproc
 883 0000 80B5     		push	{r7, lr}
 884              		.cfi_def_cfa_offset 8
 885              		.cfi_offset 7, -8
 886              		.cfi_offset 14, -4
 887 0002 82B0     		sub	sp, sp, #8
 888              		.cfi_def_cfa_offset 16
 889 0004 00AF     		add	r7, sp, #0
 890              		.cfi_def_cfa_register 7
 891 0006 7860     		str	r0, [r7, #4]
 892 0008 0A1C     		mov	r2, r1
 893 000a BB1C     		add	r3, r7, #2
 894 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 895              		.loc 1 692 0
 896 000e 7B68     		ldr	r3, [r7, #4]
 897 0010 012B     		cmp	r3, #1
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 29


 898 0012 02D9     		bls	.L62
 899              		.loc 1 692 0 is_stmt 0 discriminator 1
 900 0014 0020     		mov	r0, #0
 901 0016 FFF7FEFF 		bl	CyHalt
 902              	.L62:
 693:.\Generated_Source\PSoC4/ADC.c **** 
 694:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 903              		.loc 1 694 0 is_stmt 1
 904 001a 044B     		ldr	r3, .L63
 905 001c 7A68     		ldr	r2, [r7, #4]
 906 001e 5200     		lsl	r2, r2, #1
 907 0020 B91C     		add	r1, r7, #2
 908 0022 0988     		ldrh	r1, [r1]
 909 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC.c **** }
 910              		.loc 1 695 0
 911 0026 BD46     		mov	sp, r7
 912 0028 02B0     		add	sp, sp, #8
 913              		@ sp needed
 914 002a 80BD     		pop	{r7, pc}
 915              	.L64:
 916              		.align	2
 917              	.L63:
 918 002c 00000000 		.word	ADC_offset
 919              		.cfi_endproc
 920              	.LFE15:
 921              		.size	ADC_SetOffset, .-ADC_SetOffset
 922              		.section	.text.ADC_SetGain,"ax",%progbits
 923              		.align	2
 924              		.global	ADC_SetGain
 925              		.code	16
 926              		.thumb_func
 927              		.type	ADC_SetGain, %function
 928              	ADC_SetGain:
 929              	.LFB16:
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c **** *
 702:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC.c **** *
 711:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC.c **** *
 715:.\Generated_Source\PSoC4/ADC.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 30


 718:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC.c **** *
 722:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC.c **** {
 930              		.loc 1 724 0
 931              		.cfi_startproc
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 82B0     		sub	sp, sp, #8
 937              		.cfi_def_cfa_offset 16
 938 0004 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 941 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 942              		.loc 1 726 0
 943 000a 7B68     		ldr	r3, [r7, #4]
 944 000c 012B     		cmp	r3, #1
 945 000e 02D9     		bls	.L66
 946              		.loc 1 726 0 is_stmt 0 discriminator 1
 947 0010 0020     		mov	r0, #0
 948 0012 FFF7FEFF 		bl	CyHalt
 949              	.L66:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 950              		.loc 1 728 0 is_stmt 1
 951 0016 044B     		ldr	r3, .L67
 952 0018 7A68     		ldr	r2, [r7, #4]
 953 001a 9200     		lsl	r2, r2, #2
 954 001c 3968     		ldr	r1, [r7]
 955 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC.c **** }
 956              		.loc 1 729 0
 957 0020 BD46     		mov	sp, r7
 958 0022 02B0     		add	sp, sp, #8
 959              		@ sp needed
 960 0024 80BD     		pop	{r7, pc}
 961              	.L68:
 962 0026 C046     		.align	2
 963              	.L67:
 964 0028 00000000 		.word	ADC_countsPer10Volt
 965              		.cfi_endproc
 966              	.LFE16:
 967              		.size	ADC_SetGain, .-ADC_SetGain
 968              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 969              		.align	2
 970              		.global	ADC_CountsTo_mVolts
 971              		.code	16
 972              		.thumb_func
 973              		.type	ADC_CountsTo_mVolts, %function
 974              	ADC_CountsTo_mVolts:
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 31


 975              	.LFB17:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:.\Generated_Source\PSoC4/ADC.c **** 
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC.c ****     *
 739:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC.c ****     *
 743:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC.c ****     *
 747:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     *
 750:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC.c ****     {
 976              		.loc 1 757 0
 977              		.cfi_startproc
 978 0000 80B5     		push	{r7, lr}
 979              		.cfi_def_cfa_offset 8
 980              		.cfi_offset 7, -8
 981              		.cfi_offset 14, -4
 982 0002 84B0     		sub	sp, sp, #16
 983              		.cfi_def_cfa_offset 24
 984 0004 00AF     		add	r7, sp, #0
 985              		.cfi_def_cfa_register 7
 986 0006 7860     		str	r0, [r7, #4]
 987 0008 0A1C     		mov	r2, r1
 988 000a BB1C     		add	r3, r7, #2
 989 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC.c **** 
 760:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 990              		.loc 1 761 0
 991 000e 7B68     		ldr	r3, [r7, #4]
 992 0010 012B     		cmp	r3, #1
 993 0012 02D9     		bls	.L70
 994              		.loc 1 761 0 is_stmt 0 discriminator 1
 995 0014 0020     		mov	r0, #0
 996 0016 FFF7FEFF 		bl	CyHalt
 997              	.L70:
 762:.\Generated_Source\PSoC4/ADC.c **** 
 763:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 32


 764:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC.c ****             {
 767:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC.c ****             }
 769:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC.c **** 
 771:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 998              		.loc 1 772 0 is_stmt 1
 999 001a 1F4B     		ldr	r3, .L76
 1000 001c 7A68     		ldr	r2, [r7, #4]
 1001 001e 5200     		lsl	r2, r2, #1
 1002 0020 D35A     		ldrh	r3, [r2, r3]
 1003 0022 99B2     		uxth	r1, r3
 1004 0024 BB1C     		add	r3, r7, #2
 1005 0026 1A88     		ldrh	r2, [r3]
 1006 0028 8BB2     		uxth	r3, r1
 1007 002a D31A     		sub	r3, r2, r3
 1008 002c 9AB2     		uxth	r2, r3
 1009 002e BB1C     		add	r3, r7, #2
 1010 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC.c **** 
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1011              		.loc 1 774 0
 1012 0032 BB1C     		add	r3, r7, #2
 1013 0034 0022     		mov	r2, #0
 1014 0036 9B5E     		ldrsh	r3, [r3, r2]
 1015 0038 184A     		ldr	r2, .L76+4
 1016 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1017              		.loc 1 775 0
 1018 003c BB1C     		add	r3, r7, #2
 1019 003e 0021     		mov	r1, #0
 1020 0040 5B5E     		ldrsh	r3, [r3, r1]
 1021 0042 002B     		cmp	r3, #0
 1022 0044 08DD     		ble	.L71
 1023              		.loc 1 775 0 is_stmt 0 discriminator 1
 1024 0046 164B     		ldr	r3, .L76+8
 1025 0048 7968     		ldr	r1, [r7, #4]
 1026 004a 8900     		lsl	r1, r1, #2
 1027 004c CB58     		ldr	r3, [r1, r3]
 1028 004e 002B     		cmp	r3, #0
 1029 0050 00DA     		bge	.L72
 1030 0052 0133     		add	r3, r3, #1
 1031              	.L72:
 1032 0054 5B10     		asr	r3, r3, #1
 1033 0056 08E0     		b	.L73
 1034              	.L71:
 1035              		.loc 1 775 0 discriminator 2
 1036 0058 114B     		ldr	r3, .L76+8
 1037 005a 7968     		ldr	r1, [r7, #4]
 1038 005c 8900     		lsl	r1, r1, #2
 1039 005e CB58     		ldr	r3, [r1, r3]
 1040 0060 002B     		cmp	r3, #0
 1041 0062 00DA     		bge	.L74
 1042 0064 0133     		add	r3, r3, #1
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 33


 1043              	.L74:
 1044 0066 5B10     		asr	r3, r3, #1
 1045 0068 5B42     		neg	r3, r3
 1046              	.L73:
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1047              		.loc 1 774 0 is_stmt 1
 1048 006a D118     		add	r1, r2, r3
 776:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1049              		.loc 1 776 0
 1050 006c 0C4B     		ldr	r3, .L76+8
 1051 006e 7A68     		ldr	r2, [r7, #4]
 1052 0070 9200     		lsl	r2, r2, #2
 1053 0072 D358     		ldr	r3, [r2, r3]
 1054 0074 081C     		mov	r0, r1
 1055 0076 191C     		mov	r1, r3
 1056 0078 FFF7FEFF 		bl	__aeabi_idiv
 1057 007c 031C     		mov	r3, r0
 1058 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1059              		.loc 1 774 0
 1060 0080 0E23     		mov	r3, #14
 1061 0082 FB18     		add	r3, r7, r3
 1062 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c **** 
 778:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1063              		.loc 1 778 0
 1064 0086 0E23     		mov	r3, #14
 1065 0088 FB18     		add	r3, r7, r3
 1066 008a 1B88     		ldrh	r3, [r3]
 1067 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC.c ****     }
 1068              		.loc 1 779 0
 1069 008e 181C     		mov	r0, r3
 1070 0090 BD46     		mov	sp, r7
 1071 0092 04B0     		add	sp, sp, #16
 1072              		@ sp needed
 1073 0094 80BD     		pop	{r7, pc}
 1074              	.L77:
 1075 0096 C046     		.align	2
 1076              	.L76:
 1077 0098 00000000 		.word	ADC_offset
 1078 009c 10270000 		.word	10000
 1079 00a0 00000000 		.word	ADC_countsPer10Volt
 1080              		.cfi_endproc
 1081              	.LFE17:
 1082              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1083              		.global	__aeabi_lmul
 1084              		.global	__aeabi_ldivmod
 1085              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1086              		.align	2
 1087              		.global	ADC_CountsTo_uVolts
 1088              		.code	16
 1089              		.thumb_func
 1090              		.type	ADC_CountsTo_uVolts, %function
 1091              	ADC_CountsTo_uVolts:
 1092              	.LFB18:
 780:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 34


 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC.c ****     *
 786:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC.c ****     *
 790:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC.c ****     *
 794:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC.c ****     *
 797:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC.c ****     *
 802:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC.c ****     *
 809:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC.c ****     {
 1093              		.loc 1 811 0
 1094              		.cfi_startproc
 1095 0000 B0B5     		push	{r4, r5, r7, lr}
 1096              		.cfi_def_cfa_offset 16
 1097              		.cfi_offset 4, -16
 1098              		.cfi_offset 5, -12
 1099              		.cfi_offset 7, -8
 1100              		.cfi_offset 14, -4
 1101 0002 86B0     		sub	sp, sp, #24
 1102              		.cfi_def_cfa_offset 40
 1103 0004 00AF     		add	r7, sp, #0
 1104              		.cfi_def_cfa_register 7
 1105 0006 F860     		str	r0, [r7, #12]
 1106 0008 0A1C     		mov	r2, r1
 1107 000a 0A23     		mov	r3, #10
 1108 000c FB18     		add	r3, r7, r3
 1109 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC.c **** 
 814:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1110              		.loc 1 815 0
 1111 0010 FB68     		ldr	r3, [r7, #12]
 1112 0012 012B     		cmp	r3, #1
 1113 0014 02D9     		bls	.L79
 1114              		.loc 1 815 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 35


 1115 0016 0020     		mov	r0, #0
 1116 0018 FFF7FEFF 		bl	CyHalt
 1117              	.L79:
 816:.\Generated_Source\PSoC4/ADC.c **** 
 817:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC.c ****             {
 821:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC.c ****             }
 823:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC.c **** 
 825:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1118              		.loc 1 826 0 is_stmt 1
 1119 001c 194B     		ldr	r3, .L81
 1120 001e FA68     		ldr	r2, [r7, #12]
 1121 0020 5200     		lsl	r2, r2, #1
 1122 0022 D35A     		ldrh	r3, [r2, r3]
 1123 0024 99B2     		uxth	r1, r3
 1124 0026 0A23     		mov	r3, #10
 1125 0028 FB18     		add	r3, r7, r3
 1126 002a 1A88     		ldrh	r2, [r3]
 1127 002c 8BB2     		uxth	r3, r1
 1128 002e D31A     		sub	r3, r2, r3
 1129 0030 9AB2     		uxth	r2, r3
 1130 0032 0A23     		mov	r3, #10
 1131 0034 FB18     		add	r3, r7, r3
 1132 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC.c **** 
 828:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1133              		.loc 1 828 0
 1134 0038 0A23     		mov	r3, #10
 1135 003a FB18     		add	r3, r7, r3
 1136 003c 1B88     		ldrh	r3, [r3]
 1137 003e 1BB2     		sxth	r3, r3
 1138 0040 3B60     		str	r3, [r7]
 1139 0042 DB17     		asr	r3, r3, #31
 1140 0044 7B60     		str	r3, [r7, #4]
 1141 0046 3868     		ldr	r0, [r7]
 1142 0048 7968     		ldr	r1, [r7, #4]
 1143 004a 0F4A     		ldr	r2, .L81+4
 1144 004c 0023     		mov	r3, #0
 1145 004e FFF7FEFF 		bl	__aeabi_lmul
 1146 0052 021C     		mov	r2, r0
 1147 0054 0B1C     		mov	r3, r1
 1148 0056 101C     		mov	r0, r2
 1149 0058 191C     		mov	r1, r3
 1150 005a 0C4B     		ldr	r3, .L81+8
 1151 005c FA68     		ldr	r2, [r7, #12]
 1152 005e 9200     		lsl	r2, r2, #2
 1153 0060 D358     		ldr	r3, [r2, r3]
 1154 0062 1C1C     		mov	r4, r3
 1155 0064 DB17     		asr	r3, r3, #31
 1156 0066 1D1C     		mov	r5, r3
 1157 0068 221C     		mov	r2, r4
 1158 006a 2B1C     		mov	r3, r5
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 36


 1159 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1160 0070 031C     		mov	r3, r0
 1161 0072 0C1C     		mov	r4, r1
 1162 0074 3B61     		str	r3, [r7, #16]
 1163 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1164              		.loc 1 830 0
 1165 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC.c ****     }
 1166              		.loc 1 831 0
 1167 007a 181C     		mov	r0, r3
 1168 007c BD46     		mov	sp, r7
 1169 007e 06B0     		add	sp, sp, #24
 1170              		@ sp needed
 1171 0080 B0BD     		pop	{r4, r5, r7, pc}
 1172              	.L82:
 1173 0082 C046     		.align	2
 1174              	.L81:
 1175 0084 00000000 		.word	ADC_offset
 1176 0088 80969800 		.word	10000000
 1177 008c 00000000 		.word	ADC_countsPer10Volt
 1178              		.cfi_endproc
 1179              	.LFE18:
 1180              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1181              		.global	__aeabi_i2f
 1182              		.global	__aeabi_fmul
 1183              		.global	__aeabi_fdiv
 1184              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1185              		.align	2
 1186              		.global	ADC_CountsTo_Volts
 1187              		.code	16
 1188              		.thumb_func
 1189              		.type	ADC_CountsTo_Volts, %function
 1190              	ADC_CountsTo_Volts:
 1191              	.LFB19:
 832:.\Generated_Source\PSoC4/ADC.c **** 
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC.c ****     *
 838:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC.c ****     *
 842:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC.c ****     *
 846:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC.c ****     *
 849:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 37


 853:.\Generated_Source\PSoC4/ADC.c ****     *
 854:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC.c ****     {
 1192              		.loc 1 856 0
 1193              		.cfi_startproc
 1194 0000 90B5     		push	{r4, r7, lr}
 1195              		.cfi_def_cfa_offset 12
 1196              		.cfi_offset 4, -12
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 0002 85B0     		sub	sp, sp, #20
 1200              		.cfi_def_cfa_offset 32
 1201 0004 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
 1203 0006 7860     		str	r0, [r7, #4]
 1204 0008 0A1C     		mov	r2, r1
 1205 000a BB1C     		add	r3, r7, #2
 1206 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC.c **** 
 859:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1207              		.loc 1 860 0
 1208 000e 7B68     		ldr	r3, [r7, #4]
 1209 0010 012B     		cmp	r3, #1
 1210 0012 02D9     		bls	.L84
 1211              		.loc 1 860 0 is_stmt 0 discriminator 1
 1212 0014 0020     		mov	r0, #0
 1213 0016 FFF7FEFF 		bl	CyHalt
 1214              	.L84:
 861:.\Generated_Source\PSoC4/ADC.c **** 
 862:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC.c ****             {
 866:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC.c ****             }
 868:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC.c **** 
 870:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1215              		.loc 1 871 0 is_stmt 1
 1216 001a 164B     		ldr	r3, .L86
 1217 001c 7A68     		ldr	r2, [r7, #4]
 1218 001e 5200     		lsl	r2, r2, #1
 1219 0020 D35A     		ldrh	r3, [r2, r3]
 1220 0022 99B2     		uxth	r1, r3
 1221 0024 BB1C     		add	r3, r7, #2
 1222 0026 1A88     		ldrh	r2, [r3]
 1223 0028 8BB2     		uxth	r3, r1
 1224 002a D31A     		sub	r3, r2, r3
 1225 002c 9AB2     		uxth	r2, r3
 1226 002e BB1C     		add	r3, r7, #2
 1227 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC.c **** 
 873:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 38


 1228              		.loc 1 873 0
 1229 0032 BB1C     		add	r3, r7, #2
 1230 0034 0022     		mov	r2, #0
 1231 0036 9B5E     		ldrsh	r3, [r3, r2]
 1232 0038 181C     		mov	r0, r3
 1233 003a FFF7FEFF 		bl	__aeabi_i2f
 1234 003e 031C     		add	r3, r0, #0
 1235 0040 181C     		add	r0, r3, #0
 1236 0042 0D49     		ldr	r1, .L86+4
 1237 0044 FFF7FEFF 		bl	__aeabi_fmul
 1238 0048 031C     		add	r3, r0, #0
 1239 004a 1C1C     		add	r4, r3, #0
 1240 004c 0B4B     		ldr	r3, .L86+8
 1241 004e 7A68     		ldr	r2, [r7, #4]
 1242 0050 9200     		lsl	r2, r2, #2
 1243 0052 D358     		ldr	r3, [r2, r3]
 1244 0054 181C     		mov	r0, r3
 1245 0056 FFF7FEFF 		bl	__aeabi_i2f
 1246 005a 031C     		add	r3, r0, #0
 1247 005c 201C     		add	r0, r4, #0
 1248 005e 191C     		add	r1, r3, #0
 1249 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1250 0064 031C     		add	r3, r0, #0
 1251 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC.c **** 
 875:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1252              		.loc 1 875 0
 1253 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC.c ****     }
 1254              		.loc 1 876 0
 1255 006a 181C     		add	r0, r3, #0
 1256 006c BD46     		mov	sp, r7
 1257 006e 05B0     		add	sp, sp, #20
 1258              		@ sp needed
 1259 0070 90BD     		pop	{r4, r7, pc}
 1260              	.L87:
 1261 0072 C046     		.align	2
 1262              	.L86:
 1263 0074 00000000 		.word	ADC_offset
 1264 0078 00002041 		.word	1092616192
 1265 007c 00000000 		.word	ADC_countsPer10Volt
 1266              		.cfi_endproc
 1267              	.LFE19:
 1268              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1269              		.section	.rodata
 1270              		.align	2
 1271              		.type	ADC_InputsPlacement.4768, %object
 1272              		.size	ADC_InputsPlacement.4768, 2
 1273              	ADC_InputsPlacement.4768:
 1274 0008 00       		.byte	0
 1275 0009 01       		.byte	1
 1276 000a 0000     		.text
 1277              	.Letext0:
 1278              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1279              		.section	.debug_info,"",%progbits
 1280              	.Ldebug_info0:
 1281 0000 9D040000 		.4byte	0x49d
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 39


 1282 0004 0400     		.2byte	0x4
 1283 0006 00000000 		.4byte	.Ldebug_abbrev0
 1284 000a 04       		.byte	0x4
 1285 000b 01       		.uleb128 0x1
 1286 000c FB020000 		.4byte	.LASF60
 1287 0010 01       		.byte	0x1
 1288 0011 18020000 		.4byte	.LASF61
 1289 0015 97020000 		.4byte	.LASF62
 1290 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1291 001d 00000000 		.4byte	0
 1292 0021 00000000 		.4byte	.Ldebug_line0
 1293 0025 02       		.uleb128 0x2
 1294 0026 01       		.byte	0x1
 1295 0027 06       		.byte	0x6
 1296 0028 7C000000 		.4byte	.LASF0
 1297 002c 02       		.uleb128 0x2
 1298 002d 01       		.byte	0x1
 1299 002e 08       		.byte	0x8
 1300 002f 37020000 		.4byte	.LASF1
 1301 0033 02       		.uleb128 0x2
 1302 0034 02       		.byte	0x2
 1303 0035 05       		.byte	0x5
 1304 0036 50020000 		.4byte	.LASF2
 1305 003a 02       		.uleb128 0x2
 1306 003b 02       		.byte	0x2
 1307 003c 07       		.byte	0x7
 1308 003d 53010000 		.4byte	.LASF3
 1309 0041 02       		.uleb128 0x2
 1310 0042 04       		.byte	0x4
 1311 0043 05       		.byte	0x5
 1312 0044 9F000000 		.4byte	.LASF4
 1313 0048 02       		.uleb128 0x2
 1314 0049 04       		.byte	0x4
 1315 004a 07       		.byte	0x7
 1316 004b 22010000 		.4byte	.LASF5
 1317 004f 02       		.uleb128 0x2
 1318 0050 08       		.byte	0x8
 1319 0051 05       		.byte	0x5
 1320 0052 6E000000 		.4byte	.LASF6
 1321 0056 02       		.uleb128 0x2
 1322 0057 08       		.byte	0x8
 1323 0058 07       		.byte	0x7
 1324 0059 32000000 		.4byte	.LASF7
 1325 005d 03       		.uleb128 0x3
 1326 005e 04       		.byte	0x4
 1327 005f 05       		.byte	0x5
 1328 0060 696E7400 		.ascii	"int\000"
 1329 0064 02       		.uleb128 0x2
 1330 0065 04       		.byte	0x4
 1331 0066 07       		.byte	0x7
 1332 0067 0E010000 		.4byte	.LASF8
 1333 006b 04       		.uleb128 0x4
 1334 006c D0000000 		.4byte	.LASF9
 1335 0070 02       		.byte	0x2
 1336 0071 3801     		.2byte	0x138
 1337 0073 2C000000 		.4byte	0x2c
 1338 0077 04       		.uleb128 0x4
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 40


 1339 0078 00000000 		.4byte	.LASF10
 1340 007c 02       		.byte	0x2
 1341 007d 3901     		.2byte	0x139
 1342 007f 3A000000 		.4byte	0x3a
 1343 0083 04       		.uleb128 0x4
 1344 0084 DD000000 		.4byte	.LASF11
 1345 0088 02       		.byte	0x2
 1346 0089 3A01     		.2byte	0x13a
 1347 008b 48000000 		.4byte	0x48
 1348 008f 04       		.uleb128 0x4
 1349 0090 E7020000 		.4byte	.LASF12
 1350 0094 02       		.byte	0x2
 1351 0095 3C01     		.2byte	0x13c
 1352 0097 33000000 		.4byte	0x33
 1353 009b 04       		.uleb128 0x4
 1354 009c 8F000000 		.4byte	.LASF13
 1355 00a0 02       		.byte	0x2
 1356 00a1 3D01     		.2byte	0x13d
 1357 00a3 41000000 		.4byte	0x41
 1358 00a7 04       		.uleb128 0x4
 1359 00a8 83010000 		.4byte	.LASF14
 1360 00ac 02       		.byte	0x2
 1361 00ad 3E01     		.2byte	0x13e
 1362 00af B3000000 		.4byte	0xb3
 1363 00b3 02       		.uleb128 0x2
 1364 00b4 04       		.byte	0x4
 1365 00b5 04       		.byte	0x4
 1366 00b6 E4010000 		.4byte	.LASF15
 1367 00ba 02       		.uleb128 0x2
 1368 00bb 08       		.byte	0x8
 1369 00bc 04       		.byte	0x4
 1370 00bd D6000000 		.4byte	.LASF16
 1371 00c1 04       		.uleb128 0x4
 1372 00c2 C2010000 		.4byte	.LASF17
 1373 00c6 02       		.byte	0x2
 1374 00c7 4301     		.2byte	0x143
 1375 00c9 4F000000 		.4byte	0x4f
 1376 00cd 02       		.uleb128 0x2
 1377 00ce 01       		.byte	0x1
 1378 00cf 08       		.byte	0x8
 1379 00d0 6E020000 		.4byte	.LASF18
 1380 00d4 04       		.uleb128 0x4
 1381 00d5 7D010000 		.4byte	.LASF19
 1382 00d9 02       		.byte	0x2
 1383 00da E401     		.2byte	0x1e4
 1384 00dc E0000000 		.4byte	0xe0
 1385 00e0 05       		.uleb128 0x5
 1386 00e1 83000000 		.4byte	0x83
 1387 00e5 02       		.uleb128 0x2
 1388 00e6 04       		.byte	0x4
 1389 00e7 07       		.byte	0x7
 1390 00e8 8B010000 		.4byte	.LASF20
 1391 00ec 06       		.uleb128 0x6
 1392 00ed 95000000 		.4byte	.LASF25
 1393 00f1 01       		.byte	0x1
 1394 00f2 3F       		.byte	0x3f
 1395 00f3 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 41


 1396 00f7 24000000 		.4byte	.LFE2-.LFB2
 1397 00fb 01       		.uleb128 0x1
 1398 00fc 9C       		.byte	0x9c
 1399 00fd 07       		.uleb128 0x7
 1400 00fe 29000000 		.4byte	.LASF36
 1401 0102 01       		.byte	0x1
 1402 0103 5E       		.byte	0x5e
 1403 0104 00000000 		.4byte	.LFB3
 1404 0108 0C020000 		.4byte	.LFE3-.LFB3
 1405 010c 01       		.uleb128 0x1
 1406 010d 9C       		.byte	0x9c
 1407 010e 4E010000 		.4byte	0x14e
 1408 0112 08       		.uleb128 0x8
 1409 0113 63020000 		.4byte	.LASF21
 1410 0117 01       		.byte	0x1
 1411 0118 60       		.byte	0x60
 1412 0119 83000000 		.4byte	0x83
 1413 011d 02       		.uleb128 0x2
 1414 011e 91       		.byte	0x91
 1415 011f 74       		.sleb128 -12
 1416 0120 08       		.uleb128 0x8
 1417 0121 49010000 		.4byte	.LASF22
 1418 0125 01       		.byte	0x1
 1419 0126 61       		.byte	0x61
 1420 0127 83000000 		.4byte	0x83
 1421 012b 02       		.uleb128 0x2
 1422 012c 91       		.byte	0x91
 1423 012d 6C       		.sleb128 -20
 1424 012e 08       		.uleb128 0x8
 1425 012f 0F000000 		.4byte	.LASF23
 1426 0133 01       		.byte	0x1
 1427 0134 62       		.byte	0x62
 1428 0135 9B000000 		.4byte	0x9b
 1429 0139 02       		.uleb128 0x2
 1430 013a 91       		.byte	0x91
 1431 013b 70       		.sleb128 -16
 1432 013c 08       		.uleb128 0x8
 1433 013d 49000000 		.4byte	.LASF24
 1434 0141 01       		.byte	0x1
 1435 0142 65       		.byte	0x65
 1436 0143 5E010000 		.4byte	0x15e
 1437 0147 05       		.uleb128 0x5
 1438 0148 03       		.byte	0x3
 1439 0149 08000000 		.4byte	ADC_InputsPlacement.4768
 1440 014d 00       		.byte	0
 1441 014e 09       		.uleb128 0x9
 1442 014f 6B000000 		.4byte	0x6b
 1443 0153 5E010000 		.4byte	0x15e
 1444 0157 0A       		.uleb128 0xa
 1445 0158 E5000000 		.4byte	0xe5
 1446 015c 01       		.byte	0x1
 1447 015d 00       		.byte	0
 1448 015e 0B       		.uleb128 0xb
 1449 015f 4E010000 		.4byte	0x14e
 1450 0163 0C       		.uleb128 0xc
 1451 0164 DC020000 		.4byte	.LASF26
 1452 0168 01       		.byte	0x1
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 42


 1453 0169 4A01     		.2byte	0x14a
 1454 016b 00000000 		.4byte	.LFB4
 1455 016f 38000000 		.4byte	.LFE4-.LFB4
 1456 0173 01       		.uleb128 0x1
 1457 0174 9C       		.byte	0x9c
 1458 0175 0D       		.uleb128 0xd
 1459 0176 5A020000 		.4byte	.LASF27
 1460 017a 01       		.byte	0x1
 1461 017b 6D01     		.2byte	0x16d
 1462 017d 00000000 		.4byte	.LFB5
 1463 0181 18000000 		.4byte	.LFE5-.LFB5
 1464 0185 01       		.uleb128 0x1
 1465 0186 9C       		.byte	0x9c
 1466 0187 0D       		.uleb128 0xd
 1467 0188 5D000000 		.4byte	.LASF28
 1468 018c 01       		.byte	0x1
 1469 018d 8701     		.2byte	0x187
 1470 018f 00000000 		.4byte	.LFB6
 1471 0193 1C000000 		.4byte	.LFE6-.LFB6
 1472 0197 01       		.uleb128 0x1
 1473 0198 9C       		.byte	0x9c
 1474 0199 0D       		.uleb128 0xd
 1475 019a 66010000 		.4byte	.LASF29
 1476 019e 01       		.byte	0x1
 1477 019f A001     		.2byte	0x1a0
 1478 01a1 00000000 		.4byte	.LFB7
 1479 01a5 1C000000 		.4byte	.LFE7-.LFB7
 1480 01a9 01       		.uleb128 0x1
 1481 01aa 9C       		.byte	0x9c
 1482 01ab 0E       		.uleb128 0xe
 1483 01ac AE010000 		.4byte	.LASF31
 1484 01b0 01       		.byte	0x1
 1485 01b1 C201     		.2byte	0x1c2
 1486 01b3 83000000 		.4byte	0x83
 1487 01b7 00000000 		.4byte	.LFB8
 1488 01bb 48000000 		.4byte	.LFE8-.LFB8
 1489 01bf 01       		.uleb128 0x1
 1490 01c0 9C       		.byte	0x9c
 1491 01c1 E4010000 		.4byte	0x1e4
 1492 01c5 0F       		.uleb128 0xf
 1493 01c6 F5000000 		.4byte	.LASF33
 1494 01ca 01       		.byte	0x1
 1495 01cb C201     		.2byte	0x1c2
 1496 01cd 83000000 		.4byte	0x83
 1497 01d1 02       		.uleb128 0x2
 1498 01d2 91       		.byte	0x91
 1499 01d3 6C       		.sleb128 -20
 1500 01d4 10       		.uleb128 0x10
 1501 01d5 88000000 		.4byte	.LASF30
 1502 01d9 01       		.byte	0x1
 1503 01da C401     		.2byte	0x1c4
 1504 01dc 83000000 		.4byte	0x83
 1505 01e0 02       		.uleb128 0x2
 1506 01e1 91       		.byte	0x91
 1507 01e2 74       		.sleb128 -12
 1508 01e3 00       		.byte	0
 1509 01e4 11       		.uleb128 0x11
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 43


 1510 01e5 90030000 		.4byte	.LASF32
 1511 01e9 01       		.byte	0x1
 1512 01ea F801     		.2byte	0x1f8
 1513 01ec 8F000000 		.4byte	0x8f
 1514 01f0 00000000 		.4byte	.LFB9
 1515 01f4 44000000 		.4byte	.LFE9-.LFB9
 1516 01f8 01       		.uleb128 0x1
 1517 01f9 9C       		.byte	0x9c
 1518 01fa 1D020000 		.4byte	0x21d
 1519 01fe 0F       		.uleb128 0xf
 1520 01ff 69020000 		.4byte	.LASF34
 1521 0203 01       		.byte	0x1
 1522 0204 F801     		.2byte	0x1f8
 1523 0206 83000000 		.4byte	0x83
 1524 020a 02       		.uleb128 0x2
 1525 020b 91       		.byte	0x91
 1526 020c 6C       		.sleb128 -20
 1527 020d 10       		.uleb128 0x10
 1528 020e 89030000 		.4byte	.LASF35
 1529 0212 01       		.byte	0x1
 1530 0213 FA01     		.2byte	0x1fa
 1531 0215 83000000 		.4byte	0x83
 1532 0219 02       		.uleb128 0x2
 1533 021a 91       		.byte	0x91
 1534 021b 74       		.sleb128 -12
 1535 021c 00       		.byte	0
 1536 021d 12       		.uleb128 0x12
 1537 021e C8010000 		.4byte	.LASF37
 1538 0222 01       		.byte	0x1
 1539 0223 2502     		.2byte	0x225
 1540 0225 00000000 		.4byte	.LFB10
 1541 0229 1C000000 		.4byte	.LFE10-.LFB10
 1542 022d 01       		.uleb128 0x1
 1543 022e 9C       		.byte	0x9c
 1544 022f 43020000 		.4byte	0x243
 1545 0233 0F       		.uleb128 0xf
 1546 0234 E4000000 		.4byte	.LASF38
 1547 0238 01       		.byte	0x1
 1548 0239 2502     		.2byte	0x225
 1549 023b 83000000 		.4byte	0x83
 1550 023f 02       		.uleb128 0x2
 1551 0240 91       		.byte	0x91
 1552 0241 74       		.sleb128 -12
 1553 0242 00       		.byte	0
 1554 0243 12       		.uleb128 0x12
 1555 0244 08020000 		.4byte	.LASF39
 1556 0248 01       		.byte	0x1
 1557 0249 5102     		.2byte	0x251
 1558 024b 00000000 		.4byte	.LFB11
 1559 024f 30000000 		.4byte	.LFE11-.LFB11
 1560 0253 01       		.uleb128 0x1
 1561 0254 9C       		.byte	0x9c
 1562 0255 69020000 		.4byte	0x269
 1563 0259 0F       		.uleb128 0xf
 1564 025a 94010000 		.4byte	.LASF40
 1565 025e 01       		.byte	0x1
 1566 025f 5102     		.2byte	0x251
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 44


 1567 0261 83000000 		.4byte	0x83
 1568 0265 02       		.uleb128 0x2
 1569 0266 91       		.byte	0x91
 1570 0267 74       		.sleb128 -12
 1571 0268 00       		.byte	0
 1572 0269 12       		.uleb128 0x12
 1573 026a 9D010000 		.4byte	.LASF41
 1574 026e 01       		.byte	0x1
 1575 026f 6602     		.2byte	0x266
 1576 0271 00000000 		.4byte	.LFB12
 1577 0275 2C000000 		.4byte	.LFE12-.LFB12
 1578 0279 01       		.uleb128 0x1
 1579 027a 9C       		.byte	0x9c
 1580 027b 8F020000 		.4byte	0x28f
 1581 027f 0F       		.uleb128 0xf
 1582 0280 EA010000 		.4byte	.LASF42
 1583 0284 01       		.byte	0x1
 1584 0285 6602     		.2byte	0x266
 1585 0287 83000000 		.4byte	0x83
 1586 028b 02       		.uleb128 0x2
 1587 028c 91       		.byte	0x91
 1588 028d 74       		.sleb128 -12
 1589 028e 00       		.byte	0
 1590 028f 12       		.uleb128 0x12
 1591 0290 FD000000 		.4byte	.LASF43
 1592 0294 01       		.byte	0x1
 1593 0295 7E02     		.2byte	0x27e
 1594 0297 00000000 		.4byte	.LFB13
 1595 029b 1C000000 		.4byte	.LFE13-.LFB13
 1596 029f 01       		.uleb128 0x1
 1597 02a0 9C       		.byte	0x9c
 1598 02a1 B5020000 		.4byte	0x2b5
 1599 02a5 0F       		.uleb128 0xf
 1600 02a6 E4000000 		.4byte	.LASF38
 1601 02aa 01       		.byte	0x1
 1602 02ab 7E02     		.2byte	0x27e
 1603 02ad 83000000 		.4byte	0x83
 1604 02b1 02       		.uleb128 0x2
 1605 02b2 91       		.byte	0x91
 1606 02b3 74       		.sleb128 -12
 1607 02b4 00       		.byte	0
 1608 02b5 12       		.uleb128 0x12
 1609 02b6 34010000 		.4byte	.LASF44
 1610 02ba 01       		.byte	0x1
 1611 02bb 9502     		.2byte	0x295
 1612 02bd 00000000 		.4byte	.LFB14
 1613 02c1 1C000000 		.4byte	.LFE14-.LFB14
 1614 02c5 01       		.uleb128 0x1
 1615 02c6 9C       		.byte	0x9c
 1616 02c7 DB020000 		.4byte	0x2db
 1617 02cb 0F       		.uleb128 0xf
 1618 02cc E4000000 		.4byte	.LASF38
 1619 02d0 01       		.byte	0x1
 1620 02d1 9502     		.2byte	0x295
 1621 02d3 83000000 		.4byte	0x83
 1622 02d7 02       		.uleb128 0x2
 1623 02d8 91       		.byte	0x91
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 45


 1624 02d9 74       		.sleb128 -12
 1625 02da 00       		.byte	0
 1626 02db 13       		.uleb128 0x13
 1627 02dc ED020000 		.4byte	.LASF45
 1628 02e0 01       		.byte	0x1
 1629 02e1 B102     		.2byte	0x2b1
 1630 02e3 00000000 		.4byte	.LFB15
 1631 02e7 30000000 		.4byte	.LFE15-.LFB15
 1632 02eb 01       		.uleb128 0x1
 1633 02ec 9C       		.byte	0x9c
 1634 02ed 10030000 		.4byte	0x310
 1635 02f1 0F       		.uleb128 0xf
 1636 02f2 69020000 		.4byte	.LASF34
 1637 02f6 01       		.byte	0x1
 1638 02f7 B102     		.2byte	0x2b1
 1639 02f9 83000000 		.4byte	0x83
 1640 02fd 02       		.uleb128 0x2
 1641 02fe 91       		.byte	0x91
 1642 02ff 74       		.sleb128 -12
 1643 0300 0F       		.uleb128 0xf
 1644 0301 86020000 		.4byte	.LASF46
 1645 0305 01       		.byte	0x1
 1646 0306 B102     		.2byte	0x2b1
 1647 0308 8F000000 		.4byte	0x8f
 1648 030c 02       		.uleb128 0x2
 1649 030d 91       		.byte	0x91
 1650 030e 72       		.sleb128 -14
 1651 030f 00       		.byte	0
 1652 0310 13       		.uleb128 0x13
 1653 0311 D8010000 		.4byte	.LASF47
 1654 0315 01       		.byte	0x1
 1655 0316 D302     		.2byte	0x2d3
 1656 0318 00000000 		.4byte	.LFB16
 1657 031c 2C000000 		.4byte	.LFE16-.LFB16
 1658 0320 01       		.uleb128 0x1
 1659 0321 9C       		.byte	0x9c
 1660 0322 45030000 		.4byte	0x345
 1661 0326 0F       		.uleb128 0xf
 1662 0327 69020000 		.4byte	.LASF34
 1663 032b 01       		.byte	0x1
 1664 032c D302     		.2byte	0x2d3
 1665 032e 83000000 		.4byte	0x83
 1666 0332 02       		.uleb128 0x2
 1667 0333 91       		.byte	0x91
 1668 0334 74       		.sleb128 -12
 1669 0335 0F       		.uleb128 0xf
 1670 0336 07000000 		.4byte	.LASF48
 1671 033a 01       		.byte	0x1
 1672 033b D302     		.2byte	0x2d3
 1673 033d 9B000000 		.4byte	0x9b
 1674 0341 02       		.uleb128 0x2
 1675 0342 91       		.byte	0x91
 1676 0343 70       		.sleb128 -16
 1677 0344 00       		.byte	0
 1678 0345 11       		.uleb128 0x11
 1679 0346 F4010000 		.4byte	.LASF49
 1680 034a 01       		.byte	0x1
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 46


 1681 034b F402     		.2byte	0x2f4
 1682 034d 8F000000 		.4byte	0x8f
 1683 0351 00000000 		.4byte	.LFB17
 1684 0355 A4000000 		.4byte	.LFE17-.LFB17
 1685 0359 01       		.uleb128 0x1
 1686 035a 9C       		.byte	0x9c
 1687 035b 8D030000 		.4byte	0x38d
 1688 035f 0F       		.uleb128 0xf
 1689 0360 69020000 		.4byte	.LASF34
 1690 0364 01       		.byte	0x1
 1691 0365 F402     		.2byte	0x2f4
 1692 0367 83000000 		.4byte	0x83
 1693 036b 02       		.uleb128 0x2
 1694 036c 91       		.byte	0x91
 1695 036d 6C       		.sleb128 -20
 1696 036e 0F       		.uleb128 0xf
 1697 036f 8D020000 		.4byte	.LASF50
 1698 0373 01       		.byte	0x1
 1699 0374 F402     		.2byte	0x2f4
 1700 0376 8F000000 		.4byte	0x8f
 1701 037a 02       		.uleb128 0x2
 1702 037b 91       		.byte	0x91
 1703 037c 6A       		.sleb128 -22
 1704 037d 10       		.uleb128 0x10
 1705 037e 76010000 		.4byte	.LASF51
 1706 0382 01       		.byte	0x1
 1707 0383 F602     		.2byte	0x2f6
 1708 0385 8F000000 		.4byte	0x8f
 1709 0389 02       		.uleb128 0x2
 1710 038a 91       		.byte	0x91
 1711 038b 76       		.sleb128 -10
 1712 038c 00       		.byte	0
 1713 038d 11       		.uleb128 0x11
 1714 038e A8000000 		.4byte	.LASF52
 1715 0392 01       		.byte	0x1
 1716 0393 2A03     		.2byte	0x32a
 1717 0395 9B000000 		.4byte	0x9b
 1718 0399 00000000 		.4byte	.LFB18
 1719 039d 90000000 		.4byte	.LFE18-.LFB18
 1720 03a1 01       		.uleb128 0x1
 1721 03a2 9C       		.byte	0x9c
 1722 03a3 D5030000 		.4byte	0x3d5
 1723 03a7 0F       		.uleb128 0xf
 1724 03a8 69020000 		.4byte	.LASF34
 1725 03ac 01       		.byte	0x1
 1726 03ad 2A03     		.2byte	0x32a
 1727 03af 83000000 		.4byte	0x83
 1728 03b3 02       		.uleb128 0x2
 1729 03b4 91       		.byte	0x91
 1730 03b5 64       		.sleb128 -28
 1731 03b6 0F       		.uleb128 0xf
 1732 03b7 8D020000 		.4byte	.LASF50
 1733 03bb 01       		.byte	0x1
 1734 03bc 2A03     		.2byte	0x32a
 1735 03be 8F000000 		.4byte	0x8f
 1736 03c2 02       		.uleb128 0x2
 1737 03c3 91       		.byte	0x91
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 47


 1738 03c4 62       		.sleb128 -30
 1739 03c5 10       		.uleb128 0x10
 1740 03c6 1B010000 		.4byte	.LASF53
 1741 03ca 01       		.byte	0x1
 1742 03cb 2C03     		.2byte	0x32c
 1743 03cd C1000000 		.4byte	0xc1
 1744 03d1 02       		.uleb128 0x2
 1745 03d2 91       		.byte	0x91
 1746 03d3 68       		.sleb128 -24
 1747 03d4 00       		.byte	0
 1748 03d5 11       		.uleb128 0x11
 1749 03d6 16000000 		.4byte	.LASF54
 1750 03da 01       		.byte	0x1
 1751 03db 5703     		.2byte	0x357
 1752 03dd A7000000 		.4byte	0xa7
 1753 03e1 00000000 		.4byte	.LFB19
 1754 03e5 80000000 		.4byte	.LFE19-.LFB19
 1755 03e9 01       		.uleb128 0x1
 1756 03ea 9C       		.byte	0x9c
 1757 03eb 1D040000 		.4byte	0x41d
 1758 03ef 0F       		.uleb128 0xf
 1759 03f0 69020000 		.4byte	.LASF34
 1760 03f4 01       		.byte	0x1
 1761 03f5 5703     		.2byte	0x357
 1762 03f7 83000000 		.4byte	0x83
 1763 03fb 02       		.uleb128 0x2
 1764 03fc 91       		.byte	0x91
 1765 03fd 64       		.sleb128 -28
 1766 03fe 0F       		.uleb128 0xf
 1767 03ff 8D020000 		.4byte	.LASF50
 1768 0403 01       		.byte	0x1
 1769 0404 5703     		.2byte	0x357
 1770 0406 8F000000 		.4byte	0x8f
 1771 040a 02       		.uleb128 0x2
 1772 040b 91       		.byte	0x91
 1773 040c 62       		.sleb128 -30
 1774 040d 10       		.uleb128 0x10
 1775 040e 43010000 		.4byte	.LASF55
 1776 0412 01       		.byte	0x1
 1777 0413 5903     		.2byte	0x359
 1778 0415 A7000000 		.4byte	0xa7
 1779 0419 02       		.uleb128 0x2
 1780 041a 91       		.byte	0x91
 1781 041b 6C       		.sleb128 -20
 1782 041c 00       		.byte	0
 1783 041d 09       		.uleb128 0x9
 1784 041e 83000000 		.4byte	0x83
 1785 0422 2D040000 		.4byte	0x42d
 1786 0426 0A       		.uleb128 0xa
 1787 0427 E5000000 		.4byte	0xe5
 1788 042b 01       		.byte	0x1
 1789 042c 00       		.byte	0
 1790 042d 08       		.uleb128 0x8
 1791 042e 73020000 		.4byte	.LASF56
 1792 0432 01       		.byte	0x1
 1793 0433 21       		.byte	0x21
 1794 0434 3E040000 		.4byte	0x43e
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 48


 1795 0438 05       		.uleb128 0x5
 1796 0439 03       		.byte	0x3
 1797 043a 00000000 		.4byte	ADC_channelsConfig
 1798 043e 0B       		.uleb128 0xb
 1799 043f 1D040000 		.4byte	0x41d
 1800 0443 14       		.uleb128 0x14
 1801 0444 E9000000 		.4byte	.LASF57
 1802 0448 01       		.byte	0x1
 1803 0449 18       		.byte	0x18
 1804 044a 6B000000 		.4byte	0x6b
 1805 044e 05       		.uleb128 0x5
 1806 044f 03       		.byte	0x3
 1807 0450 00000000 		.4byte	ADC_initVar
 1808 0454 09       		.uleb128 0x9
 1809 0455 8F000000 		.4byte	0x8f
 1810 0459 64040000 		.4byte	0x464
 1811 045d 0A       		.uleb128 0xa
 1812 045e E5000000 		.4byte	0xe5
 1813 0462 01       		.byte	0x1
 1814 0463 00       		.byte	0
 1815 0464 14       		.uleb128 0x14
 1816 0465 45020000 		.4byte	.LASF58
 1817 0469 01       		.byte	0x1
 1818 046a 19       		.byte	0x19
 1819 046b 75040000 		.4byte	0x475
 1820 046f 05       		.uleb128 0x5
 1821 0470 03       		.byte	0x3
 1822 0471 00000000 		.4byte	ADC_offset
 1823 0475 05       		.uleb128 0x5
 1824 0476 54040000 		.4byte	0x454
 1825 047a 09       		.uleb128 0x9
 1826 047b 9B000000 		.4byte	0x9b
 1827 047f 8A040000 		.4byte	0x48a
 1828 0483 0A       		.uleb128 0xa
 1829 0484 E5000000 		.4byte	0xe5
 1830 0488 01       		.byte	0x1
 1831 0489 00       		.byte	0
 1832 048a 14       		.uleb128 0x14
 1833 048b BC000000 		.4byte	.LASF59
 1834 048f 01       		.byte	0x1
 1835 0490 1A       		.byte	0x1a
 1836 0491 9B040000 		.4byte	0x49b
 1837 0495 05       		.uleb128 0x5
 1838 0496 03       		.byte	0x3
 1839 0497 00000000 		.4byte	ADC_countsPer10Volt
 1840 049b 05       		.uleb128 0x5
 1841 049c 7A040000 		.4byte	0x47a
 1842 04a0 00       		.byte	0
 1843              		.section	.debug_abbrev,"",%progbits
 1844              	.Ldebug_abbrev0:
 1845 0000 01       		.uleb128 0x1
 1846 0001 11       		.uleb128 0x11
 1847 0002 01       		.byte	0x1
 1848 0003 25       		.uleb128 0x25
 1849 0004 0E       		.uleb128 0xe
 1850 0005 13       		.uleb128 0x13
 1851 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 49


 1852 0007 03       		.uleb128 0x3
 1853 0008 0E       		.uleb128 0xe
 1854 0009 1B       		.uleb128 0x1b
 1855 000a 0E       		.uleb128 0xe
 1856 000b 55       		.uleb128 0x55
 1857 000c 17       		.uleb128 0x17
 1858 000d 11       		.uleb128 0x11
 1859 000e 01       		.uleb128 0x1
 1860 000f 10       		.uleb128 0x10
 1861 0010 17       		.uleb128 0x17
 1862 0011 00       		.byte	0
 1863 0012 00       		.byte	0
 1864 0013 02       		.uleb128 0x2
 1865 0014 24       		.uleb128 0x24
 1866 0015 00       		.byte	0
 1867 0016 0B       		.uleb128 0xb
 1868 0017 0B       		.uleb128 0xb
 1869 0018 3E       		.uleb128 0x3e
 1870 0019 0B       		.uleb128 0xb
 1871 001a 03       		.uleb128 0x3
 1872 001b 0E       		.uleb128 0xe
 1873 001c 00       		.byte	0
 1874 001d 00       		.byte	0
 1875 001e 03       		.uleb128 0x3
 1876 001f 24       		.uleb128 0x24
 1877 0020 00       		.byte	0
 1878 0021 0B       		.uleb128 0xb
 1879 0022 0B       		.uleb128 0xb
 1880 0023 3E       		.uleb128 0x3e
 1881 0024 0B       		.uleb128 0xb
 1882 0025 03       		.uleb128 0x3
 1883 0026 08       		.uleb128 0x8
 1884 0027 00       		.byte	0
 1885 0028 00       		.byte	0
 1886 0029 04       		.uleb128 0x4
 1887 002a 16       		.uleb128 0x16
 1888 002b 00       		.byte	0
 1889 002c 03       		.uleb128 0x3
 1890 002d 0E       		.uleb128 0xe
 1891 002e 3A       		.uleb128 0x3a
 1892 002f 0B       		.uleb128 0xb
 1893 0030 3B       		.uleb128 0x3b
 1894 0031 05       		.uleb128 0x5
 1895 0032 49       		.uleb128 0x49
 1896 0033 13       		.uleb128 0x13
 1897 0034 00       		.byte	0
 1898 0035 00       		.byte	0
 1899 0036 05       		.uleb128 0x5
 1900 0037 35       		.uleb128 0x35
 1901 0038 00       		.byte	0
 1902 0039 49       		.uleb128 0x49
 1903 003a 13       		.uleb128 0x13
 1904 003b 00       		.byte	0
 1905 003c 00       		.byte	0
 1906 003d 06       		.uleb128 0x6
 1907 003e 2E       		.uleb128 0x2e
 1908 003f 00       		.byte	0
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 50


 1909 0040 3F       		.uleb128 0x3f
 1910 0041 19       		.uleb128 0x19
 1911 0042 03       		.uleb128 0x3
 1912 0043 0E       		.uleb128 0xe
 1913 0044 3A       		.uleb128 0x3a
 1914 0045 0B       		.uleb128 0xb
 1915 0046 3B       		.uleb128 0x3b
 1916 0047 0B       		.uleb128 0xb
 1917 0048 27       		.uleb128 0x27
 1918 0049 19       		.uleb128 0x19
 1919 004a 11       		.uleb128 0x11
 1920 004b 01       		.uleb128 0x1
 1921 004c 12       		.uleb128 0x12
 1922 004d 06       		.uleb128 0x6
 1923 004e 40       		.uleb128 0x40
 1924 004f 18       		.uleb128 0x18
 1925 0050 9642     		.uleb128 0x2116
 1926 0052 19       		.uleb128 0x19
 1927 0053 00       		.byte	0
 1928 0054 00       		.byte	0
 1929 0055 07       		.uleb128 0x7
 1930 0056 2E       		.uleb128 0x2e
 1931 0057 01       		.byte	0x1
 1932 0058 3F       		.uleb128 0x3f
 1933 0059 19       		.uleb128 0x19
 1934 005a 03       		.uleb128 0x3
 1935 005b 0E       		.uleb128 0xe
 1936 005c 3A       		.uleb128 0x3a
 1937 005d 0B       		.uleb128 0xb
 1938 005e 3B       		.uleb128 0x3b
 1939 005f 0B       		.uleb128 0xb
 1940 0060 27       		.uleb128 0x27
 1941 0061 19       		.uleb128 0x19
 1942 0062 11       		.uleb128 0x11
 1943 0063 01       		.uleb128 0x1
 1944 0064 12       		.uleb128 0x12
 1945 0065 06       		.uleb128 0x6
 1946 0066 40       		.uleb128 0x40
 1947 0067 18       		.uleb128 0x18
 1948 0068 9642     		.uleb128 0x2116
 1949 006a 19       		.uleb128 0x19
 1950 006b 01       		.uleb128 0x1
 1951 006c 13       		.uleb128 0x13
 1952 006d 00       		.byte	0
 1953 006e 00       		.byte	0
 1954 006f 08       		.uleb128 0x8
 1955 0070 34       		.uleb128 0x34
 1956 0071 00       		.byte	0
 1957 0072 03       		.uleb128 0x3
 1958 0073 0E       		.uleb128 0xe
 1959 0074 3A       		.uleb128 0x3a
 1960 0075 0B       		.uleb128 0xb
 1961 0076 3B       		.uleb128 0x3b
 1962 0077 0B       		.uleb128 0xb
 1963 0078 49       		.uleb128 0x49
 1964 0079 13       		.uleb128 0x13
 1965 007a 02       		.uleb128 0x2
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 51


 1966 007b 18       		.uleb128 0x18
 1967 007c 00       		.byte	0
 1968 007d 00       		.byte	0
 1969 007e 09       		.uleb128 0x9
 1970 007f 01       		.uleb128 0x1
 1971 0080 01       		.byte	0x1
 1972 0081 49       		.uleb128 0x49
 1973 0082 13       		.uleb128 0x13
 1974 0083 01       		.uleb128 0x1
 1975 0084 13       		.uleb128 0x13
 1976 0085 00       		.byte	0
 1977 0086 00       		.byte	0
 1978 0087 0A       		.uleb128 0xa
 1979 0088 21       		.uleb128 0x21
 1980 0089 00       		.byte	0
 1981 008a 49       		.uleb128 0x49
 1982 008b 13       		.uleb128 0x13
 1983 008c 2F       		.uleb128 0x2f
 1984 008d 0B       		.uleb128 0xb
 1985 008e 00       		.byte	0
 1986 008f 00       		.byte	0
 1987 0090 0B       		.uleb128 0xb
 1988 0091 26       		.uleb128 0x26
 1989 0092 00       		.byte	0
 1990 0093 49       		.uleb128 0x49
 1991 0094 13       		.uleb128 0x13
 1992 0095 00       		.byte	0
 1993 0096 00       		.byte	0
 1994 0097 0C       		.uleb128 0xc
 1995 0098 2E       		.uleb128 0x2e
 1996 0099 00       		.byte	0
 1997 009a 3F       		.uleb128 0x3f
 1998 009b 19       		.uleb128 0x19
 1999 009c 03       		.uleb128 0x3
 2000 009d 0E       		.uleb128 0xe
 2001 009e 3A       		.uleb128 0x3a
 2002 009f 0B       		.uleb128 0xb
 2003 00a0 3B       		.uleb128 0x3b
 2004 00a1 05       		.uleb128 0x5
 2005 00a2 27       		.uleb128 0x27
 2006 00a3 19       		.uleb128 0x19
 2007 00a4 11       		.uleb128 0x11
 2008 00a5 01       		.uleb128 0x1
 2009 00a6 12       		.uleb128 0x12
 2010 00a7 06       		.uleb128 0x6
 2011 00a8 40       		.uleb128 0x40
 2012 00a9 18       		.uleb128 0x18
 2013 00aa 9642     		.uleb128 0x2116
 2014 00ac 19       		.uleb128 0x19
 2015 00ad 00       		.byte	0
 2016 00ae 00       		.byte	0
 2017 00af 0D       		.uleb128 0xd
 2018 00b0 2E       		.uleb128 0x2e
 2019 00b1 00       		.byte	0
 2020 00b2 3F       		.uleb128 0x3f
 2021 00b3 19       		.uleb128 0x19
 2022 00b4 03       		.uleb128 0x3
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 52


 2023 00b5 0E       		.uleb128 0xe
 2024 00b6 3A       		.uleb128 0x3a
 2025 00b7 0B       		.uleb128 0xb
 2026 00b8 3B       		.uleb128 0x3b
 2027 00b9 05       		.uleb128 0x5
 2028 00ba 27       		.uleb128 0x27
 2029 00bb 19       		.uleb128 0x19
 2030 00bc 11       		.uleb128 0x11
 2031 00bd 01       		.uleb128 0x1
 2032 00be 12       		.uleb128 0x12
 2033 00bf 06       		.uleb128 0x6
 2034 00c0 40       		.uleb128 0x40
 2035 00c1 18       		.uleb128 0x18
 2036 00c2 9742     		.uleb128 0x2117
 2037 00c4 19       		.uleb128 0x19
 2038 00c5 00       		.byte	0
 2039 00c6 00       		.byte	0
 2040 00c7 0E       		.uleb128 0xe
 2041 00c8 2E       		.uleb128 0x2e
 2042 00c9 01       		.byte	0x1
 2043 00ca 3F       		.uleb128 0x3f
 2044 00cb 19       		.uleb128 0x19
 2045 00cc 03       		.uleb128 0x3
 2046 00cd 0E       		.uleb128 0xe
 2047 00ce 3A       		.uleb128 0x3a
 2048 00cf 0B       		.uleb128 0xb
 2049 00d0 3B       		.uleb128 0x3b
 2050 00d1 05       		.uleb128 0x5
 2051 00d2 27       		.uleb128 0x27
 2052 00d3 19       		.uleb128 0x19
 2053 00d4 49       		.uleb128 0x49
 2054 00d5 13       		.uleb128 0x13
 2055 00d6 11       		.uleb128 0x11
 2056 00d7 01       		.uleb128 0x1
 2057 00d8 12       		.uleb128 0x12
 2058 00d9 06       		.uleb128 0x6
 2059 00da 40       		.uleb128 0x40
 2060 00db 18       		.uleb128 0x18
 2061 00dc 9742     		.uleb128 0x2117
 2062 00de 19       		.uleb128 0x19
 2063 00df 01       		.uleb128 0x1
 2064 00e0 13       		.uleb128 0x13
 2065 00e1 00       		.byte	0
 2066 00e2 00       		.byte	0
 2067 00e3 0F       		.uleb128 0xf
 2068 00e4 05       		.uleb128 0x5
 2069 00e5 00       		.byte	0
 2070 00e6 03       		.uleb128 0x3
 2071 00e7 0E       		.uleb128 0xe
 2072 00e8 3A       		.uleb128 0x3a
 2073 00e9 0B       		.uleb128 0xb
 2074 00ea 3B       		.uleb128 0x3b
 2075 00eb 05       		.uleb128 0x5
 2076 00ec 49       		.uleb128 0x49
 2077 00ed 13       		.uleb128 0x13
 2078 00ee 02       		.uleb128 0x2
 2079 00ef 18       		.uleb128 0x18
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 53


 2080 00f0 00       		.byte	0
 2081 00f1 00       		.byte	0
 2082 00f2 10       		.uleb128 0x10
 2083 00f3 34       		.uleb128 0x34
 2084 00f4 00       		.byte	0
 2085 00f5 03       		.uleb128 0x3
 2086 00f6 0E       		.uleb128 0xe
 2087 00f7 3A       		.uleb128 0x3a
 2088 00f8 0B       		.uleb128 0xb
 2089 00f9 3B       		.uleb128 0x3b
 2090 00fa 05       		.uleb128 0x5
 2091 00fb 49       		.uleb128 0x49
 2092 00fc 13       		.uleb128 0x13
 2093 00fd 02       		.uleb128 0x2
 2094 00fe 18       		.uleb128 0x18
 2095 00ff 00       		.byte	0
 2096 0100 00       		.byte	0
 2097 0101 11       		.uleb128 0x11
 2098 0102 2E       		.uleb128 0x2e
 2099 0103 01       		.byte	0x1
 2100 0104 3F       		.uleb128 0x3f
 2101 0105 19       		.uleb128 0x19
 2102 0106 03       		.uleb128 0x3
 2103 0107 0E       		.uleb128 0xe
 2104 0108 3A       		.uleb128 0x3a
 2105 0109 0B       		.uleb128 0xb
 2106 010a 3B       		.uleb128 0x3b
 2107 010b 05       		.uleb128 0x5
 2108 010c 27       		.uleb128 0x27
 2109 010d 19       		.uleb128 0x19
 2110 010e 49       		.uleb128 0x49
 2111 010f 13       		.uleb128 0x13
 2112 0110 11       		.uleb128 0x11
 2113 0111 01       		.uleb128 0x1
 2114 0112 12       		.uleb128 0x12
 2115 0113 06       		.uleb128 0x6
 2116 0114 40       		.uleb128 0x40
 2117 0115 18       		.uleb128 0x18
 2118 0116 9642     		.uleb128 0x2116
 2119 0118 19       		.uleb128 0x19
 2120 0119 01       		.uleb128 0x1
 2121 011a 13       		.uleb128 0x13
 2122 011b 00       		.byte	0
 2123 011c 00       		.byte	0
 2124 011d 12       		.uleb128 0x12
 2125 011e 2E       		.uleb128 0x2e
 2126 011f 01       		.byte	0x1
 2127 0120 3F       		.uleb128 0x3f
 2128 0121 19       		.uleb128 0x19
 2129 0122 03       		.uleb128 0x3
 2130 0123 0E       		.uleb128 0xe
 2131 0124 3A       		.uleb128 0x3a
 2132 0125 0B       		.uleb128 0xb
 2133 0126 3B       		.uleb128 0x3b
 2134 0127 05       		.uleb128 0x5
 2135 0128 27       		.uleb128 0x27
 2136 0129 19       		.uleb128 0x19
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 54


 2137 012a 11       		.uleb128 0x11
 2138 012b 01       		.uleb128 0x1
 2139 012c 12       		.uleb128 0x12
 2140 012d 06       		.uleb128 0x6
 2141 012e 40       		.uleb128 0x40
 2142 012f 18       		.uleb128 0x18
 2143 0130 9742     		.uleb128 0x2117
 2144 0132 19       		.uleb128 0x19
 2145 0133 01       		.uleb128 0x1
 2146 0134 13       		.uleb128 0x13
 2147 0135 00       		.byte	0
 2148 0136 00       		.byte	0
 2149 0137 13       		.uleb128 0x13
 2150 0138 2E       		.uleb128 0x2e
 2151 0139 01       		.byte	0x1
 2152 013a 3F       		.uleb128 0x3f
 2153 013b 19       		.uleb128 0x19
 2154 013c 03       		.uleb128 0x3
 2155 013d 0E       		.uleb128 0xe
 2156 013e 3A       		.uleb128 0x3a
 2157 013f 0B       		.uleb128 0xb
 2158 0140 3B       		.uleb128 0x3b
 2159 0141 05       		.uleb128 0x5
 2160 0142 27       		.uleb128 0x27
 2161 0143 19       		.uleb128 0x19
 2162 0144 11       		.uleb128 0x11
 2163 0145 01       		.uleb128 0x1
 2164 0146 12       		.uleb128 0x12
 2165 0147 06       		.uleb128 0x6
 2166 0148 40       		.uleb128 0x40
 2167 0149 18       		.uleb128 0x18
 2168 014a 9642     		.uleb128 0x2116
 2169 014c 19       		.uleb128 0x19
 2170 014d 01       		.uleb128 0x1
 2171 014e 13       		.uleb128 0x13
 2172 014f 00       		.byte	0
 2173 0150 00       		.byte	0
 2174 0151 14       		.uleb128 0x14
 2175 0152 34       		.uleb128 0x34
 2176 0153 00       		.byte	0
 2177 0154 03       		.uleb128 0x3
 2178 0155 0E       		.uleb128 0xe
 2179 0156 3A       		.uleb128 0x3a
 2180 0157 0B       		.uleb128 0xb
 2181 0158 3B       		.uleb128 0x3b
 2182 0159 0B       		.uleb128 0xb
 2183 015a 49       		.uleb128 0x49
 2184 015b 13       		.uleb128 0x13
 2185 015c 3F       		.uleb128 0x3f
 2186 015d 19       		.uleb128 0x19
 2187 015e 02       		.uleb128 0x2
 2188 015f 18       		.uleb128 0x18
 2189 0160 00       		.byte	0
 2190 0161 00       		.byte	0
 2191 0162 00       		.byte	0
 2192              		.section	.debug_aranges,"",%progbits
 2193 0000 A4000000 		.4byte	0xa4
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 55


 2194 0004 0200     		.2byte	0x2
 2195 0006 00000000 		.4byte	.Ldebug_info0
 2196 000a 04       		.byte	0x4
 2197 000b 00       		.byte	0
 2198 000c 0000     		.2byte	0
 2199 000e 0000     		.2byte	0
 2200 0010 00000000 		.4byte	.LFB2
 2201 0014 24000000 		.4byte	.LFE2-.LFB2
 2202 0018 00000000 		.4byte	.LFB3
 2203 001c 0C020000 		.4byte	.LFE3-.LFB3
 2204 0020 00000000 		.4byte	.LFB4
 2205 0024 38000000 		.4byte	.LFE4-.LFB4
 2206 0028 00000000 		.4byte	.LFB5
 2207 002c 18000000 		.4byte	.LFE5-.LFB5
 2208 0030 00000000 		.4byte	.LFB6
 2209 0034 1C000000 		.4byte	.LFE6-.LFB6
 2210 0038 00000000 		.4byte	.LFB7
 2211 003c 1C000000 		.4byte	.LFE7-.LFB7
 2212 0040 00000000 		.4byte	.LFB8
 2213 0044 48000000 		.4byte	.LFE8-.LFB8
 2214 0048 00000000 		.4byte	.LFB9
 2215 004c 44000000 		.4byte	.LFE9-.LFB9
 2216 0050 00000000 		.4byte	.LFB10
 2217 0054 1C000000 		.4byte	.LFE10-.LFB10
 2218 0058 00000000 		.4byte	.LFB11
 2219 005c 30000000 		.4byte	.LFE11-.LFB11
 2220 0060 00000000 		.4byte	.LFB12
 2221 0064 2C000000 		.4byte	.LFE12-.LFB12
 2222 0068 00000000 		.4byte	.LFB13
 2223 006c 1C000000 		.4byte	.LFE13-.LFB13
 2224 0070 00000000 		.4byte	.LFB14
 2225 0074 1C000000 		.4byte	.LFE14-.LFB14
 2226 0078 00000000 		.4byte	.LFB15
 2227 007c 30000000 		.4byte	.LFE15-.LFB15
 2228 0080 00000000 		.4byte	.LFB16
 2229 0084 2C000000 		.4byte	.LFE16-.LFB16
 2230 0088 00000000 		.4byte	.LFB17
 2231 008c A4000000 		.4byte	.LFE17-.LFB17
 2232 0090 00000000 		.4byte	.LFB18
 2233 0094 90000000 		.4byte	.LFE18-.LFB18
 2234 0098 00000000 		.4byte	.LFB19
 2235 009c 80000000 		.4byte	.LFE19-.LFB19
 2236 00a0 00000000 		.4byte	0
 2237 00a4 00000000 		.4byte	0
 2238              		.section	.debug_ranges,"",%progbits
 2239              	.Ldebug_ranges0:
 2240 0000 00000000 		.4byte	.LFB2
 2241 0004 24000000 		.4byte	.LFE2
 2242 0008 00000000 		.4byte	.LFB3
 2243 000c 0C020000 		.4byte	.LFE3
 2244 0010 00000000 		.4byte	.LFB4
 2245 0014 38000000 		.4byte	.LFE4
 2246 0018 00000000 		.4byte	.LFB5
 2247 001c 18000000 		.4byte	.LFE5
 2248 0020 00000000 		.4byte	.LFB6
 2249 0024 1C000000 		.4byte	.LFE6
 2250 0028 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 56


 2251 002c 1C000000 		.4byte	.LFE7
 2252 0030 00000000 		.4byte	.LFB8
 2253 0034 48000000 		.4byte	.LFE8
 2254 0038 00000000 		.4byte	.LFB9
 2255 003c 44000000 		.4byte	.LFE9
 2256 0040 00000000 		.4byte	.LFB10
 2257 0044 1C000000 		.4byte	.LFE10
 2258 0048 00000000 		.4byte	.LFB11
 2259 004c 30000000 		.4byte	.LFE11
 2260 0050 00000000 		.4byte	.LFB12
 2261 0054 2C000000 		.4byte	.LFE12
 2262 0058 00000000 		.4byte	.LFB13
 2263 005c 1C000000 		.4byte	.LFE13
 2264 0060 00000000 		.4byte	.LFB14
 2265 0064 1C000000 		.4byte	.LFE14
 2266 0068 00000000 		.4byte	.LFB15
 2267 006c 30000000 		.4byte	.LFE15
 2268 0070 00000000 		.4byte	.LFB16
 2269 0074 2C000000 		.4byte	.LFE16
 2270 0078 00000000 		.4byte	.LFB17
 2271 007c A4000000 		.4byte	.LFE17
 2272 0080 00000000 		.4byte	.LFB18
 2273 0084 90000000 		.4byte	.LFE18
 2274 0088 00000000 		.4byte	.LFB19
 2275 008c 80000000 		.4byte	.LFE19
 2276 0090 00000000 		.4byte	0
 2277 0094 00000000 		.4byte	0
 2278              		.section	.debug_line,"",%progbits
 2279              	.Ldebug_line0:
 2280 0000 A0020000 		.section	.debug_str,"MS",%progbits,1
 2280      02004200 
 2280      00000201 
 2280      FB0E0D00 
 2280      01010101 
 2281              	.LASF10:
 2282 0000 75696E74 		.ascii	"uint16\000"
 2282      313600
 2283              	.LASF48:
 2284 0007 61646347 		.ascii	"adcGain\000"
 2284      61696E00 
 2285              	.LASF23:
 2286 000f 636F756E 		.ascii	"counts\000"
 2286      747300
 2287              	.LASF54:
 2288 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2288      436F756E 
 2288      7473546F 
 2288      5F566F6C 
 2288      747300
 2289              	.LASF36:
 2290 0029 4144435F 		.ascii	"ADC_Init\000"
 2290      496E6974 
 2290      00
 2291              	.LASF7:
 2292 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2292      206C6F6E 
 2292      6720756E 
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 57


 2292      7369676E 
 2292      65642069 
 2293              	.LASF24:
 2294 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2294      496E7075 
 2294      7473506C 
 2294      6163656D 
 2294      656E7400 
 2295              	.LASF28:
 2296 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2296      53746172 
 2296      74436F6E 
 2296      76657274 
 2296      00
 2297              	.LASF6:
 2298 006e 6C6F6E67 		.ascii	"long long int\000"
 2298      206C6F6E 
 2298      6720696E 
 2298      7400
 2299              	.LASF0:
 2300 007c 7369676E 		.ascii	"signed char\000"
 2300      65642063 
 2300      68617200 
 2301              	.LASF30:
 2302 0088 73746174 		.ascii	"status\000"
 2302      757300
 2303              	.LASF13:
 2304 008f 696E7433 		.ascii	"int32\000"
 2304      3200
 2305              	.LASF25:
 2306 0095 4144435F 		.ascii	"ADC_Start\000"
 2306      53746172 
 2306      7400
 2307              	.LASF4:
 2308 009f 6C6F6E67 		.ascii	"long int\000"
 2308      20696E74 
 2308      00
 2309              	.LASF52:
 2310 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2310      436F756E 
 2310      7473546F 
 2310      5F75566F 
 2310      6C747300 
 2311              	.LASF59:
 2312 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2312      636F756E 
 2312      74735065 
 2312      72313056 
 2312      6F6C7400 
 2313              	.LASF9:
 2314 00d0 75696E74 		.ascii	"uint8\000"
 2314      3800
 2315              	.LASF16:
 2316 00d6 646F7562 		.ascii	"double\000"
 2316      6C6500
 2317              	.LASF11:
 2318 00dd 75696E74 		.ascii	"uint32\000"
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 58


 2318      333200
 2319              	.LASF38:
 2320 00e4 6D61736B 		.ascii	"mask\000"
 2320      00
 2321              	.LASF57:
 2322 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2322      696E6974 
 2322      56617200 
 2323              	.LASF33:
 2324 00f5 7265744D 		.ascii	"retMode\000"
 2324      6F646500 
 2325              	.LASF43:
 2326 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2326      5365744C 
 2326      696D6974 
 2326      4D61736B 
 2326      00
 2327              	.LASF8:
 2328 010e 756E7369 		.ascii	"unsigned int\000"
 2328      676E6564 
 2328      20696E74 
 2328      00
 2329              	.LASF53:
 2330 011b 75566F6C 		.ascii	"uVolts\000"
 2330      747300
 2331              	.LASF5:
 2332 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2332      20756E73 
 2332      69676E65 
 2332      6420696E 
 2332      7400
 2333              	.LASF44:
 2334 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2334      53657453 
 2334      61744D61 
 2334      736B00
 2335              	.LASF55:
 2336 0143 766F6C74 		.ascii	"volts\000"
 2336      7300
 2337              	.LASF22:
 2338 0149 746D7052 		.ascii	"tmpRegVal\000"
 2338      65675661 
 2338      6C00
 2339              	.LASF3:
 2340 0153 73686F72 		.ascii	"short unsigned int\000"
 2340      7420756E 
 2340      7369676E 
 2340      65642069 
 2340      6E7400
 2341              	.LASF29:
 2342 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2342      53746F70 
 2342      436F6E76 
 2342      65727400 
 2343              	.LASF51:
 2344 0176 6D566F6C 		.ascii	"mVolts\000"
 2344      747300
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 59


 2345              	.LASF19:
 2346 017d 72656733 		.ascii	"reg32\000"
 2346      3200
 2347              	.LASF14:
 2348 0183 666C6F61 		.ascii	"float32\000"
 2348      74333200 
 2349              	.LASF20:
 2350 018b 73697A65 		.ascii	"sizetype\000"
 2350      74797065 
 2350      00
 2351              	.LASF40:
 2352 0194 6C6F774C 		.ascii	"lowLimit\000"
 2352      696D6974 
 2352      00
 2353              	.LASF41:
 2354 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2354      53657448 
 2354      6967684C 
 2354      696D6974 
 2354      00
 2355              	.LASF31:
 2356 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2356      4973456E 
 2356      64436F6E 
 2356      76657273 
 2356      696F6E00 
 2357              	.LASF17:
 2358 01c2 696E7436 		.ascii	"int64\000"
 2358      3400
 2359              	.LASF37:
 2360 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2360      53657443 
 2360      68616E4D 
 2360      61736B00 
 2361              	.LASF47:
 2362 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2362      53657447 
 2362      61696E00 
 2363              	.LASF15:
 2364 01e4 666C6F61 		.ascii	"float\000"
 2364      7400
 2365              	.LASF42:
 2366 01ea 68696768 		.ascii	"highLimit\000"
 2366      4C696D69 
 2366      7400
 2367              	.LASF49:
 2368 01f4 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2368      436F756E 
 2368      7473546F 
 2368      5F6D566F 
 2368      6C747300 
 2369              	.LASF39:
 2370 0208 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2370      5365744C 
 2370      6F774C69 
 2370      6D697400 
 2371              	.LASF61:
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 60


 2372 0218 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2372      6E657261 
 2372      7465645F 
 2372      536F7572 
 2372      63655C50 
 2373              	.LASF1:
 2374 0237 756E7369 		.ascii	"unsigned char\000"
 2374      676E6564 
 2374      20636861 
 2374      7200
 2375              	.LASF58:
 2376 0245 4144435F 		.ascii	"ADC_offset\000"
 2376      6F666673 
 2376      657400
 2377              	.LASF2:
 2378 0250 73686F72 		.ascii	"short int\000"
 2378      7420696E 
 2378      7400
 2379              	.LASF27:
 2380 025a 4144435F 		.ascii	"ADC_Stop\000"
 2380      53746F70 
 2380      00
 2381              	.LASF21:
 2382 0263 63684E75 		.ascii	"chNum\000"
 2382      6D00
 2383              	.LASF34:
 2384 0269 6368616E 		.ascii	"chan\000"
 2384      00
 2385              	.LASF18:
 2386 026e 63686172 		.ascii	"char\000"
 2386      00
 2387              	.LASF56:
 2388 0273 4144435F 		.ascii	"ADC_channelsConfig\000"
 2388      6368616E 
 2388      6E656C73 
 2388      436F6E66 
 2388      696700
 2389              	.LASF46:
 2390 0286 6F666673 		.ascii	"offset\000"
 2390      657400
 2391              	.LASF50:
 2392 028d 61646343 		.ascii	"adcCounts\000"
 2392      6F756E74 
 2392      7300
 2393              	.LASF62:
 2394 0297 433A5C55 		.ascii	"C:\\Users\\passw\\Desktop\\Det pisse meget rigtigt!"
 2394      73657273 
 2394      5C706173 
 2394      73775C44 
 2394      65736B74 
 2395 02c6 5C414443 		.ascii	"\\ADC_med_filtre.cydsn\000"
 2395      5F6D6564 
 2395      5F66696C 
 2395      7472652E 
 2395      63796473 
 2396              	.LASF26:
 2397 02dc 4144435F 		.ascii	"ADC_Enable\000"
ARM GAS  C:\Users\passw\AppData\Local\Temp\ccopldfq.s 			page 61


 2397      456E6162 
 2397      6C6500
 2398              	.LASF12:
 2399 02e7 696E7431 		.ascii	"int16\000"
 2399      3600
 2400              	.LASF45:
 2401 02ed 4144435F 		.ascii	"ADC_SetOffset\000"
 2401      5365744F 
 2401      66667365 
 2401      7400
 2402              	.LASF60:
 2403 02fb 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2403      4320342E 
 2403      392E3320 
 2403      32303135 
 2403      30333033 
 2404 032e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2404      20726576 
 2404      6973696F 
 2404      6E203232 
 2404      31323230 
 2405 0361 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2405      66756E63 
 2405      74696F6E 
 2405      2D736563 
 2405      74696F6E 
 2406              	.LASF35:
 2407 0389 72657375 		.ascii	"result\000"
 2407      6C7400
 2408              	.LASF32:
 2409 0390 4144435F 		.ascii	"ADC_GetResult16\000"
 2409      47657452 
 2409      6573756C 
 2409      74313600 
 2410              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
