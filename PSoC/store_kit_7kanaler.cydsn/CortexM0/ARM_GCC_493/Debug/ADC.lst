ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,14,4
  24              		.comm	ADC_countsPer10Volt,28,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 28
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32 0008 00040000 		.word	1024
  33 000c 00040000 		.word	1024
  34 0010 00040000 		.word	1024
  35 0014 00040000 		.word	1024
  36 0018 00000000 		.word	0
  37              		.section	.text.ADC_Start,"ax",%progbits
  38              		.align	2
  39              		.global	ADC_Start
  40              		.code	16
  41              		.thumb_func
  42              		.type	ADC_Start, %function
  43              	ADC_Start:
  44              	.LFB2:
  45              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 2


  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u, 0x00000400u, 0x000004
  34:.\Generated_Source\PSoC4/ADC.c ****  0x00000400u, 0x00000000u };
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** 
  37:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  39:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC.c **** *
  41:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC.c **** *
  46:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC.c **** *
  49:.\Generated_Source\PSoC4/ADC.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC.c **** *
  52:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  58:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  62:.\Generated_Source\PSoC4/ADC.c **** *
  63:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  65:.\Generated_Source\PSoC4/ADC.c **** {
  46              		.loc 1 65 0
  47              		.cfi_startproc
  48 0000 80B5     		push	{r7, lr}
  49              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 3


  50              		.cfi_offset 7, -8
  51              		.cfi_offset 14, -4
  52 0002 00AF     		add	r7, sp, #0
  53              		.cfi_def_cfa_register 7
  66:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  54              		.loc 1 67 0
  55 0004 064B     		ldr	r3, .L3
  56 0006 1B78     		ldrb	r3, [r3]
  57 0008 002B     		cmp	r3, #0
  58 000a 04D1     		bne	.L2
  68:.\Generated_Source\PSoC4/ADC.c ****     {
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  59              		.loc 1 69 0
  60 000c FFF7FEFF 		bl	ADC_Init
  70:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  61              		.loc 1 70 0
  62 0010 034B     		ldr	r3, .L3
  63 0012 0122     		mov	r2, #1
  64 0014 1A70     		strb	r2, [r3]
  65              	.L2:
  71:.\Generated_Source\PSoC4/ADC.c ****     }
  72:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  66              		.loc 1 72 0
  67 0016 FFF7FEFF 		bl	ADC_Enable
  73:.\Generated_Source\PSoC4/ADC.c **** }
  68              		.loc 1 73 0
  69 001a BD46     		mov	sp, r7
  70              		@ sp needed
  71 001c 80BD     		pop	{r7, pc}
  72              	.L4:
  73 001e C046     		.align	2
  74              	.L3:
  75 0020 00000000 		.word	ADC_initVar
  76              		.cfi_endproc
  77              	.LFE2:
  78              		.size	ADC_Start, .-ADC_Start
  79              		.global	__aeabi_idiv
  80              		.section	.text.ADC_Init,"ax",%progbits
  81              		.align	2
  82              		.global	ADC_Init
  83              		.code	16
  84              		.thumb_func
  85              		.type	ADC_Init, %function
  86              	ADC_Init:
  87              	.LFB3:
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** 
  76:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  78:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC.c **** *
  80:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  84:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 4


  85:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC.c **** *
  88:.\Generated_Source\PSoC4/ADC.c **** * Return:
  89:.\Generated_Source\PSoC4/ADC.c **** *  None.
  90:.\Generated_Source\PSoC4/ADC.c **** *
  91:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC.c **** *
  94:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  96:.\Generated_Source\PSoC4/ADC.c **** {
  88              		.loc 1 96 0
  89              		.cfi_startproc
  90 0000 80B5     		push	{r7, lr}
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 84B0     		sub	sp, sp, #16
  95              		.cfi_def_cfa_offset 24
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC.c **** 
 101:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC.c ****         {
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 5


 132:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 135:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 136:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 137:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 138:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 139:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 140:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 141:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 142:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 143:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 144:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 145:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 146:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 147:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 148:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 149:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 150:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 151:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 152:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 153:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 154:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 155:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 156:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 157:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 158:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 159:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 160:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 161:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 162:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 163:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 164:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 165:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 166:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 167:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 168:.\Generated_Source\PSoC4/ADC.c ****         };
 169:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 170:.\Generated_Source\PSoC4/ADC.c **** 
 171:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 172:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 173:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  98              		.loc 1 173 0
  99 0006 0F20     		mov	r0, #15
 100 0008 0321     		mov	r1, #3
 101 000a FFF7FEFF 		bl	CyIntSetPriority
 174:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
 102              		.loc 1 174 0
 103 000e 624B     		ldr	r3, .L16
 104 0010 0F20     		mov	r0, #15
 105 0012 191C     		mov	r1, r3
 106 0014 FFF7FEFF 		bl	CyIntSetVector
 175:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 176:.\Generated_Source\PSoC4/ADC.c **** 
 177:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 107              		.loc 1 178 0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 6


 108 0018 604B     		ldr	r3, .L16+4
 109 001a 7F22     		mov	r2, #127
 110 001c 1A60     		str	r2, [r3]
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 180:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 181:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 181 0
 112 001e 604B     		ldr	r3, .L16+8
 113 0020 1B68     		ldr	r3, [r3]
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 179 0
 115 0022 002B     		cmp	r3, #0
 116 0024 01DA     		bge	.L6
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 179 0 is_stmt 0 discriminator 1
 118 0026 5F49     		ldr	r1, .L16+12
 119 0028 00E0     		b	.L7
 120              	.L6:
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 179 0 discriminator 2
 122 002a 5F49     		ldr	r1, .L16+16
 123              	.L7:
 179:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 179 0 discriminator 4
 125 002c 5F4B     		ldr	r3, .L16+20
 126 002e 5F4A     		ldr	r2, .L16+20
 127 0030 1268     		ldr	r2, [r2]
 128 0032 0A43     		orr	r2, r1
 129 0034 1A60     		str	r2, [r3]
 182:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 130              		.loc 1 183 0 is_stmt 1 discriminator 4
 131 0036 5E4B     		ldr	r3, .L16+24
 132 0038 5E4A     		ldr	r2, .L16+28
 133 003a 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 134              		.loc 1 184 0 discriminator 4
 135 003c 5E4B     		ldr	r3, .L16+32
 136 003e 5F4A     		ldr	r2, .L16+36
 137 0040 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 138              		.loc 1 185 0 discriminator 4
 139 0042 5F4B     		ldr	r3, .L16+40
 140 0044 0022     		mov	r2, #0
 141 0046 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 142              		.loc 1 186 0 discriminator 4
 143 0048 5E4B     		ldr	r3, .L16+44
 144 004a 5F4A     		ldr	r2, .L16+48
 145 004c 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 146              		.loc 1 187 0 discriminator 4
 147 004e 5F4B     		ldr	r3, .L16+52
 148 0050 5F4A     		ldr	r2, .L16+56
 149 0052 1A60     		str	r2, [r3]
 188:.\Generated_Source\PSoC4/ADC.c ****     
 189:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 7


 190:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 191:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 150              		.loc 1 191 0 discriminator 4
 151 0054 5F4B     		ldr	r3, .L16+60
 152 0056 5F4A     		ldr	r2, .L16+60
 153 0058 1268     		ldr	r2, [r2]
 154 005a 8021     		mov	r1, #128
 155 005c 4902     		lsl	r1, r1, #9
 156 005e 0A43     		orr	r2, r1
 157 0060 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 193:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 194:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 158              		.loc 1 194 0 discriminator 4
 159 0062 5D4B     		ldr	r3, .L16+64
 160 0064 5C4A     		ldr	r2, .L16+64
 161 0066 1268     		ldr	r2, [r2]
 162 0068 8021     		mov	r1, #128
 163 006a 4902     		lsl	r1, r1, #9
 164 006c 0A43     		orr	r2, r1
 165 006e 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 196:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 197:.\Generated_Source\PSoC4/ADC.c **** 
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 166              		.loc 1 198 0 discriminator 4
 167 0070 5A4B     		ldr	r3, .L16+68
 168 0072 0022     		mov	r2, #0
 169 0074 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 170              		.loc 1 199 0 discriminator 4
 171 0076 5A4B     		ldr	r3, .L16+72
 172 0078 0022     		mov	r2, #0
 173 007a 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 174              		.loc 1 200 0 discriminator 4
 175 007c 594B     		ldr	r3, .L16+76
 176 007e 0122     		mov	r2, #1
 177 0080 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC.c **** 
 202:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 203:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 204:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 205:.\Generated_Source\PSoC4/ADC.c **** 
 206:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 178              		.loc 1 207 0 discriminator 4
 179 0082 594B     		ldr	r3, .L16+80
 180 0084 1B68     		ldr	r3, [r3]
 181 0086 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 182              		.loc 1 208 0 discriminator 4
 183 0088 7B68     		ldr	r3, [r7, #4]
 184 008a 584A     		ldr	r2, .L16+84
 185 008c 1340     		and	r3, r2
 186 008e 7B60     		str	r3, [r7, #4]
 209:.\Generated_Source\PSoC4/ADC.c ****     
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 8


 210:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 211:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 212:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 213:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 216:.\Generated_Source\PSoC4/ADC.c ****     #else
 217:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 218:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 219:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 220:.\Generated_Source\PSoC4/ADC.c ****         #else
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 187              		.loc 1 221 0 discriminator 4
 188 0090 7B68     		ldr	r3, [r7, #4]
 189 0092 8022     		mov	r2, #128
 190 0094 9205     		lsl	r2, r2, #22
 191 0096 1343     		orr	r3, r2
 192 0098 7B60     		str	r3, [r7, #4]
 222:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 193              		.loc 1 222 0 discriminator 4
 194 009a 7B68     		ldr	r3, [r7, #4]
 195 009c 0122     		mov	r2, #1
 196 009e 9343     		bic	r3, r2
 197 00a0 7B60     		str	r3, [r7, #4]
 223:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 224:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 225:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 226:.\Generated_Source\PSoC4/ADC.c ****     
 227:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 198              		.loc 1 227 0 discriminator 4
 199 00a2 514B     		ldr	r3, .L16+80
 200 00a4 7A68     		ldr	r2, [r7, #4]
 201 00a6 1A60     		str	r2, [r3]
 228:.\Generated_Source\PSoC4/ADC.c **** 
 229:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 230:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 231:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 232:.\Generated_Source\PSoC4/ADC.c **** 
 233:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 202              		.loc 1 233 0 discriminator 4
 203 00a8 0023     		mov	r3, #0
 204 00aa FB60     		str	r3, [r7, #12]
 205 00ac 6EE0     		b	.L8
 206              	.L15:
 234:.\Generated_Source\PSoC4/ADC.c ****     {
 235:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 207              		.loc 1 235 0
 208 00ae 504B     		ldr	r3, .L16+88
 209 00b0 FA68     		ldr	r2, [r7, #12]
 210 00b2 9200     		lsl	r2, r2, #2
 211 00b4 D258     		ldr	r2, [r2, r3]
 212 00b6 DC23     		mov	r3, #220
 213 00b8 9B01     		lsl	r3, r3, #6
 214 00ba 1340     		and	r3, r2
 215 00bc 7B60     		str	r3, [r7, #4]
 236:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 237:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 9


 216              		.loc 1 237 0
 217 00be 4D4A     		ldr	r2, .L16+92
 218 00c0 FB68     		ldr	r3, [r7, #12]
 219 00c2 D318     		add	r3, r2, r3
 220 00c4 1B78     		ldrb	r3, [r3]
 221 00c6 1A1C     		mov	r2, r3
 222 00c8 7B68     		ldr	r3, [r7, #4]
 223 00ca 1343     		orr	r3, r2
 224 00cc 7B60     		str	r3, [r7, #4]
 238:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         
 241:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 243:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 244:.\Generated_Source\PSoC4/ADC.c ****         */
 245:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 246:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 247:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 251:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 252:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 253:.\Generated_Source\PSoC4/ADC.c ****         {
 254:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 225              		.loc 1 254 0
 226 00ce FB68     		ldr	r3, [r7, #12]
 227 00d0 9B00     		lsl	r3, r3, #2
 228 00d2 494A     		ldr	r2, .L16+96
 229 00d4 9446     		mov	ip, r2
 230 00d6 6344     		add	r3, r3, ip
 231 00d8 7A68     		ldr	r2, [r7, #4]
 232 00da 1A60     		str	r2, [r3]
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 233              		.loc 1 256 0
 234 00dc 444B     		ldr	r3, .L16+88
 235 00de FA68     		ldr	r2, [r7, #12]
 236 00e0 9200     		lsl	r2, r2, #2
 237 00e2 D358     		ldr	r3, [r2, r3]
 238 00e4 0122     		mov	r2, #1
 239 00e6 1340     		and	r3, r2
 240 00e8 09D0     		beq	.L9
 257:.\Generated_Source\PSoC4/ADC.c ****             {
 258:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 241              		.loc 1 258 0
 242 00ea 3C4B     		ldr	r3, .L16+68
 243 00ec 3B4A     		ldr	r2, .L16+68
 244 00ee 1268     		ldr	r2, [r2]
 245 00f0 F968     		ldr	r1, [r7, #12]
 246 00f2 0120     		mov	r0, #1
 247 00f4 8840     		lsl	r0, r0, r1
 248 00f6 011C     		mov	r1, r0
 249 00f8 89B2     		uxth	r1, r1
 250 00fa 0A43     		orr	r2, r1
 251 00fc 1A60     		str	r2, [r3]
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 10


 252              	.L9:
 259:.\Generated_Source\PSoC4/ADC.c ****             }
 260:.\Generated_Source\PSoC4/ADC.c **** 
 261:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 253              		.loc 1 261 0
 254 00fe 3C4B     		ldr	r3, .L16+88
 255 0100 FA68     		ldr	r2, [r7, #12]
 256 0102 9200     		lsl	r2, r2, #2
 257 0104 D358     		ldr	r3, [r2, r3]
 258 0106 0222     		mov	r2, #2
 259 0108 1340     		and	r3, r2
 260 010a 09D0     		beq	.L10
 262:.\Generated_Source\PSoC4/ADC.c ****             {
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 261              		.loc 1 263 0
 262 010c 344B     		ldr	r3, .L16+72
 263 010e 344A     		ldr	r2, .L16+72
 264 0110 1268     		ldr	r2, [r2]
 265 0112 F968     		ldr	r1, [r7, #12]
 266 0114 0120     		mov	r0, #1
 267 0116 8840     		lsl	r0, r0, r1
 268 0118 011C     		mov	r1, r0
 269 011a 89B2     		uxth	r1, r1
 270 011c 0A43     		orr	r2, r1
 271 011e 1A60     		str	r2, [r3]
 272              	.L10:
 264:.\Generated_Source\PSoC4/ADC.c ****             }
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 267:.\Generated_Source\PSoC4/ADC.c ****             else
 268:.\Generated_Source\PSoC4/ADC.c ****             {
 269:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 270:.\Generated_Source\PSoC4/ADC.c **** 
 271:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 272:.\Generated_Source\PSoC4/ADC.c ****                 {
 273:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 274:.\Generated_Source\PSoC4/ADC.c ****                 }
 275:.\Generated_Source\PSoC4/ADC.c **** 
 276:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 277:.\Generated_Source\PSoC4/ADC.c ****                 {
 278:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 279:.\Generated_Source\PSoC4/ADC.c ****                 }
 280:.\Generated_Source\PSoC4/ADC.c ****             }
 281:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 282:.\Generated_Source\PSoC4/ADC.c **** 
 283:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 273              		.loc 1 283 0
 274 0120 334B     		ldr	r3, .L16+88
 275 0122 FA68     		ldr	r2, [r7, #12]
 276 0124 9200     		lsl	r2, r2, #2
 277 0126 D258     		ldr	r2, [r2, r3]
 278 0128 8023     		mov	r3, #128
 279 012a 9B00     		lsl	r3, r3, #2
 280 012c 1340     		and	r3, r2
 281 012e 03D0     		beq	.L11
 284:.\Generated_Source\PSoC4/ADC.c ****         {
 285:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 11


 282              		.loc 1 285 0
 283 0130 8023     		mov	r3, #128
 284 0132 5B00     		lsl	r3, r3, #1
 285 0134 BB60     		str	r3, [r7, #8]
 286 0136 02E0     		b	.L12
 287              	.L11:
 286:.\Generated_Source\PSoC4/ADC.c ****         }
 287:.\Generated_Source\PSoC4/ADC.c ****         else
 288:.\Generated_Source\PSoC4/ADC.c ****         {
 289:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 288              		.loc 1 289 0
 289 0138 8023     		mov	r3, #128
 290 013a 5B01     		lsl	r3, r3, #5
 291 013c BB60     		str	r3, [r7, #8]
 292              	.L12:
 290:.\Generated_Source\PSoC4/ADC.c ****         }
 291:.\Generated_Source\PSoC4/ADC.c **** 
 292:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 293              		.loc 1 292 0
 294 013e 2C4B     		ldr	r3, .L16+88
 295 0140 FA68     		ldr	r2, [r7, #12]
 296 0142 9200     		lsl	r2, r2, #2
 297 0144 D258     		ldr	r2, [r2, r3]
 298 0146 8023     		mov	r3, #128
 299 0148 5B00     		lsl	r3, r3, #1
 300 014a 1340     		and	r3, r2
 301 014c 05D1     		bne	.L13
 293:.\Generated_Source\PSoC4/ADC.c ****         {
 294:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 295:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 296:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 297:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 298:.\Generated_Source\PSoC4/ADC.c ****             #else
 299:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 302              		.loc 1 299 0
 303 014e 2B4B     		ldr	r3, .L16+100
 304 0150 FA68     		ldr	r2, [r7, #12]
 305 0152 5200     		lsl	r2, r2, #1
 306 0154 0021     		mov	r1, #0
 307 0156 D152     		strh	r1, [r2, r3]
 308 0158 04E0     		b	.L14
 309              	.L13:
 300:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 301:.\Generated_Source\PSoC4/ADC.c ****         }
 302:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 303:.\Generated_Source\PSoC4/ADC.c ****         {
 304:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 305:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 306:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 307:.\Generated_Source\PSoC4/ADC.c ****             #else
 308:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 310              		.loc 1 308 0
 311 015a 284B     		ldr	r3, .L16+100
 312 015c FA68     		ldr	r2, [r7, #12]
 313 015e 5200     		lsl	r2, r2, #1
 314 0160 0021     		mov	r1, #0
 315 0162 D152     		strh	r1, [r2, r3]
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 12


 316              	.L14:
 309:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 310:.\Generated_Source\PSoC4/ADC.c ****         }
 311:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 312:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 317              		.loc 1 312 0 discriminator 2
 318 0164 BB68     		ldr	r3, [r7, #8]
 319 0166 264A     		ldr	r2, .L16+104
 320 0168 5343     		mul	r3, r2
 321 016a 264A     		ldr	r2, .L16+108
 322 016c 9446     		mov	ip, r2
 323 016e 6344     		add	r3, r3, ip
 313:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 324              		.loc 1 313 0 discriminator 2
 325 0170 181C     		mov	r0, r3
 326 0172 2349     		ldr	r1, .L16+104
 327 0174 FFF7FEFF 		bl	__aeabi_idiv
 328 0178 031C     		mov	r3, r0
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 329              		.loc 1 312 0 discriminator 2
 330 017a 9BB2     		uxth	r3, r3
 331 017c 19B2     		sxth	r1, r3
 332 017e 224B     		ldr	r3, .L16+112
 333 0180 FA68     		ldr	r2, [r7, #12]
 334 0182 9200     		lsl	r2, r2, #2
 335 0184 D150     		str	r1, [r2, r3]
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 336              		.loc 1 233 0 discriminator 2
 337 0186 FB68     		ldr	r3, [r7, #12]
 338 0188 0133     		add	r3, r3, #1
 339 018a FB60     		str	r3, [r7, #12]
 340              	.L8:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 341              		.loc 1 233 0 is_stmt 0 discriminator 1
 342 018c FB68     		ldr	r3, [r7, #12]
 343 018e 062B     		cmp	r3, #6
 344 0190 8DD9     		bls	.L15
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 345              		.loc 1 315 0 is_stmt 1
 346 0192 BD46     		mov	sp, r7
 347 0194 04B0     		add	sp, sp, #16
 348              		@ sp needed
 349 0196 80BD     		pop	{r7, pc}
 350              	.L17:
 351              		.align	2
 352              	.L16:
 353 0198 00000000 		.word	ADC_ISR
 354 019c 20003A40 		.word	1077542944
 355 01a0 80033A40 		.word	1077543808
 356 01a4 70201013 		.word	319823984
 357 01a8 70200013 		.word	318775408
 358 01ac 00003A40 		.word	1077542912
 359 01b0 04003A40 		.word	1077542916
 360 01b4 BC000080 		.word	-2147483460
 361 01b8 18003A40 		.word	1077542936
 362 01bc 00000908 		.word	134807552
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 13


 363 01c0 1C003A40 		.word	1077542940
 364 01c4 10003A40 		.word	1077542928
 365 01c8 96000400 		.word	262294
 366 01cc 14003A40 		.word	1077542932
 367 01d0 04000400 		.word	262148
 368 01d4 00033A40 		.word	1077543680
 369 01d8 40033A40 		.word	1077543744
 370 01dc 28023A40 		.word	1077543464
 371 01e0 38023A40 		.word	1077543480
 372 01e4 18023A40 		.word	1077543448
 373 01e8 30003A40 		.word	1077542960
 374 01ec FFFFFFDF 		.word	-536870913
 375 01f0 00000000 		.word	ADC_channelsConfig
 376 01f4 1C000000 		.word	ADC_InputsPlacement.4768
 377 01f8 80003A40 		.word	1077543040
 378 01fc 00000000 		.word	ADC_offset
 379 0200 10270000 		.word	10000
 380 0204 88130000 		.word	5000
 381 0208 00000000 		.word	ADC_countsPer10Volt
 382              		.cfi_endproc
 383              	.LFE3:
 384              		.size	ADC_Init, .-ADC_Init
 385              		.section	.text.ADC_Enable,"ax",%progbits
 386              		.align	2
 387              		.global	ADC_Enable
 388              		.code	16
 389              		.thumb_func
 390              		.type	ADC_Enable, %function
 391              	ADC_Enable:
 392              	.LFB4:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 319:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 320:.\Generated_Source\PSoC4/ADC.c **** *
 321:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 322:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 323:.\Generated_Source\PSoC4/ADC.c **** *
 324:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 325:.\Generated_Source\PSoC4/ADC.c **** *  None.
 326:.\Generated_Source\PSoC4/ADC.c **** *
 327:.\Generated_Source\PSoC4/ADC.c **** * Return:
 328:.\Generated_Source\PSoC4/ADC.c **** *  None.
 329:.\Generated_Source\PSoC4/ADC.c **** *
 330:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 331:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 332:.\Generated_Source\PSoC4/ADC.c **** {
 393              		.loc 1 332 0
 394              		.cfi_startproc
 395 0000 80B5     		push	{r7, lr}
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
 333:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 401              		.loc 1 333 0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 14


 402 0004 0A4B     		ldr	r3, .L21
 403 0006 1B68     		ldr	r3, [r3]
 404 0008 002B     		cmp	r3, #0
 405 000a 0EDB     		blt	.L18
 334:.\Generated_Source\PSoC4/ADC.c ****     {
 335:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 336:.\Generated_Source\PSoC4/ADC.c **** 
 337:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 406              		.loc 1 337 0
 407 000c C046     		mov	r8, r8
 408              	.L20:
 409              		.loc 1 337 0 is_stmt 0 discriminator 1
 410 000e 094B     		ldr	r3, .L21+4
 411 0010 1B68     		ldr	r3, [r3]
 412 0012 002B     		cmp	r3, #0
 413 0014 FBDB     		blt	.L20
 338:.\Generated_Source\PSoC4/ADC.c ****             {
 339:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 340:.\Generated_Source\PSoC4/ADC.c ****             }
 341:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 342:.\Generated_Source\PSoC4/ADC.c ****         
 343:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 414              		.loc 1 343 0 is_stmt 1
 415 0016 064B     		ldr	r3, .L21
 416 0018 054A     		ldr	r2, .L21
 417 001a 1268     		ldr	r2, [r2]
 418 001c 8021     		mov	r1, #128
 419 001e 0906     		lsl	r1, r1, #24
 420 0020 0A43     		orr	r2, r1
 421 0022 1A60     		str	r2, [r3]
 344:.\Generated_Source\PSoC4/ADC.c ****         
 345:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 346:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 422              		.loc 1 346 0
 423 0024 0A20     		mov	r0, #10
 424 0026 FFF7FEFF 		bl	CyDelayUs
 425              	.L18:
 347:.\Generated_Source\PSoC4/ADC.c ****     }
 348:.\Generated_Source\PSoC4/ADC.c **** }
 426              		.loc 1 348 0
 427 002a BD46     		mov	sp, r7
 428              		@ sp needed
 429 002c 80BD     		pop	{r7, pc}
 430              	.L22:
 431 002e C046     		.align	2
 432              	.L21:
 433 0030 00003A40 		.word	1077542912
 434 0034 08023A40 		.word	1077543432
 435              		.cfi_endproc
 436              	.LFE4:
 437              		.size	ADC_Enable, .-ADC_Enable
 438              		.section	.text.ADC_Stop,"ax",%progbits
 439              		.align	2
 440              		.global	ADC_Stop
 441              		.code	16
 442              		.thumb_func
 443              		.type	ADC_Stop, %function
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 15


 444              	ADC_Stop:
 445              	.LFB5:
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** 
 351:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 352:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 353:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 356:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 357:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 358:.\Generated_Source\PSoC4/ADC.c **** *
 359:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 360:.\Generated_Source\PSoC4/ADC.c **** *  None.
 361:.\Generated_Source\PSoC4/ADC.c **** *
 362:.\Generated_Source\PSoC4/ADC.c **** * Return:
 363:.\Generated_Source\PSoC4/ADC.c **** *  None.
 364:.\Generated_Source\PSoC4/ADC.c **** *
 365:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 366:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 367:.\Generated_Source\PSoC4/ADC.c **** {
 446              		.loc 1 367 0
 447              		.cfi_startproc
 448 0000 80B5     		push	{r7, lr}
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 368:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 454              		.loc 1 368 0
 455 0004 034B     		ldr	r3, .L24
 456 0006 034A     		ldr	r2, .L24
 457 0008 1268     		ldr	r2, [r2]
 458 000a 5200     		lsl	r2, r2, #1
 459 000c 5208     		lsr	r2, r2, #1
 460 000e 1A60     		str	r2, [r3]
 369:.\Generated_Source\PSoC4/ADC.c **** }
 461              		.loc 1 369 0
 462 0010 BD46     		mov	sp, r7
 463              		@ sp needed
 464 0012 80BD     		pop	{r7, pc}
 465              	.L25:
 466              		.align	2
 467              	.L24:
 468 0014 00003A40 		.word	1077542912
 469              		.cfi_endproc
 470              	.LFE5:
 471              		.size	ADC_Stop, .-ADC_Stop
 472              		.section	.text.ADC_StartConvert,"ax",%progbits
 473              		.align	2
 474              		.global	ADC_StartConvert
 475              		.code	16
 476              		.thumb_func
 477              		.type	ADC_StartConvert, %function
 478              	ADC_StartConvert:
 479              	.LFB6:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 16


 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** 
 372:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 374:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 375:.\Generated_Source\PSoC4/ADC.c **** *
 376:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 377:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 378:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 379:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 380:.\Generated_Source\PSoC4/ADC.c **** *
 381:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 382:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 383:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 384:.\Generated_Source\PSoC4/ADC.c **** *
 385:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 386:.\Generated_Source\PSoC4/ADC.c **** *  None.
 387:.\Generated_Source\PSoC4/ADC.c **** *
 388:.\Generated_Source\PSoC4/ADC.c **** * Return:
 389:.\Generated_Source\PSoC4/ADC.c **** *  None.
 390:.\Generated_Source\PSoC4/ADC.c **** *
 391:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 392:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 393:.\Generated_Source\PSoC4/ADC.c **** {
 480              		.loc 1 393 0
 481              		.cfi_startproc
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 394:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 395:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 488              		.loc 1 395 0
 489 0004 044B     		ldr	r3, .L27
 490 0006 044A     		ldr	r2, .L27
 491 0008 1268     		ldr	r2, [r2]
 492 000a 8021     		mov	r1, #128
 493 000c 4902     		lsl	r1, r1, #9
 494 000e 0A43     		orr	r2, r1
 495 0010 1A60     		str	r2, [r3]
 396:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 397:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 398:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 399:.\Generated_Source\PSoC4/ADC.c **** 
 400:.\Generated_Source\PSoC4/ADC.c **** }
 496              		.loc 1 400 0
 497 0012 BD46     		mov	sp, r7
 498              		@ sp needed
 499 0014 80BD     		pop	{r7, pc}
 500              	.L28:
 501 0016 C046     		.align	2
 502              	.L27:
 503 0018 04003A40 		.word	1077542916
 504              		.cfi_endproc
 505              	.LFE6:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 17


 506              		.size	ADC_StartConvert, .-ADC_StartConvert
 507              		.section	.text.ADC_StopConvert,"ax",%progbits
 508              		.align	2
 509              		.global	ADC_StopConvert
 510              		.code	16
 511              		.thumb_func
 512              		.type	ADC_StopConvert, %function
 513              	ADC_StopConvert:
 514              	.LFB7:
 401:.\Generated_Source\PSoC4/ADC.c **** 
 402:.\Generated_Source\PSoC4/ADC.c **** 
 403:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 404:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 405:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 406:.\Generated_Source\PSoC4/ADC.c **** *
 407:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 408:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 411:.\Generated_Source\PSoC4/ADC.c **** *  None.
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  None.
 415:.\Generated_Source\PSoC4/ADC.c **** *
 416:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 417:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 418:.\Generated_Source\PSoC4/ADC.c **** {
 515              		.loc 1 418 0
 516              		.cfi_startproc
 517 0000 80B5     		push	{r7, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
 419:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 420:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 523              		.loc 1 420 0
 524 0004 034B     		ldr	r3, .L30
 525 0006 034A     		ldr	r2, .L30
 526 0008 1268     		ldr	r2, [r2]
 527 000a 0349     		ldr	r1, .L30+4
 528 000c 0A40     		and	r2, r1
 529 000e 1A60     		str	r2, [r3]
 421:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 422:.\Generated_Source\PSoC4/ADC.c **** }
 530              		.loc 1 422 0
 531 0010 BD46     		mov	sp, r7
 532              		@ sp needed
 533 0012 80BD     		pop	{r7, pc}
 534              	.L31:
 535              		.align	2
 536              	.L30:
 537 0014 04003A40 		.word	1077542916
 538 0018 FFFFFEFF 		.word	-65537
 539              		.cfi_endproc
 540              	.LFE7:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 18


 541              		.size	ADC_StopConvert, .-ADC_StopConvert
 542              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 543              		.align	2
 544              		.global	ADC_IsEndConversion
 545              		.code	16
 546              		.thumb_func
 547              		.type	ADC_IsEndConversion, %function
 548              	ADC_IsEndConversion:
 549              	.LFB8:
 423:.\Generated_Source\PSoC4/ADC.c **** 
 424:.\Generated_Source\PSoC4/ADC.c **** 
 425:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 426:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 427:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 428:.\Generated_Source\PSoC4/ADC.c **** *
 429:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 430:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 431:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 432:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 433:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 434:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 435:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 436:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 437:.\Generated_Source\PSoC4/ADC.c **** *
 438:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 441:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 442:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 443:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 444:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 445:.\Generated_Source\PSoC4/ADC.c **** *
 446:.\Generated_Source\PSoC4/ADC.c **** * Return:
 447:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 448:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 449:.\Generated_Source\PSoC4/ADC.c **** *
 450:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 451:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 452:.\Generated_Source\PSoC4/ADC.c **** {
 550              		.loc 1 452 0
 551              		.cfi_startproc
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 84B0     		sub	sp, sp, #16
 557              		.cfi_def_cfa_offset 24
 558 0004 00AF     		add	r7, sp, #0
 559              		.cfi_def_cfa_register 7
 560 0006 7860     		str	r0, [r7, #4]
 453:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 561              		.loc 1 453 0
 562 0008 0023     		mov	r3, #0
 563 000a FB60     		str	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** 
 455:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 564              		.loc 1 455 0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 19


 565 000c 7B68     		ldr	r3, [r7, #4]
 566 000e 0322     		mov	r2, #3
 567 0010 1340     		and	r3, r2
 568 0012 11D0     		beq	.L33
 569              	.L35:
 456:.\Generated_Source\PSoC4/ADC.c ****     {
 457:.\Generated_Source\PSoC4/ADC.c ****         do
 458:.\Generated_Source\PSoC4/ADC.c ****         {
 459:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 570              		.loc 1 459 0 discriminator 2
 571 0014 0B4B     		ldr	r3, .L37
 572 0016 1B68     		ldr	r3, [r3]
 573 0018 0122     		mov	r2, #1
 574 001a 1340     		and	r3, r2
 575 001c FB60     		str	r3, [r7, #12]
 460:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 576              		.loc 1 460 0 discriminator 2
 577 001e FB68     		ldr	r3, [r7, #12]
 578 0020 002B     		cmp	r3, #0
 579 0022 03D1     		bne	.L34
 580              		.loc 1 460 0 is_stmt 0 discriminator 1
 581 0024 7B68     		ldr	r3, [r7, #4]
 582 0026 0222     		mov	r2, #2
 583 0028 1340     		and	r3, r2
 584 002a F3D1     		bne	.L35
 585              	.L34:
 461:.\Generated_Source\PSoC4/ADC.c **** 
 462:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 586              		.loc 1 462 0 is_stmt 1
 587 002c FB68     		ldr	r3, [r7, #12]
 588 002e 002B     		cmp	r3, #0
 589 0030 02D0     		beq	.L33
 463:.\Generated_Source\PSoC4/ADC.c ****         {
 464:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 465:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 590              		.loc 1 465 0
 591 0032 044B     		ldr	r3, .L37
 592 0034 0122     		mov	r2, #1
 593 0036 1A60     		str	r2, [r3]
 594              	.L33:
 466:.\Generated_Source\PSoC4/ADC.c ****         }
 467:.\Generated_Source\PSoC4/ADC.c ****     }
 468:.\Generated_Source\PSoC4/ADC.c **** 
 469:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 470:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 471:.\Generated_Source\PSoC4/ADC.c ****         {
 472:.\Generated_Source\PSoC4/ADC.c ****             do
 473:.\Generated_Source\PSoC4/ADC.c ****             {
 474:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 475:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 476:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 477:.\Generated_Source\PSoC4/ADC.c **** 
 478:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 479:.\Generated_Source\PSoC4/ADC.c ****             {
 480:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 481:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 482:.\Generated_Source\PSoC4/ADC.c ****             }
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 20


 483:.\Generated_Source\PSoC4/ADC.c ****         }
 484:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 485:.\Generated_Source\PSoC4/ADC.c **** 
 486:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 595              		.loc 1 486 0
 596 0038 FB68     		ldr	r3, [r7, #12]
 487:.\Generated_Source\PSoC4/ADC.c **** }
 597              		.loc 1 487 0
 598 003a 181C     		mov	r0, r3
 599 003c BD46     		mov	sp, r7
 600 003e 04B0     		add	sp, sp, #16
 601              		@ sp needed
 602 0040 80BD     		pop	{r7, pc}
 603              	.L38:
 604 0042 C046     		.align	2
 605              	.L37:
 606 0044 10023A40 		.word	1077543440
 607              		.cfi_endproc
 608              	.LFE8:
 609              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 610              		.section	.text.ADC_GetResult16,"ax",%progbits
 611              		.align	2
 612              		.global	ADC_GetResult16
 613              		.code	16
 614              		.thumb_func
 615              		.type	ADC_GetResult16, %function
 616              	ADC_GetResult16:
 617              	.LFB9:
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 491:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 492:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 493:.\Generated_Source\PSoC4/ADC.c **** *
 494:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 495:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 496:.\Generated_Source\PSoC4/ADC.c **** *
 497:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 498:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 499:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Return:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 505:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 506:.\Generated_Source\PSoC4/ADC.c **** {
 618              		.loc 1 506 0
 619              		.cfi_startproc
 620 0000 80B5     		push	{r7, lr}
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 84B0     		sub	sp, sp, #16
 625              		.cfi_def_cfa_offset 24
 626 0004 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 21


 628 0006 7860     		str	r0, [r7, #4]
 507:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 508:.\Generated_Source\PSoC4/ADC.c **** 
 509:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 510:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 629              		.loc 1 510 0
 630 0008 7B68     		ldr	r3, [r7, #4]
 631 000a 062B     		cmp	r3, #6
 632 000c 02D9     		bls	.L40
 633              		.loc 1 510 0 is_stmt 0 discriminator 1
 634 000e 0020     		mov	r0, #0
 635 0010 FFF7FEFF 		bl	CyHalt
 636              	.L40:
 511:.\Generated_Source\PSoC4/ADC.c **** 
 512:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 637              		.loc 1 512 0 is_stmt 1
 638 0014 7B68     		ldr	r3, [r7, #4]
 639 0016 062B     		cmp	r3, #6
 640 0018 09D8     		bhi	.L41
 513:.\Generated_Source\PSoC4/ADC.c ****     {
 514:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 641              		.loc 1 514 0
 642 001a 7B68     		ldr	r3, [r7, #4]
 643 001c 9B00     		lsl	r3, r3, #2
 644 001e 084A     		ldr	r2, .L44
 645 0020 9446     		mov	ip, r2
 646 0022 6344     		add	r3, r3, ip
 647 0024 1B68     		ldr	r3, [r3]
 648 0026 1B04     		lsl	r3, r3, #16
 649 0028 1B0C     		lsr	r3, r3, #16
 650 002a FB60     		str	r3, [r7, #12]
 651 002c 01E0     		b	.L42
 652              	.L41:
 515:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 516:.\Generated_Source\PSoC4/ADC.c ****     }
 517:.\Generated_Source\PSoC4/ADC.c ****     else
 518:.\Generated_Source\PSoC4/ADC.c ****     {
 519:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 521:.\Generated_Source\PSoC4/ADC.c ****         #else
 522:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 653              		.loc 1 522 0
 654 002e 0023     		mov	r3, #0
 655 0030 FB60     		str	r3, [r7, #12]
 656              	.L42:
 523:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 524:.\Generated_Source\PSoC4/ADC.c ****     }
 525:.\Generated_Source\PSoC4/ADC.c **** 
 526:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 657              		.loc 1 526 0
 658 0032 FB68     		ldr	r3, [r7, #12]
 659 0034 9BB2     		uxth	r3, r3
 660 0036 1BB2     		sxth	r3, r3
 527:.\Generated_Source\PSoC4/ADC.c **** }
 661              		.loc 1 527 0
 662 0038 181C     		mov	r0, r3
 663 003a BD46     		mov	sp, r7
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 22


 664 003c 04B0     		add	sp, sp, #16
 665              		@ sp needed
 666 003e 80BD     		pop	{r7, pc}
 667              	.L45:
 668              		.align	2
 669              	.L44:
 670 0040 80013A40 		.word	1077543296
 671              		.cfi_endproc
 672              	.LFE9:
 673              		.size	ADC_GetResult16, .-ADC_GetResult16
 674              		.section	.text.ADC_SetChanMask,"ax",%progbits
 675              		.align	2
 676              		.global	ADC_SetChanMask
 677              		.code	16
 678              		.thumb_func
 679              		.type	ADC_SetChanMask, %function
 680              	ADC_SetChanMask:
 681              	.LFB10:
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** 
 530:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 531:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 532:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 533:.\Generated_Source\PSoC4/ADC.c **** *
 534:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 535:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 536:.\Generated_Source\PSoC4/ADC.c **** *
 537:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 538:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 539:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 540:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 541:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 542:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 543:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 544:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 545:.\Generated_Source\PSoC4/ADC.c **** *
 546:.\Generated_Source\PSoC4/ADC.c **** * Return:
 547:.\Generated_Source\PSoC4/ADC.c **** *  None.
 548:.\Generated_Source\PSoC4/ADC.c **** *
 549:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 550:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 551:.\Generated_Source\PSoC4/ADC.c **** {
 682              		.loc 1 551 0
 683              		.cfi_startproc
 684 0000 80B5     		push	{r7, lr}
 685              		.cfi_def_cfa_offset 8
 686              		.cfi_offset 7, -8
 687              		.cfi_offset 14, -4
 688 0002 82B0     		sub	sp, sp, #8
 689              		.cfi_def_cfa_offset 16
 690 0004 00AF     		add	r7, sp, #0
 691              		.cfi_def_cfa_register 7
 692 0006 7860     		str	r0, [r7, #4]
 552:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 693              		.loc 1 552 0
 694 0008 034B     		ldr	r3, .L47
 695 000a 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 23


 696 000c 7F21     		mov	r1, #127
 697 000e 0A40     		and	r2, r1
 698 0010 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/ADC.c **** }
 699              		.loc 1 553 0
 700 0012 BD46     		mov	sp, r7
 701 0014 02B0     		add	sp, sp, #8
 702              		@ sp needed
 703 0016 80BD     		pop	{r7, pc}
 704              	.L48:
 705              		.align	2
 706              	.L47:
 707 0018 20003A40 		.word	1077542944
 708              		.cfi_endproc
 709              	.LFE10:
 710              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 711              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 712              		.align	2
 713              		.global	ADC_SetLowLimit
 714              		.code	16
 715              		.thumb_func
 716              		.type	ADC_SetLowLimit, %function
 717              	ADC_SetLowLimit:
 718              	.LFB11:
 554:.\Generated_Source\PSoC4/ADC.c **** 
 555:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c **** 
 558:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 559:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 560:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 561:.\Generated_Source\PSoC4/ADC.c ****     *
 562:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 563:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 564:.\Generated_Source\PSoC4/ADC.c ****     *
 565:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 566:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 567:.\Generated_Source\PSoC4/ADC.c ****     *
 568:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 569:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 570:.\Generated_Source\PSoC4/ADC.c ****     *
 571:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 572:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 573:.\Generated_Source\PSoC4/ADC.c ****     {
 574:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 575:.\Generated_Source\PSoC4/ADC.c ****     }
 576:.\Generated_Source\PSoC4/ADC.c **** 
 577:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** 
 580:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 581:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 582:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 583:.\Generated_Source\PSoC4/ADC.c **** *
 584:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 585:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 586:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 24


 587:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 588:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Return:
 591:.\Generated_Source\PSoC4/ADC.c **** *  None.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 594:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 595:.\Generated_Source\PSoC4/ADC.c **** {
 719              		.loc 1 595 0
 720              		.cfi_startproc
 721 0000 80B5     		push	{r7, lr}
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 7, -8
 724              		.cfi_offset 14, -4
 725 0002 82B0     		sub	sp, sp, #8
 726              		.cfi_def_cfa_offset 16
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_def_cfa_register 7
 729 0006 7860     		str	r0, [r7, #4]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 730              		.loc 1 596 0
 731 0008 084B     		ldr	r3, .L50
 732 000a 084A     		ldr	r2, .L50
 733 000c 1268     		ldr	r2, [r2]
 734 000e 120C     		lsr	r2, r2, #16
 735 0010 1204     		lsl	r2, r2, #16
 736 0012 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 737              		.loc 1 597 0
 738 0014 054B     		ldr	r3, .L50
 739 0016 054A     		ldr	r2, .L50
 740 0018 1168     		ldr	r1, [r2]
 741 001a 7A68     		ldr	r2, [r7, #4]
 742 001c 1204     		lsl	r2, r2, #16
 743 001e 120C     		lsr	r2, r2, #16
 744 0020 0A43     		orr	r2, r1
 745 0022 1A60     		str	r2, [r3]
 598:.\Generated_Source\PSoC4/ADC.c **** }
 746              		.loc 1 598 0
 747 0024 BD46     		mov	sp, r7
 748 0026 02B0     		add	sp, sp, #8
 749              		@ sp needed
 750 0028 80BD     		pop	{r7, pc}
 751              	.L51:
 752 002a C046     		.align	2
 753              	.L50:
 754 002c 18003A40 		.word	1077542936
 755              		.cfi_endproc
 756              	.LFE11:
 757              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 758              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 759              		.align	2
 760              		.global	ADC_SetHighLimit
 761              		.code	16
 762              		.thumb_func
 763              		.type	ADC_SetHighLimit, %function
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 25


 764              	ADC_SetHighLimit:
 765              	.LFB12:
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** 
 601:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 602:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 603:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 606:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 607:.\Generated_Source\PSoC4/ADC.c **** *
 608:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 609:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 610:.\Generated_Source\PSoC4/ADC.c **** *
 611:.\Generated_Source\PSoC4/ADC.c **** * Return:
 612:.\Generated_Source\PSoC4/ADC.c **** *  None.
 613:.\Generated_Source\PSoC4/ADC.c **** *
 614:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 615:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 616:.\Generated_Source\PSoC4/ADC.c **** {
 766              		.loc 1 616 0
 767              		.cfi_startproc
 768 0000 80B5     		push	{r7, lr}
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 777              		.loc 1 617 0
 778 0008 074B     		ldr	r3, .L53
 779 000a 074A     		ldr	r2, .L53
 780 000c 1268     		ldr	r2, [r2]
 781 000e 1204     		lsl	r2, r2, #16
 782 0010 120C     		lsr	r2, r2, #16
 783 0012 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 784              		.loc 1 618 0
 785 0014 044B     		ldr	r3, .L53
 786 0016 044A     		ldr	r2, .L53
 787 0018 1168     		ldr	r1, [r2]
 788 001a 7A68     		ldr	r2, [r7, #4]
 789 001c 1204     		lsl	r2, r2, #16
 790 001e 0A43     		orr	r2, r1
 791 0020 1A60     		str	r2, [r3]
 619:.\Generated_Source\PSoC4/ADC.c **** }
 792              		.loc 1 619 0
 793 0022 BD46     		mov	sp, r7
 794 0024 02B0     		add	sp, sp, #8
 795              		@ sp needed
 796 0026 80BD     		pop	{r7, pc}
 797              	.L54:
 798              		.align	2
 799              	.L53:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 26


 800 0028 18003A40 		.word	1077542936
 801              		.cfi_endproc
 802              	.LFE12:
 803              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 804              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 805              		.align	2
 806              		.global	ADC_SetLimitMask
 807              		.code	16
 808              		.thumb_func
 809              		.type	ADC_SetLimitMask, %function
 810              	ADC_SetLimitMask:
 811              	.LFB13:
 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** 
 622:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 623:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 624:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 625:.\Generated_Source\PSoC4/ADC.c **** *
 626:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 627:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 628:.\Generated_Source\PSoC4/ADC.c **** *
 629:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 630:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 631:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 632:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 633:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 634:.\Generated_Source\PSoC4/ADC.c **** *
 635:.\Generated_Source\PSoC4/ADC.c **** * Return:
 636:.\Generated_Source\PSoC4/ADC.c **** *  None.
 637:.\Generated_Source\PSoC4/ADC.c **** *
 638:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 639:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 640:.\Generated_Source\PSoC4/ADC.c **** {
 812              		.loc 1 640 0
 813              		.cfi_startproc
 814 0000 80B5     		push	{r7, lr}
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 82B0     		sub	sp, sp, #8
 819              		.cfi_def_cfa_offset 16
 820 0004 00AF     		add	r7, sp, #0
 821              		.cfi_def_cfa_register 7
 822 0006 7860     		str	r0, [r7, #4]
 641:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 823              		.loc 1 641 0
 824 0008 034B     		ldr	r3, .L56
 825 000a 7A68     		ldr	r2, [r7, #4]
 826 000c 7F21     		mov	r1, #127
 827 000e 0A40     		and	r2, r1
 828 0010 1A60     		str	r2, [r3]
 642:.\Generated_Source\PSoC4/ADC.c **** }
 829              		.loc 1 642 0
 830 0012 BD46     		mov	sp, r7
 831 0014 02B0     		add	sp, sp, #8
 832              		@ sp needed
 833 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 27


 834              	.L57:
 835              		.align	2
 836              	.L56:
 837 0018 38023A40 		.word	1077543480
 838              		.cfi_endproc
 839              	.LFE13:
 840              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 841              		.section	.text.ADC_SetSatMask,"ax",%progbits
 842              		.align	2
 843              		.global	ADC_SetSatMask
 844              		.code	16
 845              		.thumb_func
 846              		.type	ADC_SetSatMask, %function
 847              	ADC_SetSatMask:
 848              	.LFB14:
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** 
 645:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 646:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 647:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 648:.\Generated_Source\PSoC4/ADC.c **** *
 649:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 650:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 651:.\Generated_Source\PSoC4/ADC.c **** *
 652:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 653:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 654:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 655:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 656:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 657:.\Generated_Source\PSoC4/ADC.c **** *
 658:.\Generated_Source\PSoC4/ADC.c **** * Return:
 659:.\Generated_Source\PSoC4/ADC.c **** *  None.
 660:.\Generated_Source\PSoC4/ADC.c **** *
 661:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 662:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 663:.\Generated_Source\PSoC4/ADC.c **** {
 849              		.loc 1 663 0
 850              		.cfi_startproc
 851 0000 80B5     		push	{r7, lr}
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 7, -8
 854              		.cfi_offset 14, -4
 855 0002 82B0     		sub	sp, sp, #8
 856              		.cfi_def_cfa_offset 16
 857 0004 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 859 0006 7860     		str	r0, [r7, #4]
 664:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 860              		.loc 1 664 0
 861 0008 034B     		ldr	r3, .L59
 862 000a 7A68     		ldr	r2, [r7, #4]
 863 000c 7F21     		mov	r1, #127
 864 000e 0A40     		and	r2, r1
 865 0010 1A60     		str	r2, [r3]
 665:.\Generated_Source\PSoC4/ADC.c **** }
 866              		.loc 1 665 0
 867 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 28


 868 0014 02B0     		add	sp, sp, #8
 869              		@ sp needed
 870 0016 80BD     		pop	{r7, pc}
 871              	.L60:
 872              		.align	2
 873              	.L59:
 874 0018 28023A40 		.word	1077543464
 875              		.cfi_endproc
 876              	.LFE14:
 877              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 878              		.section	.text.ADC_SetOffset,"ax",%progbits
 879              		.align	2
 880              		.global	ADC_SetOffset
 881              		.code	16
 882              		.thumb_func
 883              		.type	ADC_SetOffset, %function
 884              	ADC_SetOffset:
 885              	.LFB15:
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** 
 668:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 670:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 671:.\Generated_Source\PSoC4/ADC.c **** *
 672:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 673:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 674:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 675:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 676:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 677:.\Generated_Source\PSoC4/ADC.c **** *
 678:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 679:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 680:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 681:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 688:.\Generated_Source\PSoC4/ADC.c **** *
 689:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 690:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 691:.\Generated_Source\PSoC4/ADC.c **** {
 886              		.loc 1 691 0
 887              		.cfi_startproc
 888 0000 80B5     		push	{r7, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 82B0     		sub	sp, sp, #8
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
 897 0008 0A1C     		mov	r2, r1
 898 000a BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 29


 899 000c 1A80     		strh	r2, [r3]
 692:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 693:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 900              		.loc 1 693 0
 901 000e 7B68     		ldr	r3, [r7, #4]
 902 0010 062B     		cmp	r3, #6
 903 0012 02D9     		bls	.L62
 904              		.loc 1 693 0 is_stmt 0 discriminator 1
 905 0014 0020     		mov	r0, #0
 906 0016 FFF7FEFF 		bl	CyHalt
 907              	.L62:
 694:.\Generated_Source\PSoC4/ADC.c **** 
 695:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 908              		.loc 1 695 0 is_stmt 1
 909 001a 044B     		ldr	r3, .L63
 910 001c 7A68     		ldr	r2, [r7, #4]
 911 001e 5200     		lsl	r2, r2, #1
 912 0020 B91C     		add	r1, r7, #2
 913 0022 0988     		ldrh	r1, [r1]
 914 0024 D152     		strh	r1, [r2, r3]
 696:.\Generated_Source\PSoC4/ADC.c **** }
 915              		.loc 1 696 0
 916 0026 BD46     		mov	sp, r7
 917 0028 02B0     		add	sp, sp, #8
 918              		@ sp needed
 919 002a 80BD     		pop	{r7, pc}
 920              	.L64:
 921              		.align	2
 922              	.L63:
 923 002c 00000000 		.word	ADC_offset
 924              		.cfi_endproc
 925              	.LFE15:
 926              		.size	ADC_SetOffset, .-ADC_SetOffset
 927              		.section	.text.ADC_SetGain,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_SetGain
 930              		.code	16
 931              		.thumb_func
 932              		.type	ADC_SetGain, %function
 933              	ADC_SetGain:
 934              	.LFB16:
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 700:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 701:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 702:.\Generated_Source\PSoC4/ADC.c **** *
 703:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 704:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 705:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 706:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 707:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 708:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 709:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 710:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 711:.\Generated_Source\PSoC4/ADC.c **** *
 712:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 30


 713:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 714:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 715:.\Generated_Source\PSoC4/ADC.c **** *
 716:.\Generated_Source\PSoC4/ADC.c **** * Return:
 717:.\Generated_Source\PSoC4/ADC.c **** *  None.
 718:.\Generated_Source\PSoC4/ADC.c **** *
 719:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 720:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 721:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 722:.\Generated_Source\PSoC4/ADC.c **** *
 723:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 725:.\Generated_Source\PSoC4/ADC.c **** {
 935              		.loc 1 725 0
 936              		.cfi_startproc
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 82B0     		sub	sp, sp, #8
 942              		.cfi_def_cfa_offset 16
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 7860     		str	r0, [r7, #4]
 946 0008 3960     		str	r1, [r7]
 726:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 727:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 947              		.loc 1 727 0
 948 000a 7B68     		ldr	r3, [r7, #4]
 949 000c 062B     		cmp	r3, #6
 950 000e 02D9     		bls	.L66
 951              		.loc 1 727 0 is_stmt 0 discriminator 1
 952 0010 0020     		mov	r0, #0
 953 0012 FFF7FEFF 		bl	CyHalt
 954              	.L66:
 728:.\Generated_Source\PSoC4/ADC.c **** 
 729:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 955              		.loc 1 729 0 is_stmt 1
 956 0016 044B     		ldr	r3, .L67
 957 0018 7A68     		ldr	r2, [r7, #4]
 958 001a 9200     		lsl	r2, r2, #2
 959 001c 3968     		ldr	r1, [r7]
 960 001e D150     		str	r1, [r2, r3]
 730:.\Generated_Source\PSoC4/ADC.c **** }
 961              		.loc 1 730 0
 962 0020 BD46     		mov	sp, r7
 963 0022 02B0     		add	sp, sp, #8
 964              		@ sp needed
 965 0024 80BD     		pop	{r7, pc}
 966              	.L68:
 967 0026 C046     		.align	2
 968              	.L67:
 969 0028 00000000 		.word	ADC_countsPer10Volt
 970              		.cfi_endproc
 971              	.LFE16:
 972              		.size	ADC_SetGain, .-ADC_SetGain
 973              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 31


 974              		.align	2
 975              		.global	ADC_CountsTo_mVolts
 976              		.code	16
 977              		.thumb_func
 978              		.type	ADC_CountsTo_mVolts, %function
 979              	ADC_CountsTo_mVolts:
 980              	.LFB17:
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** 
 733:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 734:.\Generated_Source\PSoC4/ADC.c **** 
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 737:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 738:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 739:.\Generated_Source\PSoC4/ADC.c ****     *
 740:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 742:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 743:.\Generated_Source\PSoC4/ADC.c ****     *
 744:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 745:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 746:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 747:.\Generated_Source\PSoC4/ADC.c ****     *
 748:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 749:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 753:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 754:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 755:.\Generated_Source\PSoC4/ADC.c ****     *
 756:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 758:.\Generated_Source\PSoC4/ADC.c ****     {
 981              		.loc 1 758 0
 982              		.cfi_startproc
 983 0000 80B5     		push	{r7, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 0002 84B0     		sub	sp, sp, #16
 988              		.cfi_def_cfa_offset 24
 989 0004 00AF     		add	r7, sp, #0
 990              		.cfi_def_cfa_register 7
 991 0006 7860     		str	r0, [r7, #4]
 992 0008 0A1C     		mov	r2, r1
 993 000a BB1C     		add	r3, r7, #2
 994 000c 1A80     		strh	r2, [r3]
 759:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 760:.\Generated_Source\PSoC4/ADC.c **** 
 761:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 762:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 995              		.loc 1 762 0
 996 000e 7B68     		ldr	r3, [r7, #4]
 997 0010 062B     		cmp	r3, #6
 998 0012 02D9     		bls	.L70
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 32


 999              		.loc 1 762 0 is_stmt 0 discriminator 1
 1000 0014 0020     		mov	r0, #0
 1001 0016 FFF7FEFF 		bl	CyHalt
 1002              	.L70:
 763:.\Generated_Source\PSoC4/ADC.c **** 
 764:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 765:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 766:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 767:.\Generated_Source\PSoC4/ADC.c ****             {
 768:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 769:.\Generated_Source\PSoC4/ADC.c ****             }
 770:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 771:.\Generated_Source\PSoC4/ADC.c **** 
 772:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 773:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1003              		.loc 1 773 0 is_stmt 1
 1004 001a 1F4B     		ldr	r3, .L76
 1005 001c 7A68     		ldr	r2, [r7, #4]
 1006 001e 5200     		lsl	r2, r2, #1
 1007 0020 D35A     		ldrh	r3, [r2, r3]
 1008 0022 99B2     		uxth	r1, r3
 1009 0024 BB1C     		add	r3, r7, #2
 1010 0026 1A88     		ldrh	r2, [r3]
 1011 0028 8BB2     		uxth	r3, r1
 1012 002a D31A     		sub	r3, r2, r3
 1013 002c 9AB2     		uxth	r2, r3
 1014 002e BB1C     		add	r3, r7, #2
 1015 0030 1A80     		strh	r2, [r3]
 774:.\Generated_Source\PSoC4/ADC.c **** 
 775:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1016              		.loc 1 775 0
 1017 0032 BB1C     		add	r3, r7, #2
 1018 0034 0022     		mov	r2, #0
 1019 0036 9B5E     		ldrsh	r3, [r3, r2]
 1020 0038 184A     		ldr	r2, .L76+4
 1021 003a 5A43     		mul	r2, r3
 776:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1022              		.loc 1 776 0
 1023 003c BB1C     		add	r3, r7, #2
 1024 003e 0021     		mov	r1, #0
 1025 0040 5B5E     		ldrsh	r3, [r3, r1]
 1026 0042 002B     		cmp	r3, #0
 1027 0044 08DD     		ble	.L71
 1028              		.loc 1 776 0 is_stmt 0 discriminator 1
 1029 0046 164B     		ldr	r3, .L76+8
 1030 0048 7968     		ldr	r1, [r7, #4]
 1031 004a 8900     		lsl	r1, r1, #2
 1032 004c CB58     		ldr	r3, [r1, r3]
 1033 004e 002B     		cmp	r3, #0
 1034 0050 00DA     		bge	.L72
 1035 0052 0133     		add	r3, r3, #1
 1036              	.L72:
 1037 0054 5B10     		asr	r3, r3, #1
 1038 0056 08E0     		b	.L73
 1039              	.L71:
 1040              		.loc 1 776 0 discriminator 2
 1041 0058 114B     		ldr	r3, .L76+8
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 33


 1042 005a 7968     		ldr	r1, [r7, #4]
 1043 005c 8900     		lsl	r1, r1, #2
 1044 005e CB58     		ldr	r3, [r1, r3]
 1045 0060 002B     		cmp	r3, #0
 1046 0062 00DA     		bge	.L74
 1047 0064 0133     		add	r3, r3, #1
 1048              	.L74:
 1049 0066 5B10     		asr	r3, r3, #1
 1050 0068 5B42     		neg	r3, r3
 1051              	.L73:
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1052              		.loc 1 775 0 is_stmt 1
 1053 006a D118     		add	r1, r2, r3
 777:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1054              		.loc 1 777 0
 1055 006c 0C4B     		ldr	r3, .L76+8
 1056 006e 7A68     		ldr	r2, [r7, #4]
 1057 0070 9200     		lsl	r2, r2, #2
 1058 0072 D358     		ldr	r3, [r2, r3]
 1059 0074 081C     		mov	r0, r1
 1060 0076 191C     		mov	r1, r3
 1061 0078 FFF7FEFF 		bl	__aeabi_idiv
 1062 007c 031C     		mov	r3, r0
 1063 007e 1A1C     		mov	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1064              		.loc 1 775 0
 1065 0080 0E23     		mov	r3, #14
 1066 0082 FB18     		add	r3, r7, r3
 1067 0084 1A80     		strh	r2, [r3]
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1068              		.loc 1 779 0
 1069 0086 0E23     		mov	r3, #14
 1070 0088 FB18     		add	r3, r7, r3
 1071 008a 1B88     		ldrh	r3, [r3]
 1072 008c 1BB2     		sxth	r3, r3
 780:.\Generated_Source\PSoC4/ADC.c ****     }
 1073              		.loc 1 780 0
 1074 008e 181C     		mov	r0, r3
 1075 0090 BD46     		mov	sp, r7
 1076 0092 04B0     		add	sp, sp, #16
 1077              		@ sp needed
 1078 0094 80BD     		pop	{r7, pc}
 1079              	.L77:
 1080 0096 C046     		.align	2
 1081              	.L76:
 1082 0098 00000000 		.word	ADC_offset
 1083 009c 10270000 		.word	10000
 1084 00a0 00000000 		.word	ADC_countsPer10Volt
 1085              		.cfi_endproc
 1086              	.LFE17:
 1087              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1088              		.global	__aeabi_lmul
 1089              		.global	__aeabi_ldivmod
 1090              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1091              		.align	2
 1092              		.global	ADC_CountsTo_uVolts
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 34


 1093              		.code	16
 1094              		.thumb_func
 1095              		.type	ADC_CountsTo_uVolts, %function
 1096              	ADC_CountsTo_uVolts:
 1097              	.LFB18:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c **** 
 783:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 784:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 785:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 786:.\Generated_Source\PSoC4/ADC.c ****     *
 787:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 789:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 790:.\Generated_Source\PSoC4/ADC.c ****     *
 791:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 792:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 793:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 794:.\Generated_Source\PSoC4/ADC.c ****     *
 795:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 796:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 797:.\Generated_Source\PSoC4/ADC.c ****     *
 798:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 800:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 801:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 805:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 806:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 807:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 808:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 811:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 812:.\Generated_Source\PSoC4/ADC.c ****     {
 1098              		.loc 1 812 0
 1099              		.cfi_startproc
 1100 0000 B0B5     		push	{r4, r5, r7, lr}
 1101              		.cfi_def_cfa_offset 16
 1102              		.cfi_offset 4, -16
 1103              		.cfi_offset 5, -12
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 1106 0002 86B0     		sub	sp, sp, #24
 1107              		.cfi_def_cfa_offset 40
 1108 0004 00AF     		add	r7, sp, #0
 1109              		.cfi_def_cfa_register 7
 1110 0006 F860     		str	r0, [r7, #12]
 1111 0008 0A1C     		mov	r2, r1
 1112 000a 0A23     		mov	r3, #10
 1113 000c FB18     		add	r3, r7, r3
 1114 000e 1A80     		strh	r2, [r3]
 813:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 814:.\Generated_Source\PSoC4/ADC.c **** 
 815:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 35


 816:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1115              		.loc 1 816 0
 1116 0010 FB68     		ldr	r3, [r7, #12]
 1117 0012 062B     		cmp	r3, #6
 1118 0014 02D9     		bls	.L79
 1119              		.loc 1 816 0 is_stmt 0 discriminator 1
 1120 0016 0020     		mov	r0, #0
 1121 0018 FFF7FEFF 		bl	CyHalt
 1122              	.L79:
 817:.\Generated_Source\PSoC4/ADC.c **** 
 818:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 819:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 820:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 821:.\Generated_Source\PSoC4/ADC.c ****             {
 822:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 823:.\Generated_Source\PSoC4/ADC.c ****             }
 824:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 825:.\Generated_Source\PSoC4/ADC.c **** 
 826:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 827:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1123              		.loc 1 827 0 is_stmt 1
 1124 001c 194B     		ldr	r3, .L81
 1125 001e FA68     		ldr	r2, [r7, #12]
 1126 0020 5200     		lsl	r2, r2, #1
 1127 0022 D35A     		ldrh	r3, [r2, r3]
 1128 0024 99B2     		uxth	r1, r3
 1129 0026 0A23     		mov	r3, #10
 1130 0028 FB18     		add	r3, r7, r3
 1131 002a 1A88     		ldrh	r2, [r3]
 1132 002c 8BB2     		uxth	r3, r1
 1133 002e D31A     		sub	r3, r2, r3
 1134 0030 9AB2     		uxth	r2, r3
 1135 0032 0A23     		mov	r3, #10
 1136 0034 FB18     		add	r3, r7, r3
 1137 0036 1A80     		strh	r2, [r3]
 828:.\Generated_Source\PSoC4/ADC.c **** 
 829:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1138              		.loc 1 829 0
 1139 0038 0A23     		mov	r3, #10
 1140 003a FB18     		add	r3, r7, r3
 1141 003c 1B88     		ldrh	r3, [r3]
 1142 003e 1BB2     		sxth	r3, r3
 1143 0040 3B60     		str	r3, [r7]
 1144 0042 DB17     		asr	r3, r3, #31
 1145 0044 7B60     		str	r3, [r7, #4]
 1146 0046 3868     		ldr	r0, [r7]
 1147 0048 7968     		ldr	r1, [r7, #4]
 1148 004a 0F4A     		ldr	r2, .L81+4
 1149 004c 0023     		mov	r3, #0
 1150 004e FFF7FEFF 		bl	__aeabi_lmul
 1151 0052 021C     		mov	r2, r0
 1152 0054 0B1C     		mov	r3, r1
 1153 0056 101C     		mov	r0, r2
 1154 0058 191C     		mov	r1, r3
 1155 005a 0C4B     		ldr	r3, .L81+8
 1156 005c FA68     		ldr	r2, [r7, #12]
 1157 005e 9200     		lsl	r2, r2, #2
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 36


 1158 0060 D358     		ldr	r3, [r2, r3]
 1159 0062 1C1C     		mov	r4, r3
 1160 0064 DB17     		asr	r3, r3, #31
 1161 0066 1D1C     		mov	r5, r3
 1162 0068 221C     		mov	r2, r4
 1163 006a 2B1C     		mov	r3, r5
 1164 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1165 0070 031C     		mov	r3, r0
 1166 0072 0C1C     		mov	r4, r1
 1167 0074 3B61     		str	r3, [r7, #16]
 1168 0076 7C61     		str	r4, [r7, #20]
 830:.\Generated_Source\PSoC4/ADC.c **** 
 831:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1169              		.loc 1 831 0
 1170 0078 3B69     		ldr	r3, [r7, #16]
 832:.\Generated_Source\PSoC4/ADC.c ****     }
 1171              		.loc 1 832 0
 1172 007a 181C     		mov	r0, r3
 1173 007c BD46     		mov	sp, r7
 1174 007e 06B0     		add	sp, sp, #24
 1175              		@ sp needed
 1176 0080 B0BD     		pop	{r4, r5, r7, pc}
 1177              	.L82:
 1178 0082 C046     		.align	2
 1179              	.L81:
 1180 0084 00000000 		.word	ADC_offset
 1181 0088 80969800 		.word	10000000
 1182 008c 00000000 		.word	ADC_countsPer10Volt
 1183              		.cfi_endproc
 1184              	.LFE18:
 1185              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1186              		.global	__aeabi_i2f
 1187              		.global	__aeabi_fmul
 1188              		.global	__aeabi_fdiv
 1189              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1190              		.align	2
 1191              		.global	ADC_CountsTo_Volts
 1192              		.code	16
 1193              		.thumb_func
 1194              		.type	ADC_CountsTo_Volts, %function
 1195              	ADC_CountsTo_Volts:
 1196              	.LFB19:
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 836:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 837:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 838:.\Generated_Source\PSoC4/ADC.c ****     *
 839:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 840:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 841:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 842:.\Generated_Source\PSoC4/ADC.c ****     *
 843:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 844:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 845:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 846:.\Generated_Source\PSoC4/ADC.c ****     *
 847:.\Generated_Source\PSoC4/ADC.c ****     * Return:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 37


 848:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 849:.\Generated_Source\PSoC4/ADC.c ****     *
 850:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 852:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 853:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 854:.\Generated_Source\PSoC4/ADC.c ****     *
 855:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 856:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 857:.\Generated_Source\PSoC4/ADC.c ****     {
 1197              		.loc 1 857 0
 1198              		.cfi_startproc
 1199 0000 90B5     		push	{r4, r7, lr}
 1200              		.cfi_def_cfa_offset 12
 1201              		.cfi_offset 4, -12
 1202              		.cfi_offset 7, -8
 1203              		.cfi_offset 14, -4
 1204 0002 85B0     		sub	sp, sp, #20
 1205              		.cfi_def_cfa_offset 32
 1206 0004 00AF     		add	r7, sp, #0
 1207              		.cfi_def_cfa_register 7
 1208 0006 7860     		str	r0, [r7, #4]
 1209 0008 0A1C     		mov	r2, r1
 1210 000a BB1C     		add	r3, r7, #2
 1211 000c 1A80     		strh	r2, [r3]
 858:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 859:.\Generated_Source\PSoC4/ADC.c **** 
 860:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 861:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1212              		.loc 1 861 0
 1213 000e 7B68     		ldr	r3, [r7, #4]
 1214 0010 062B     		cmp	r3, #6
 1215 0012 02D9     		bls	.L84
 1216              		.loc 1 861 0 is_stmt 0 discriminator 1
 1217 0014 0020     		mov	r0, #0
 1218 0016 FFF7FEFF 		bl	CyHalt
 1219              	.L84:
 862:.\Generated_Source\PSoC4/ADC.c **** 
 863:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 864:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 865:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 866:.\Generated_Source\PSoC4/ADC.c ****             {
 867:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 868:.\Generated_Source\PSoC4/ADC.c ****             }
 869:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 870:.\Generated_Source\PSoC4/ADC.c **** 
 871:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 872:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1220              		.loc 1 872 0 is_stmt 1
 1221 001a 164B     		ldr	r3, .L86
 1222 001c 7A68     		ldr	r2, [r7, #4]
 1223 001e 5200     		lsl	r2, r2, #1
 1224 0020 D35A     		ldrh	r3, [r2, r3]
 1225 0022 99B2     		uxth	r1, r3
 1226 0024 BB1C     		add	r3, r7, #2
 1227 0026 1A88     		ldrh	r2, [r3]
 1228 0028 8BB2     		uxth	r3, r1
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 38


 1229 002a D31A     		sub	r3, r2, r3
 1230 002c 9AB2     		uxth	r2, r3
 1231 002e BB1C     		add	r3, r7, #2
 1232 0030 1A80     		strh	r2, [r3]
 873:.\Generated_Source\PSoC4/ADC.c **** 
 874:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1233              		.loc 1 874 0
 1234 0032 BB1C     		add	r3, r7, #2
 1235 0034 0022     		mov	r2, #0
 1236 0036 9B5E     		ldrsh	r3, [r3, r2]
 1237 0038 181C     		mov	r0, r3
 1238 003a FFF7FEFF 		bl	__aeabi_i2f
 1239 003e 031C     		add	r3, r0, #0
 1240 0040 181C     		add	r0, r3, #0
 1241 0042 0D49     		ldr	r1, .L86+4
 1242 0044 FFF7FEFF 		bl	__aeabi_fmul
 1243 0048 031C     		add	r3, r0, #0
 1244 004a 1C1C     		add	r4, r3, #0
 1245 004c 0B4B     		ldr	r3, .L86+8
 1246 004e 7A68     		ldr	r2, [r7, #4]
 1247 0050 9200     		lsl	r2, r2, #2
 1248 0052 D358     		ldr	r3, [r2, r3]
 1249 0054 181C     		mov	r0, r3
 1250 0056 FFF7FEFF 		bl	__aeabi_i2f
 1251 005a 031C     		add	r3, r0, #0
 1252 005c 201C     		add	r0, r4, #0
 1253 005e 191C     		add	r1, r3, #0
 1254 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1255 0064 031C     		add	r3, r0, #0
 1256 0066 FB60     		str	r3, [r7, #12]
 875:.\Generated_Source\PSoC4/ADC.c **** 
 876:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1257              		.loc 1 876 0
 1258 0068 FB68     		ldr	r3, [r7, #12]
 877:.\Generated_Source\PSoC4/ADC.c ****     }
 1259              		.loc 1 877 0
 1260 006a 181C     		add	r0, r3, #0
 1261 006c BD46     		mov	sp, r7
 1262 006e 05B0     		add	sp, sp, #20
 1263              		@ sp needed
 1264 0070 90BD     		pop	{r4, r7, pc}
 1265              	.L87:
 1266 0072 C046     		.align	2
 1267              	.L86:
 1268 0074 00000000 		.word	ADC_offset
 1269 0078 00002041 		.word	1092616192
 1270 007c 00000000 		.word	ADC_countsPer10Volt
 1271              		.cfi_endproc
 1272              	.LFE19:
 1273              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1274              		.section	.rodata
 1275              		.align	2
 1276              		.type	ADC_InputsPlacement.4768, %object
 1277              		.size	ADC_InputsPlacement.4768, 7
 1278              	ADC_InputsPlacement.4768:
 1279 001c 00       		.byte	0
 1280 001d 01       		.byte	1
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 39


 1281 001e 02       		.byte	2
 1282 001f 03       		.byte	3
 1283 0020 04       		.byte	4
 1284 0021 05       		.byte	5
 1285 0022 73       		.byte	115
 1286 0023 00       		.text
 1287              	.Letext0:
 1288              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1289              		.section	.debug_info,"",%progbits
 1290              	.Ldebug_info0:
 1291 0000 9D040000 		.4byte	0x49d
 1292 0004 0400     		.2byte	0x4
 1293 0006 00000000 		.4byte	.Ldebug_abbrev0
 1294 000a 04       		.byte	0x4
 1295 000b 01       		.uleb128 0x1
 1296 000c EF020000 		.4byte	.LASF60
 1297 0010 01       		.byte	0x1
 1298 0011 18020000 		.4byte	.LASF61
 1299 0015 86020000 		.4byte	.LASF62
 1300 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1301 001d 00000000 		.4byte	0
 1302 0021 00000000 		.4byte	.Ldebug_line0
 1303 0025 02       		.uleb128 0x2
 1304 0026 01       		.byte	0x1
 1305 0027 06       		.byte	0x6
 1306 0028 7C000000 		.4byte	.LASF0
 1307 002c 02       		.uleb128 0x2
 1308 002d 01       		.byte	0x1
 1309 002e 08       		.byte	0x8
 1310 002f 37020000 		.4byte	.LASF1
 1311 0033 02       		.uleb128 0x2
 1312 0034 02       		.byte	0x2
 1313 0035 05       		.byte	0x5
 1314 0036 50020000 		.4byte	.LASF2
 1315 003a 02       		.uleb128 0x2
 1316 003b 02       		.byte	0x2
 1317 003c 07       		.byte	0x7
 1318 003d 53010000 		.4byte	.LASF3
 1319 0041 02       		.uleb128 0x2
 1320 0042 04       		.byte	0x4
 1321 0043 05       		.byte	0x5
 1322 0044 9F000000 		.4byte	.LASF4
 1323 0048 02       		.uleb128 0x2
 1324 0049 04       		.byte	0x4
 1325 004a 07       		.byte	0x7
 1326 004b 22010000 		.4byte	.LASF5
 1327 004f 02       		.uleb128 0x2
 1328 0050 08       		.byte	0x8
 1329 0051 05       		.byte	0x5
 1330 0052 6E000000 		.4byte	.LASF6
 1331 0056 02       		.uleb128 0x2
 1332 0057 08       		.byte	0x8
 1333 0058 07       		.byte	0x7
 1334 0059 32000000 		.4byte	.LASF7
 1335 005d 03       		.uleb128 0x3
 1336 005e 04       		.byte	0x4
 1337 005f 05       		.byte	0x5
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 40


 1338 0060 696E7400 		.ascii	"int\000"
 1339 0064 02       		.uleb128 0x2
 1340 0065 04       		.byte	0x4
 1341 0066 07       		.byte	0x7
 1342 0067 0E010000 		.4byte	.LASF8
 1343 006b 04       		.uleb128 0x4
 1344 006c D0000000 		.4byte	.LASF9
 1345 0070 02       		.byte	0x2
 1346 0071 3801     		.2byte	0x138
 1347 0073 2C000000 		.4byte	0x2c
 1348 0077 04       		.uleb128 0x4
 1349 0078 00000000 		.4byte	.LASF10
 1350 007c 02       		.byte	0x2
 1351 007d 3901     		.2byte	0x139
 1352 007f 3A000000 		.4byte	0x3a
 1353 0083 04       		.uleb128 0x4
 1354 0084 DD000000 		.4byte	.LASF11
 1355 0088 02       		.byte	0x2
 1356 0089 3A01     		.2byte	0x13a
 1357 008b 48000000 		.4byte	0x48
 1358 008f 04       		.uleb128 0x4
 1359 0090 DB020000 		.4byte	.LASF12
 1360 0094 02       		.byte	0x2
 1361 0095 3C01     		.2byte	0x13c
 1362 0097 33000000 		.4byte	0x33
 1363 009b 04       		.uleb128 0x4
 1364 009c 8F000000 		.4byte	.LASF13
 1365 00a0 02       		.byte	0x2
 1366 00a1 3D01     		.2byte	0x13d
 1367 00a3 41000000 		.4byte	0x41
 1368 00a7 04       		.uleb128 0x4
 1369 00a8 83010000 		.4byte	.LASF14
 1370 00ac 02       		.byte	0x2
 1371 00ad 3E01     		.2byte	0x13e
 1372 00af B3000000 		.4byte	0xb3
 1373 00b3 02       		.uleb128 0x2
 1374 00b4 04       		.byte	0x4
 1375 00b5 04       		.byte	0x4
 1376 00b6 E4010000 		.4byte	.LASF15
 1377 00ba 02       		.uleb128 0x2
 1378 00bb 08       		.byte	0x8
 1379 00bc 04       		.byte	0x4
 1380 00bd D6000000 		.4byte	.LASF16
 1381 00c1 04       		.uleb128 0x4
 1382 00c2 C2010000 		.4byte	.LASF17
 1383 00c6 02       		.byte	0x2
 1384 00c7 4301     		.2byte	0x143
 1385 00c9 4F000000 		.4byte	0x4f
 1386 00cd 02       		.uleb128 0x2
 1387 00ce 01       		.byte	0x1
 1388 00cf 08       		.byte	0x8
 1389 00d0 6E020000 		.4byte	.LASF18
 1390 00d4 04       		.uleb128 0x4
 1391 00d5 7D010000 		.4byte	.LASF19
 1392 00d9 02       		.byte	0x2
 1393 00da E401     		.2byte	0x1e4
 1394 00dc E0000000 		.4byte	0xe0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 41


 1395 00e0 05       		.uleb128 0x5
 1396 00e1 83000000 		.4byte	0x83
 1397 00e5 02       		.uleb128 0x2
 1398 00e6 04       		.byte	0x4
 1399 00e7 07       		.byte	0x7
 1400 00e8 8B010000 		.4byte	.LASF20
 1401 00ec 06       		.uleb128 0x6
 1402 00ed 95000000 		.4byte	.LASF25
 1403 00f1 01       		.byte	0x1
 1404 00f2 40       		.byte	0x40
 1405 00f3 00000000 		.4byte	.LFB2
 1406 00f7 24000000 		.4byte	.LFE2-.LFB2
 1407 00fb 01       		.uleb128 0x1
 1408 00fc 9C       		.byte	0x9c
 1409 00fd 07       		.uleb128 0x7
 1410 00fe 29000000 		.4byte	.LASF36
 1411 0102 01       		.byte	0x1
 1412 0103 5F       		.byte	0x5f
 1413 0104 00000000 		.4byte	.LFB3
 1414 0108 0C020000 		.4byte	.LFE3-.LFB3
 1415 010c 01       		.uleb128 0x1
 1416 010d 9C       		.byte	0x9c
 1417 010e 4E010000 		.4byte	0x14e
 1418 0112 08       		.uleb128 0x8
 1419 0113 63020000 		.4byte	.LASF21
 1420 0117 01       		.byte	0x1
 1421 0118 61       		.byte	0x61
 1422 0119 83000000 		.4byte	0x83
 1423 011d 02       		.uleb128 0x2
 1424 011e 91       		.byte	0x91
 1425 011f 74       		.sleb128 -12
 1426 0120 08       		.uleb128 0x8
 1427 0121 49010000 		.4byte	.LASF22
 1428 0125 01       		.byte	0x1
 1429 0126 62       		.byte	0x62
 1430 0127 83000000 		.4byte	0x83
 1431 012b 02       		.uleb128 0x2
 1432 012c 91       		.byte	0x91
 1433 012d 6C       		.sleb128 -20
 1434 012e 08       		.uleb128 0x8
 1435 012f 0F000000 		.4byte	.LASF23
 1436 0133 01       		.byte	0x1
 1437 0134 63       		.byte	0x63
 1438 0135 9B000000 		.4byte	0x9b
 1439 0139 02       		.uleb128 0x2
 1440 013a 91       		.byte	0x91
 1441 013b 70       		.sleb128 -16
 1442 013c 08       		.uleb128 0x8
 1443 013d 49000000 		.4byte	.LASF24
 1444 0141 01       		.byte	0x1
 1445 0142 66       		.byte	0x66
 1446 0143 5E010000 		.4byte	0x15e
 1447 0147 05       		.uleb128 0x5
 1448 0148 03       		.byte	0x3
 1449 0149 1C000000 		.4byte	ADC_InputsPlacement.4768
 1450 014d 00       		.byte	0
 1451 014e 09       		.uleb128 0x9
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 42


 1452 014f 6B000000 		.4byte	0x6b
 1453 0153 5E010000 		.4byte	0x15e
 1454 0157 0A       		.uleb128 0xa
 1455 0158 E5000000 		.4byte	0xe5
 1456 015c 06       		.byte	0x6
 1457 015d 00       		.byte	0
 1458 015e 0B       		.uleb128 0xb
 1459 015f 4E010000 		.4byte	0x14e
 1460 0163 0C       		.uleb128 0xc
 1461 0164 D0020000 		.4byte	.LASF26
 1462 0168 01       		.byte	0x1
 1463 0169 4B01     		.2byte	0x14b
 1464 016b 00000000 		.4byte	.LFB4
 1465 016f 38000000 		.4byte	.LFE4-.LFB4
 1466 0173 01       		.uleb128 0x1
 1467 0174 9C       		.byte	0x9c
 1468 0175 0D       		.uleb128 0xd
 1469 0176 5A020000 		.4byte	.LASF27
 1470 017a 01       		.byte	0x1
 1471 017b 6E01     		.2byte	0x16e
 1472 017d 00000000 		.4byte	.LFB5
 1473 0181 18000000 		.4byte	.LFE5-.LFB5
 1474 0185 01       		.uleb128 0x1
 1475 0186 9C       		.byte	0x9c
 1476 0187 0D       		.uleb128 0xd
 1477 0188 5D000000 		.4byte	.LASF28
 1478 018c 01       		.byte	0x1
 1479 018d 8801     		.2byte	0x188
 1480 018f 00000000 		.4byte	.LFB6
 1481 0193 1C000000 		.4byte	.LFE6-.LFB6
 1482 0197 01       		.uleb128 0x1
 1483 0198 9C       		.byte	0x9c
 1484 0199 0D       		.uleb128 0xd
 1485 019a 66010000 		.4byte	.LASF29
 1486 019e 01       		.byte	0x1
 1487 019f A101     		.2byte	0x1a1
 1488 01a1 00000000 		.4byte	.LFB7
 1489 01a5 1C000000 		.4byte	.LFE7-.LFB7
 1490 01a9 01       		.uleb128 0x1
 1491 01aa 9C       		.byte	0x9c
 1492 01ab 0E       		.uleb128 0xe
 1493 01ac AE010000 		.4byte	.LASF31
 1494 01b0 01       		.byte	0x1
 1495 01b1 C301     		.2byte	0x1c3
 1496 01b3 83000000 		.4byte	0x83
 1497 01b7 00000000 		.4byte	.LFB8
 1498 01bb 48000000 		.4byte	.LFE8-.LFB8
 1499 01bf 01       		.uleb128 0x1
 1500 01c0 9C       		.byte	0x9c
 1501 01c1 E4010000 		.4byte	0x1e4
 1502 01c5 0F       		.uleb128 0xf
 1503 01c6 F5000000 		.4byte	.LASF33
 1504 01ca 01       		.byte	0x1
 1505 01cb C301     		.2byte	0x1c3
 1506 01cd 83000000 		.4byte	0x83
 1507 01d1 02       		.uleb128 0x2
 1508 01d2 91       		.byte	0x91
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 43


 1509 01d3 6C       		.sleb128 -20
 1510 01d4 10       		.uleb128 0x10
 1511 01d5 88000000 		.4byte	.LASF30
 1512 01d9 01       		.byte	0x1
 1513 01da C501     		.2byte	0x1c5
 1514 01dc 83000000 		.4byte	0x83
 1515 01e0 02       		.uleb128 0x2
 1516 01e1 91       		.byte	0x91
 1517 01e2 74       		.sleb128 -12
 1518 01e3 00       		.byte	0
 1519 01e4 11       		.uleb128 0x11
 1520 01e5 84030000 		.4byte	.LASF32
 1521 01e9 01       		.byte	0x1
 1522 01ea F901     		.2byte	0x1f9
 1523 01ec 8F000000 		.4byte	0x8f
 1524 01f0 00000000 		.4byte	.LFB9
 1525 01f4 44000000 		.4byte	.LFE9-.LFB9
 1526 01f8 01       		.uleb128 0x1
 1527 01f9 9C       		.byte	0x9c
 1528 01fa 1D020000 		.4byte	0x21d
 1529 01fe 0F       		.uleb128 0xf
 1530 01ff 69020000 		.4byte	.LASF34
 1531 0203 01       		.byte	0x1
 1532 0204 F901     		.2byte	0x1f9
 1533 0206 83000000 		.4byte	0x83
 1534 020a 02       		.uleb128 0x2
 1535 020b 91       		.byte	0x91
 1536 020c 6C       		.sleb128 -20
 1537 020d 10       		.uleb128 0x10
 1538 020e 7D030000 		.4byte	.LASF35
 1539 0212 01       		.byte	0x1
 1540 0213 FB01     		.2byte	0x1fb
 1541 0215 83000000 		.4byte	0x83
 1542 0219 02       		.uleb128 0x2
 1543 021a 91       		.byte	0x91
 1544 021b 74       		.sleb128 -12
 1545 021c 00       		.byte	0
 1546 021d 12       		.uleb128 0x12
 1547 021e C8010000 		.4byte	.LASF37
 1548 0222 01       		.byte	0x1
 1549 0223 2602     		.2byte	0x226
 1550 0225 00000000 		.4byte	.LFB10
 1551 0229 1C000000 		.4byte	.LFE10-.LFB10
 1552 022d 01       		.uleb128 0x1
 1553 022e 9C       		.byte	0x9c
 1554 022f 43020000 		.4byte	0x243
 1555 0233 0F       		.uleb128 0xf
 1556 0234 E4000000 		.4byte	.LASF38
 1557 0238 01       		.byte	0x1
 1558 0239 2602     		.2byte	0x226
 1559 023b 83000000 		.4byte	0x83
 1560 023f 02       		.uleb128 0x2
 1561 0240 91       		.byte	0x91
 1562 0241 74       		.sleb128 -12
 1563 0242 00       		.byte	0
 1564 0243 12       		.uleb128 0x12
 1565 0244 08020000 		.4byte	.LASF39
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 44


 1566 0248 01       		.byte	0x1
 1567 0249 5202     		.2byte	0x252
 1568 024b 00000000 		.4byte	.LFB11
 1569 024f 30000000 		.4byte	.LFE11-.LFB11
 1570 0253 01       		.uleb128 0x1
 1571 0254 9C       		.byte	0x9c
 1572 0255 69020000 		.4byte	0x269
 1573 0259 0F       		.uleb128 0xf
 1574 025a 94010000 		.4byte	.LASF40
 1575 025e 01       		.byte	0x1
 1576 025f 5202     		.2byte	0x252
 1577 0261 83000000 		.4byte	0x83
 1578 0265 02       		.uleb128 0x2
 1579 0266 91       		.byte	0x91
 1580 0267 74       		.sleb128 -12
 1581 0268 00       		.byte	0
 1582 0269 12       		.uleb128 0x12
 1583 026a 9D010000 		.4byte	.LASF41
 1584 026e 01       		.byte	0x1
 1585 026f 6702     		.2byte	0x267
 1586 0271 00000000 		.4byte	.LFB12
 1587 0275 2C000000 		.4byte	.LFE12-.LFB12
 1588 0279 01       		.uleb128 0x1
 1589 027a 9C       		.byte	0x9c
 1590 027b 8F020000 		.4byte	0x28f
 1591 027f 0F       		.uleb128 0xf
 1592 0280 EA010000 		.4byte	.LASF42
 1593 0284 01       		.byte	0x1
 1594 0285 6702     		.2byte	0x267
 1595 0287 83000000 		.4byte	0x83
 1596 028b 02       		.uleb128 0x2
 1597 028c 91       		.byte	0x91
 1598 028d 74       		.sleb128 -12
 1599 028e 00       		.byte	0
 1600 028f 12       		.uleb128 0x12
 1601 0290 FD000000 		.4byte	.LASF43
 1602 0294 01       		.byte	0x1
 1603 0295 7F02     		.2byte	0x27f
 1604 0297 00000000 		.4byte	.LFB13
 1605 029b 1C000000 		.4byte	.LFE13-.LFB13
 1606 029f 01       		.uleb128 0x1
 1607 02a0 9C       		.byte	0x9c
 1608 02a1 B5020000 		.4byte	0x2b5
 1609 02a5 0F       		.uleb128 0xf
 1610 02a6 E4000000 		.4byte	.LASF38
 1611 02aa 01       		.byte	0x1
 1612 02ab 7F02     		.2byte	0x27f
 1613 02ad 83000000 		.4byte	0x83
 1614 02b1 02       		.uleb128 0x2
 1615 02b2 91       		.byte	0x91
 1616 02b3 74       		.sleb128 -12
 1617 02b4 00       		.byte	0
 1618 02b5 12       		.uleb128 0x12
 1619 02b6 34010000 		.4byte	.LASF44
 1620 02ba 01       		.byte	0x1
 1621 02bb 9602     		.2byte	0x296
 1622 02bd 00000000 		.4byte	.LFB14
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 45


 1623 02c1 1C000000 		.4byte	.LFE14-.LFB14
 1624 02c5 01       		.uleb128 0x1
 1625 02c6 9C       		.byte	0x9c
 1626 02c7 DB020000 		.4byte	0x2db
 1627 02cb 0F       		.uleb128 0xf
 1628 02cc E4000000 		.4byte	.LASF38
 1629 02d0 01       		.byte	0x1
 1630 02d1 9602     		.2byte	0x296
 1631 02d3 83000000 		.4byte	0x83
 1632 02d7 02       		.uleb128 0x2
 1633 02d8 91       		.byte	0x91
 1634 02d9 74       		.sleb128 -12
 1635 02da 00       		.byte	0
 1636 02db 13       		.uleb128 0x13
 1637 02dc E1020000 		.4byte	.LASF45
 1638 02e0 01       		.byte	0x1
 1639 02e1 B202     		.2byte	0x2b2
 1640 02e3 00000000 		.4byte	.LFB15
 1641 02e7 30000000 		.4byte	.LFE15-.LFB15
 1642 02eb 01       		.uleb128 0x1
 1643 02ec 9C       		.byte	0x9c
 1644 02ed 10030000 		.4byte	0x310
 1645 02f1 0F       		.uleb128 0xf
 1646 02f2 69020000 		.4byte	.LASF34
 1647 02f6 01       		.byte	0x1
 1648 02f7 B202     		.2byte	0x2b2
 1649 02f9 83000000 		.4byte	0x83
 1650 02fd 02       		.uleb128 0x2
 1651 02fe 91       		.byte	0x91
 1652 02ff 74       		.sleb128 -12
 1653 0300 0F       		.uleb128 0xf
 1654 0301 BF020000 		.4byte	.LASF46
 1655 0305 01       		.byte	0x1
 1656 0306 B202     		.2byte	0x2b2
 1657 0308 8F000000 		.4byte	0x8f
 1658 030c 02       		.uleb128 0x2
 1659 030d 91       		.byte	0x91
 1660 030e 72       		.sleb128 -14
 1661 030f 00       		.byte	0
 1662 0310 13       		.uleb128 0x13
 1663 0311 D8010000 		.4byte	.LASF47
 1664 0315 01       		.byte	0x1
 1665 0316 D402     		.2byte	0x2d4
 1666 0318 00000000 		.4byte	.LFB16
 1667 031c 2C000000 		.4byte	.LFE16-.LFB16
 1668 0320 01       		.uleb128 0x1
 1669 0321 9C       		.byte	0x9c
 1670 0322 45030000 		.4byte	0x345
 1671 0326 0F       		.uleb128 0xf
 1672 0327 69020000 		.4byte	.LASF34
 1673 032b 01       		.byte	0x1
 1674 032c D402     		.2byte	0x2d4
 1675 032e 83000000 		.4byte	0x83
 1676 0332 02       		.uleb128 0x2
 1677 0333 91       		.byte	0x91
 1678 0334 74       		.sleb128 -12
 1679 0335 0F       		.uleb128 0xf
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 46


 1680 0336 07000000 		.4byte	.LASF48
 1681 033a 01       		.byte	0x1
 1682 033b D402     		.2byte	0x2d4
 1683 033d 9B000000 		.4byte	0x9b
 1684 0341 02       		.uleb128 0x2
 1685 0342 91       		.byte	0x91
 1686 0343 70       		.sleb128 -16
 1687 0344 00       		.byte	0
 1688 0345 11       		.uleb128 0x11
 1689 0346 F4010000 		.4byte	.LASF49
 1690 034a 01       		.byte	0x1
 1691 034b F502     		.2byte	0x2f5
 1692 034d 8F000000 		.4byte	0x8f
 1693 0351 00000000 		.4byte	.LFB17
 1694 0355 A4000000 		.4byte	.LFE17-.LFB17
 1695 0359 01       		.uleb128 0x1
 1696 035a 9C       		.byte	0x9c
 1697 035b 8D030000 		.4byte	0x38d
 1698 035f 0F       		.uleb128 0xf
 1699 0360 69020000 		.4byte	.LASF34
 1700 0364 01       		.byte	0x1
 1701 0365 F502     		.2byte	0x2f5
 1702 0367 83000000 		.4byte	0x83
 1703 036b 02       		.uleb128 0x2
 1704 036c 91       		.byte	0x91
 1705 036d 6C       		.sleb128 -20
 1706 036e 0F       		.uleb128 0xf
 1707 036f C6020000 		.4byte	.LASF50
 1708 0373 01       		.byte	0x1
 1709 0374 F502     		.2byte	0x2f5
 1710 0376 8F000000 		.4byte	0x8f
 1711 037a 02       		.uleb128 0x2
 1712 037b 91       		.byte	0x91
 1713 037c 6A       		.sleb128 -22
 1714 037d 10       		.uleb128 0x10
 1715 037e 76010000 		.4byte	.LASF51
 1716 0382 01       		.byte	0x1
 1717 0383 F702     		.2byte	0x2f7
 1718 0385 8F000000 		.4byte	0x8f
 1719 0389 02       		.uleb128 0x2
 1720 038a 91       		.byte	0x91
 1721 038b 76       		.sleb128 -10
 1722 038c 00       		.byte	0
 1723 038d 11       		.uleb128 0x11
 1724 038e A8000000 		.4byte	.LASF52
 1725 0392 01       		.byte	0x1
 1726 0393 2B03     		.2byte	0x32b
 1727 0395 9B000000 		.4byte	0x9b
 1728 0399 00000000 		.4byte	.LFB18
 1729 039d 90000000 		.4byte	.LFE18-.LFB18
 1730 03a1 01       		.uleb128 0x1
 1731 03a2 9C       		.byte	0x9c
 1732 03a3 D5030000 		.4byte	0x3d5
 1733 03a7 0F       		.uleb128 0xf
 1734 03a8 69020000 		.4byte	.LASF34
 1735 03ac 01       		.byte	0x1
 1736 03ad 2B03     		.2byte	0x32b
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 47


 1737 03af 83000000 		.4byte	0x83
 1738 03b3 02       		.uleb128 0x2
 1739 03b4 91       		.byte	0x91
 1740 03b5 64       		.sleb128 -28
 1741 03b6 0F       		.uleb128 0xf
 1742 03b7 C6020000 		.4byte	.LASF50
 1743 03bb 01       		.byte	0x1
 1744 03bc 2B03     		.2byte	0x32b
 1745 03be 8F000000 		.4byte	0x8f
 1746 03c2 02       		.uleb128 0x2
 1747 03c3 91       		.byte	0x91
 1748 03c4 62       		.sleb128 -30
 1749 03c5 10       		.uleb128 0x10
 1750 03c6 1B010000 		.4byte	.LASF53
 1751 03ca 01       		.byte	0x1
 1752 03cb 2D03     		.2byte	0x32d
 1753 03cd C1000000 		.4byte	0xc1
 1754 03d1 02       		.uleb128 0x2
 1755 03d2 91       		.byte	0x91
 1756 03d3 68       		.sleb128 -24
 1757 03d4 00       		.byte	0
 1758 03d5 11       		.uleb128 0x11
 1759 03d6 16000000 		.4byte	.LASF54
 1760 03da 01       		.byte	0x1
 1761 03db 5803     		.2byte	0x358
 1762 03dd A7000000 		.4byte	0xa7
 1763 03e1 00000000 		.4byte	.LFB19
 1764 03e5 80000000 		.4byte	.LFE19-.LFB19
 1765 03e9 01       		.uleb128 0x1
 1766 03ea 9C       		.byte	0x9c
 1767 03eb 1D040000 		.4byte	0x41d
 1768 03ef 0F       		.uleb128 0xf
 1769 03f0 69020000 		.4byte	.LASF34
 1770 03f4 01       		.byte	0x1
 1771 03f5 5803     		.2byte	0x358
 1772 03f7 83000000 		.4byte	0x83
 1773 03fb 02       		.uleb128 0x2
 1774 03fc 91       		.byte	0x91
 1775 03fd 64       		.sleb128 -28
 1776 03fe 0F       		.uleb128 0xf
 1777 03ff C6020000 		.4byte	.LASF50
 1778 0403 01       		.byte	0x1
 1779 0404 5803     		.2byte	0x358
 1780 0406 8F000000 		.4byte	0x8f
 1781 040a 02       		.uleb128 0x2
 1782 040b 91       		.byte	0x91
 1783 040c 62       		.sleb128 -30
 1784 040d 10       		.uleb128 0x10
 1785 040e 43010000 		.4byte	.LASF55
 1786 0412 01       		.byte	0x1
 1787 0413 5A03     		.2byte	0x35a
 1788 0415 A7000000 		.4byte	0xa7
 1789 0419 02       		.uleb128 0x2
 1790 041a 91       		.byte	0x91
 1791 041b 6C       		.sleb128 -20
 1792 041c 00       		.byte	0
 1793 041d 09       		.uleb128 0x9
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 48


 1794 041e 83000000 		.4byte	0x83
 1795 0422 2D040000 		.4byte	0x42d
 1796 0426 0A       		.uleb128 0xa
 1797 0427 E5000000 		.4byte	0xe5
 1798 042b 06       		.byte	0x6
 1799 042c 00       		.byte	0
 1800 042d 08       		.uleb128 0x8
 1801 042e 73020000 		.4byte	.LASF56
 1802 0432 01       		.byte	0x1
 1803 0433 21       		.byte	0x21
 1804 0434 3E040000 		.4byte	0x43e
 1805 0438 05       		.uleb128 0x5
 1806 0439 03       		.byte	0x3
 1807 043a 00000000 		.4byte	ADC_channelsConfig
 1808 043e 0B       		.uleb128 0xb
 1809 043f 1D040000 		.4byte	0x41d
 1810 0443 14       		.uleb128 0x14
 1811 0444 E9000000 		.4byte	.LASF57
 1812 0448 01       		.byte	0x1
 1813 0449 18       		.byte	0x18
 1814 044a 6B000000 		.4byte	0x6b
 1815 044e 05       		.uleb128 0x5
 1816 044f 03       		.byte	0x3
 1817 0450 00000000 		.4byte	ADC_initVar
 1818 0454 09       		.uleb128 0x9
 1819 0455 8F000000 		.4byte	0x8f
 1820 0459 64040000 		.4byte	0x464
 1821 045d 0A       		.uleb128 0xa
 1822 045e E5000000 		.4byte	0xe5
 1823 0462 06       		.byte	0x6
 1824 0463 00       		.byte	0
 1825 0464 14       		.uleb128 0x14
 1826 0465 45020000 		.4byte	.LASF58
 1827 0469 01       		.byte	0x1
 1828 046a 19       		.byte	0x19
 1829 046b 75040000 		.4byte	0x475
 1830 046f 05       		.uleb128 0x5
 1831 0470 03       		.byte	0x3
 1832 0471 00000000 		.4byte	ADC_offset
 1833 0475 05       		.uleb128 0x5
 1834 0476 54040000 		.4byte	0x454
 1835 047a 09       		.uleb128 0x9
 1836 047b 9B000000 		.4byte	0x9b
 1837 047f 8A040000 		.4byte	0x48a
 1838 0483 0A       		.uleb128 0xa
 1839 0484 E5000000 		.4byte	0xe5
 1840 0488 06       		.byte	0x6
 1841 0489 00       		.byte	0
 1842 048a 14       		.uleb128 0x14
 1843 048b BC000000 		.4byte	.LASF59
 1844 048f 01       		.byte	0x1
 1845 0490 1A       		.byte	0x1a
 1846 0491 9B040000 		.4byte	0x49b
 1847 0495 05       		.uleb128 0x5
 1848 0496 03       		.byte	0x3
 1849 0497 00000000 		.4byte	ADC_countsPer10Volt
 1850 049b 05       		.uleb128 0x5
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 49


 1851 049c 7A040000 		.4byte	0x47a
 1852 04a0 00       		.byte	0
 1853              		.section	.debug_abbrev,"",%progbits
 1854              	.Ldebug_abbrev0:
 1855 0000 01       		.uleb128 0x1
 1856 0001 11       		.uleb128 0x11
 1857 0002 01       		.byte	0x1
 1858 0003 25       		.uleb128 0x25
 1859 0004 0E       		.uleb128 0xe
 1860 0005 13       		.uleb128 0x13
 1861 0006 0B       		.uleb128 0xb
 1862 0007 03       		.uleb128 0x3
 1863 0008 0E       		.uleb128 0xe
 1864 0009 1B       		.uleb128 0x1b
 1865 000a 0E       		.uleb128 0xe
 1866 000b 55       		.uleb128 0x55
 1867 000c 17       		.uleb128 0x17
 1868 000d 11       		.uleb128 0x11
 1869 000e 01       		.uleb128 0x1
 1870 000f 10       		.uleb128 0x10
 1871 0010 17       		.uleb128 0x17
 1872 0011 00       		.byte	0
 1873 0012 00       		.byte	0
 1874 0013 02       		.uleb128 0x2
 1875 0014 24       		.uleb128 0x24
 1876 0015 00       		.byte	0
 1877 0016 0B       		.uleb128 0xb
 1878 0017 0B       		.uleb128 0xb
 1879 0018 3E       		.uleb128 0x3e
 1880 0019 0B       		.uleb128 0xb
 1881 001a 03       		.uleb128 0x3
 1882 001b 0E       		.uleb128 0xe
 1883 001c 00       		.byte	0
 1884 001d 00       		.byte	0
 1885 001e 03       		.uleb128 0x3
 1886 001f 24       		.uleb128 0x24
 1887 0020 00       		.byte	0
 1888 0021 0B       		.uleb128 0xb
 1889 0022 0B       		.uleb128 0xb
 1890 0023 3E       		.uleb128 0x3e
 1891 0024 0B       		.uleb128 0xb
 1892 0025 03       		.uleb128 0x3
 1893 0026 08       		.uleb128 0x8
 1894 0027 00       		.byte	0
 1895 0028 00       		.byte	0
 1896 0029 04       		.uleb128 0x4
 1897 002a 16       		.uleb128 0x16
 1898 002b 00       		.byte	0
 1899 002c 03       		.uleb128 0x3
 1900 002d 0E       		.uleb128 0xe
 1901 002e 3A       		.uleb128 0x3a
 1902 002f 0B       		.uleb128 0xb
 1903 0030 3B       		.uleb128 0x3b
 1904 0031 05       		.uleb128 0x5
 1905 0032 49       		.uleb128 0x49
 1906 0033 13       		.uleb128 0x13
 1907 0034 00       		.byte	0
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 50


 1908 0035 00       		.byte	0
 1909 0036 05       		.uleb128 0x5
 1910 0037 35       		.uleb128 0x35
 1911 0038 00       		.byte	0
 1912 0039 49       		.uleb128 0x49
 1913 003a 13       		.uleb128 0x13
 1914 003b 00       		.byte	0
 1915 003c 00       		.byte	0
 1916 003d 06       		.uleb128 0x6
 1917 003e 2E       		.uleb128 0x2e
 1918 003f 00       		.byte	0
 1919 0040 3F       		.uleb128 0x3f
 1920 0041 19       		.uleb128 0x19
 1921 0042 03       		.uleb128 0x3
 1922 0043 0E       		.uleb128 0xe
 1923 0044 3A       		.uleb128 0x3a
 1924 0045 0B       		.uleb128 0xb
 1925 0046 3B       		.uleb128 0x3b
 1926 0047 0B       		.uleb128 0xb
 1927 0048 27       		.uleb128 0x27
 1928 0049 19       		.uleb128 0x19
 1929 004a 11       		.uleb128 0x11
 1930 004b 01       		.uleb128 0x1
 1931 004c 12       		.uleb128 0x12
 1932 004d 06       		.uleb128 0x6
 1933 004e 40       		.uleb128 0x40
 1934 004f 18       		.uleb128 0x18
 1935 0050 9642     		.uleb128 0x2116
 1936 0052 19       		.uleb128 0x19
 1937 0053 00       		.byte	0
 1938 0054 00       		.byte	0
 1939 0055 07       		.uleb128 0x7
 1940 0056 2E       		.uleb128 0x2e
 1941 0057 01       		.byte	0x1
 1942 0058 3F       		.uleb128 0x3f
 1943 0059 19       		.uleb128 0x19
 1944 005a 03       		.uleb128 0x3
 1945 005b 0E       		.uleb128 0xe
 1946 005c 3A       		.uleb128 0x3a
 1947 005d 0B       		.uleb128 0xb
 1948 005e 3B       		.uleb128 0x3b
 1949 005f 0B       		.uleb128 0xb
 1950 0060 27       		.uleb128 0x27
 1951 0061 19       		.uleb128 0x19
 1952 0062 11       		.uleb128 0x11
 1953 0063 01       		.uleb128 0x1
 1954 0064 12       		.uleb128 0x12
 1955 0065 06       		.uleb128 0x6
 1956 0066 40       		.uleb128 0x40
 1957 0067 18       		.uleb128 0x18
 1958 0068 9642     		.uleb128 0x2116
 1959 006a 19       		.uleb128 0x19
 1960 006b 01       		.uleb128 0x1
 1961 006c 13       		.uleb128 0x13
 1962 006d 00       		.byte	0
 1963 006e 00       		.byte	0
 1964 006f 08       		.uleb128 0x8
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 51


 1965 0070 34       		.uleb128 0x34
 1966 0071 00       		.byte	0
 1967 0072 03       		.uleb128 0x3
 1968 0073 0E       		.uleb128 0xe
 1969 0074 3A       		.uleb128 0x3a
 1970 0075 0B       		.uleb128 0xb
 1971 0076 3B       		.uleb128 0x3b
 1972 0077 0B       		.uleb128 0xb
 1973 0078 49       		.uleb128 0x49
 1974 0079 13       		.uleb128 0x13
 1975 007a 02       		.uleb128 0x2
 1976 007b 18       		.uleb128 0x18
 1977 007c 00       		.byte	0
 1978 007d 00       		.byte	0
 1979 007e 09       		.uleb128 0x9
 1980 007f 01       		.uleb128 0x1
 1981 0080 01       		.byte	0x1
 1982 0081 49       		.uleb128 0x49
 1983 0082 13       		.uleb128 0x13
 1984 0083 01       		.uleb128 0x1
 1985 0084 13       		.uleb128 0x13
 1986 0085 00       		.byte	0
 1987 0086 00       		.byte	0
 1988 0087 0A       		.uleb128 0xa
 1989 0088 21       		.uleb128 0x21
 1990 0089 00       		.byte	0
 1991 008a 49       		.uleb128 0x49
 1992 008b 13       		.uleb128 0x13
 1993 008c 2F       		.uleb128 0x2f
 1994 008d 0B       		.uleb128 0xb
 1995 008e 00       		.byte	0
 1996 008f 00       		.byte	0
 1997 0090 0B       		.uleb128 0xb
 1998 0091 26       		.uleb128 0x26
 1999 0092 00       		.byte	0
 2000 0093 49       		.uleb128 0x49
 2001 0094 13       		.uleb128 0x13
 2002 0095 00       		.byte	0
 2003 0096 00       		.byte	0
 2004 0097 0C       		.uleb128 0xc
 2005 0098 2E       		.uleb128 0x2e
 2006 0099 00       		.byte	0
 2007 009a 3F       		.uleb128 0x3f
 2008 009b 19       		.uleb128 0x19
 2009 009c 03       		.uleb128 0x3
 2010 009d 0E       		.uleb128 0xe
 2011 009e 3A       		.uleb128 0x3a
 2012 009f 0B       		.uleb128 0xb
 2013 00a0 3B       		.uleb128 0x3b
 2014 00a1 05       		.uleb128 0x5
 2015 00a2 27       		.uleb128 0x27
 2016 00a3 19       		.uleb128 0x19
 2017 00a4 11       		.uleb128 0x11
 2018 00a5 01       		.uleb128 0x1
 2019 00a6 12       		.uleb128 0x12
 2020 00a7 06       		.uleb128 0x6
 2021 00a8 40       		.uleb128 0x40
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 52


 2022 00a9 18       		.uleb128 0x18
 2023 00aa 9642     		.uleb128 0x2116
 2024 00ac 19       		.uleb128 0x19
 2025 00ad 00       		.byte	0
 2026 00ae 00       		.byte	0
 2027 00af 0D       		.uleb128 0xd
 2028 00b0 2E       		.uleb128 0x2e
 2029 00b1 00       		.byte	0
 2030 00b2 3F       		.uleb128 0x3f
 2031 00b3 19       		.uleb128 0x19
 2032 00b4 03       		.uleb128 0x3
 2033 00b5 0E       		.uleb128 0xe
 2034 00b6 3A       		.uleb128 0x3a
 2035 00b7 0B       		.uleb128 0xb
 2036 00b8 3B       		.uleb128 0x3b
 2037 00b9 05       		.uleb128 0x5
 2038 00ba 27       		.uleb128 0x27
 2039 00bb 19       		.uleb128 0x19
 2040 00bc 11       		.uleb128 0x11
 2041 00bd 01       		.uleb128 0x1
 2042 00be 12       		.uleb128 0x12
 2043 00bf 06       		.uleb128 0x6
 2044 00c0 40       		.uleb128 0x40
 2045 00c1 18       		.uleb128 0x18
 2046 00c2 9742     		.uleb128 0x2117
 2047 00c4 19       		.uleb128 0x19
 2048 00c5 00       		.byte	0
 2049 00c6 00       		.byte	0
 2050 00c7 0E       		.uleb128 0xe
 2051 00c8 2E       		.uleb128 0x2e
 2052 00c9 01       		.byte	0x1
 2053 00ca 3F       		.uleb128 0x3f
 2054 00cb 19       		.uleb128 0x19
 2055 00cc 03       		.uleb128 0x3
 2056 00cd 0E       		.uleb128 0xe
 2057 00ce 3A       		.uleb128 0x3a
 2058 00cf 0B       		.uleb128 0xb
 2059 00d0 3B       		.uleb128 0x3b
 2060 00d1 05       		.uleb128 0x5
 2061 00d2 27       		.uleb128 0x27
 2062 00d3 19       		.uleb128 0x19
 2063 00d4 49       		.uleb128 0x49
 2064 00d5 13       		.uleb128 0x13
 2065 00d6 11       		.uleb128 0x11
 2066 00d7 01       		.uleb128 0x1
 2067 00d8 12       		.uleb128 0x12
 2068 00d9 06       		.uleb128 0x6
 2069 00da 40       		.uleb128 0x40
 2070 00db 18       		.uleb128 0x18
 2071 00dc 9742     		.uleb128 0x2117
 2072 00de 19       		.uleb128 0x19
 2073 00df 01       		.uleb128 0x1
 2074 00e0 13       		.uleb128 0x13
 2075 00e1 00       		.byte	0
 2076 00e2 00       		.byte	0
 2077 00e3 0F       		.uleb128 0xf
 2078 00e4 05       		.uleb128 0x5
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 53


 2079 00e5 00       		.byte	0
 2080 00e6 03       		.uleb128 0x3
 2081 00e7 0E       		.uleb128 0xe
 2082 00e8 3A       		.uleb128 0x3a
 2083 00e9 0B       		.uleb128 0xb
 2084 00ea 3B       		.uleb128 0x3b
 2085 00eb 05       		.uleb128 0x5
 2086 00ec 49       		.uleb128 0x49
 2087 00ed 13       		.uleb128 0x13
 2088 00ee 02       		.uleb128 0x2
 2089 00ef 18       		.uleb128 0x18
 2090 00f0 00       		.byte	0
 2091 00f1 00       		.byte	0
 2092 00f2 10       		.uleb128 0x10
 2093 00f3 34       		.uleb128 0x34
 2094 00f4 00       		.byte	0
 2095 00f5 03       		.uleb128 0x3
 2096 00f6 0E       		.uleb128 0xe
 2097 00f7 3A       		.uleb128 0x3a
 2098 00f8 0B       		.uleb128 0xb
 2099 00f9 3B       		.uleb128 0x3b
 2100 00fa 05       		.uleb128 0x5
 2101 00fb 49       		.uleb128 0x49
 2102 00fc 13       		.uleb128 0x13
 2103 00fd 02       		.uleb128 0x2
 2104 00fe 18       		.uleb128 0x18
 2105 00ff 00       		.byte	0
 2106 0100 00       		.byte	0
 2107 0101 11       		.uleb128 0x11
 2108 0102 2E       		.uleb128 0x2e
 2109 0103 01       		.byte	0x1
 2110 0104 3F       		.uleb128 0x3f
 2111 0105 19       		.uleb128 0x19
 2112 0106 03       		.uleb128 0x3
 2113 0107 0E       		.uleb128 0xe
 2114 0108 3A       		.uleb128 0x3a
 2115 0109 0B       		.uleb128 0xb
 2116 010a 3B       		.uleb128 0x3b
 2117 010b 05       		.uleb128 0x5
 2118 010c 27       		.uleb128 0x27
 2119 010d 19       		.uleb128 0x19
 2120 010e 49       		.uleb128 0x49
 2121 010f 13       		.uleb128 0x13
 2122 0110 11       		.uleb128 0x11
 2123 0111 01       		.uleb128 0x1
 2124 0112 12       		.uleb128 0x12
 2125 0113 06       		.uleb128 0x6
 2126 0114 40       		.uleb128 0x40
 2127 0115 18       		.uleb128 0x18
 2128 0116 9642     		.uleb128 0x2116
 2129 0118 19       		.uleb128 0x19
 2130 0119 01       		.uleb128 0x1
 2131 011a 13       		.uleb128 0x13
 2132 011b 00       		.byte	0
 2133 011c 00       		.byte	0
 2134 011d 12       		.uleb128 0x12
 2135 011e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 54


 2136 011f 01       		.byte	0x1
 2137 0120 3F       		.uleb128 0x3f
 2138 0121 19       		.uleb128 0x19
 2139 0122 03       		.uleb128 0x3
 2140 0123 0E       		.uleb128 0xe
 2141 0124 3A       		.uleb128 0x3a
 2142 0125 0B       		.uleb128 0xb
 2143 0126 3B       		.uleb128 0x3b
 2144 0127 05       		.uleb128 0x5
 2145 0128 27       		.uleb128 0x27
 2146 0129 19       		.uleb128 0x19
 2147 012a 11       		.uleb128 0x11
 2148 012b 01       		.uleb128 0x1
 2149 012c 12       		.uleb128 0x12
 2150 012d 06       		.uleb128 0x6
 2151 012e 40       		.uleb128 0x40
 2152 012f 18       		.uleb128 0x18
 2153 0130 9742     		.uleb128 0x2117
 2154 0132 19       		.uleb128 0x19
 2155 0133 01       		.uleb128 0x1
 2156 0134 13       		.uleb128 0x13
 2157 0135 00       		.byte	0
 2158 0136 00       		.byte	0
 2159 0137 13       		.uleb128 0x13
 2160 0138 2E       		.uleb128 0x2e
 2161 0139 01       		.byte	0x1
 2162 013a 3F       		.uleb128 0x3f
 2163 013b 19       		.uleb128 0x19
 2164 013c 03       		.uleb128 0x3
 2165 013d 0E       		.uleb128 0xe
 2166 013e 3A       		.uleb128 0x3a
 2167 013f 0B       		.uleb128 0xb
 2168 0140 3B       		.uleb128 0x3b
 2169 0141 05       		.uleb128 0x5
 2170 0142 27       		.uleb128 0x27
 2171 0143 19       		.uleb128 0x19
 2172 0144 11       		.uleb128 0x11
 2173 0145 01       		.uleb128 0x1
 2174 0146 12       		.uleb128 0x12
 2175 0147 06       		.uleb128 0x6
 2176 0148 40       		.uleb128 0x40
 2177 0149 18       		.uleb128 0x18
 2178 014a 9642     		.uleb128 0x2116
 2179 014c 19       		.uleb128 0x19
 2180 014d 01       		.uleb128 0x1
 2181 014e 13       		.uleb128 0x13
 2182 014f 00       		.byte	0
 2183 0150 00       		.byte	0
 2184 0151 14       		.uleb128 0x14
 2185 0152 34       		.uleb128 0x34
 2186 0153 00       		.byte	0
 2187 0154 03       		.uleb128 0x3
 2188 0155 0E       		.uleb128 0xe
 2189 0156 3A       		.uleb128 0x3a
 2190 0157 0B       		.uleb128 0xb
 2191 0158 3B       		.uleb128 0x3b
 2192 0159 0B       		.uleb128 0xb
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 55


 2193 015a 49       		.uleb128 0x49
 2194 015b 13       		.uleb128 0x13
 2195 015c 3F       		.uleb128 0x3f
 2196 015d 19       		.uleb128 0x19
 2197 015e 02       		.uleb128 0x2
 2198 015f 18       		.uleb128 0x18
 2199 0160 00       		.byte	0
 2200 0161 00       		.byte	0
 2201 0162 00       		.byte	0
 2202              		.section	.debug_aranges,"",%progbits
 2203 0000 A4000000 		.4byte	0xa4
 2204 0004 0200     		.2byte	0x2
 2205 0006 00000000 		.4byte	.Ldebug_info0
 2206 000a 04       		.byte	0x4
 2207 000b 00       		.byte	0
 2208 000c 0000     		.2byte	0
 2209 000e 0000     		.2byte	0
 2210 0010 00000000 		.4byte	.LFB2
 2211 0014 24000000 		.4byte	.LFE2-.LFB2
 2212 0018 00000000 		.4byte	.LFB3
 2213 001c 0C020000 		.4byte	.LFE3-.LFB3
 2214 0020 00000000 		.4byte	.LFB4
 2215 0024 38000000 		.4byte	.LFE4-.LFB4
 2216 0028 00000000 		.4byte	.LFB5
 2217 002c 18000000 		.4byte	.LFE5-.LFB5
 2218 0030 00000000 		.4byte	.LFB6
 2219 0034 1C000000 		.4byte	.LFE6-.LFB6
 2220 0038 00000000 		.4byte	.LFB7
 2221 003c 1C000000 		.4byte	.LFE7-.LFB7
 2222 0040 00000000 		.4byte	.LFB8
 2223 0044 48000000 		.4byte	.LFE8-.LFB8
 2224 0048 00000000 		.4byte	.LFB9
 2225 004c 44000000 		.4byte	.LFE9-.LFB9
 2226 0050 00000000 		.4byte	.LFB10
 2227 0054 1C000000 		.4byte	.LFE10-.LFB10
 2228 0058 00000000 		.4byte	.LFB11
 2229 005c 30000000 		.4byte	.LFE11-.LFB11
 2230 0060 00000000 		.4byte	.LFB12
 2231 0064 2C000000 		.4byte	.LFE12-.LFB12
 2232 0068 00000000 		.4byte	.LFB13
 2233 006c 1C000000 		.4byte	.LFE13-.LFB13
 2234 0070 00000000 		.4byte	.LFB14
 2235 0074 1C000000 		.4byte	.LFE14-.LFB14
 2236 0078 00000000 		.4byte	.LFB15
 2237 007c 30000000 		.4byte	.LFE15-.LFB15
 2238 0080 00000000 		.4byte	.LFB16
 2239 0084 2C000000 		.4byte	.LFE16-.LFB16
 2240 0088 00000000 		.4byte	.LFB17
 2241 008c A4000000 		.4byte	.LFE17-.LFB17
 2242 0090 00000000 		.4byte	.LFB18
 2243 0094 90000000 		.4byte	.LFE18-.LFB18
 2244 0098 00000000 		.4byte	.LFB19
 2245 009c 80000000 		.4byte	.LFE19-.LFB19
 2246 00a0 00000000 		.4byte	0
 2247 00a4 00000000 		.4byte	0
 2248              		.section	.debug_ranges,"",%progbits
 2249              	.Ldebug_ranges0:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 56


 2250 0000 00000000 		.4byte	.LFB2
 2251 0004 24000000 		.4byte	.LFE2
 2252 0008 00000000 		.4byte	.LFB3
 2253 000c 0C020000 		.4byte	.LFE3
 2254 0010 00000000 		.4byte	.LFB4
 2255 0014 38000000 		.4byte	.LFE4
 2256 0018 00000000 		.4byte	.LFB5
 2257 001c 18000000 		.4byte	.LFE5
 2258 0020 00000000 		.4byte	.LFB6
 2259 0024 1C000000 		.4byte	.LFE6
 2260 0028 00000000 		.4byte	.LFB7
 2261 002c 1C000000 		.4byte	.LFE7
 2262 0030 00000000 		.4byte	.LFB8
 2263 0034 48000000 		.4byte	.LFE8
 2264 0038 00000000 		.4byte	.LFB9
 2265 003c 44000000 		.4byte	.LFE9
 2266 0040 00000000 		.4byte	.LFB10
 2267 0044 1C000000 		.4byte	.LFE10
 2268 0048 00000000 		.4byte	.LFB11
 2269 004c 30000000 		.4byte	.LFE11
 2270 0050 00000000 		.4byte	.LFB12
 2271 0054 2C000000 		.4byte	.LFE12
 2272 0058 00000000 		.4byte	.LFB13
 2273 005c 1C000000 		.4byte	.LFE13
 2274 0060 00000000 		.4byte	.LFB14
 2275 0064 1C000000 		.4byte	.LFE14
 2276 0068 00000000 		.4byte	.LFB15
 2277 006c 30000000 		.4byte	.LFE15
 2278 0070 00000000 		.4byte	.LFB16
 2279 0074 2C000000 		.4byte	.LFE16
 2280 0078 00000000 		.4byte	.LFB17
 2281 007c A4000000 		.4byte	.LFE17
 2282 0080 00000000 		.4byte	.LFB18
 2283 0084 90000000 		.4byte	.LFE18
 2284 0088 00000000 		.4byte	.LFB19
 2285 008c 80000000 		.4byte	.LFE19
 2286 0090 00000000 		.4byte	0
 2287 0094 00000000 		.4byte	0
 2288              		.section	.debug_line,"",%progbits
 2289              	.Ldebug_line0:
 2290 0000 A1020000 		.section	.debug_str,"MS",%progbits,1
 2290      02004200 
 2290      00000201 
 2290      FB0E0D00 
 2290      01010101 
 2291              	.LASF10:
 2292 0000 75696E74 		.ascii	"uint16\000"
 2292      313600
 2293              	.LASF48:
 2294 0007 61646347 		.ascii	"adcGain\000"
 2294      61696E00 
 2295              	.LASF23:
 2296 000f 636F756E 		.ascii	"counts\000"
 2296      747300
 2297              	.LASF54:
 2298 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2298      436F756E 
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 57


 2298      7473546F 
 2298      5F566F6C 
 2298      747300
 2299              	.LASF36:
 2300 0029 4144435F 		.ascii	"ADC_Init\000"
 2300      496E6974 
 2300      00
 2301              	.LASF7:
 2302 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2302      206C6F6E 
 2302      6720756E 
 2302      7369676E 
 2302      65642069 
 2303              	.LASF24:
 2304 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2304      496E7075 
 2304      7473506C 
 2304      6163656D 
 2304      656E7400 
 2305              	.LASF28:
 2306 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2306      53746172 
 2306      74436F6E 
 2306      76657274 
 2306      00
 2307              	.LASF6:
 2308 006e 6C6F6E67 		.ascii	"long long int\000"
 2308      206C6F6E 
 2308      6720696E 
 2308      7400
 2309              	.LASF0:
 2310 007c 7369676E 		.ascii	"signed char\000"
 2310      65642063 
 2310      68617200 
 2311              	.LASF30:
 2312 0088 73746174 		.ascii	"status\000"
 2312      757300
 2313              	.LASF13:
 2314 008f 696E7433 		.ascii	"int32\000"
 2314      3200
 2315              	.LASF25:
 2316 0095 4144435F 		.ascii	"ADC_Start\000"
 2316      53746172 
 2316      7400
 2317              	.LASF4:
 2318 009f 6C6F6E67 		.ascii	"long int\000"
 2318      20696E74 
 2318      00
 2319              	.LASF52:
 2320 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2320      436F756E 
 2320      7473546F 
 2320      5F75566F 
 2320      6C747300 
 2321              	.LASF59:
 2322 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2322      636F756E 
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 58


 2322      74735065 
 2322      72313056 
 2322      6F6C7400 
 2323              	.LASF9:
 2324 00d0 75696E74 		.ascii	"uint8\000"
 2324      3800
 2325              	.LASF16:
 2326 00d6 646F7562 		.ascii	"double\000"
 2326      6C6500
 2327              	.LASF11:
 2328 00dd 75696E74 		.ascii	"uint32\000"
 2328      333200
 2329              	.LASF38:
 2330 00e4 6D61736B 		.ascii	"mask\000"
 2330      00
 2331              	.LASF57:
 2332 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2332      696E6974 
 2332      56617200 
 2333              	.LASF33:
 2334 00f5 7265744D 		.ascii	"retMode\000"
 2334      6F646500 
 2335              	.LASF43:
 2336 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2336      5365744C 
 2336      696D6974 
 2336      4D61736B 
 2336      00
 2337              	.LASF8:
 2338 010e 756E7369 		.ascii	"unsigned int\000"
 2338      676E6564 
 2338      20696E74 
 2338      00
 2339              	.LASF53:
 2340 011b 75566F6C 		.ascii	"uVolts\000"
 2340      747300
 2341              	.LASF5:
 2342 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2342      20756E73 
 2342      69676E65 
 2342      6420696E 
 2342      7400
 2343              	.LASF44:
 2344 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2344      53657453 
 2344      61744D61 
 2344      736B00
 2345              	.LASF55:
 2346 0143 766F6C74 		.ascii	"volts\000"
 2346      7300
 2347              	.LASF22:
 2348 0149 746D7052 		.ascii	"tmpRegVal\000"
 2348      65675661 
 2348      6C00
 2349              	.LASF3:
 2350 0153 73686F72 		.ascii	"short unsigned int\000"
 2350      7420756E 
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 59


 2350      7369676E 
 2350      65642069 
 2350      6E7400
 2351              	.LASF29:
 2352 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2352      53746F70 
 2352      436F6E76 
 2352      65727400 
 2353              	.LASF51:
 2354 0176 6D566F6C 		.ascii	"mVolts\000"
 2354      747300
 2355              	.LASF19:
 2356 017d 72656733 		.ascii	"reg32\000"
 2356      3200
 2357              	.LASF14:
 2358 0183 666C6F61 		.ascii	"float32\000"
 2358      74333200 
 2359              	.LASF20:
 2360 018b 73697A65 		.ascii	"sizetype\000"
 2360      74797065 
 2360      00
 2361              	.LASF40:
 2362 0194 6C6F774C 		.ascii	"lowLimit\000"
 2362      696D6974 
 2362      00
 2363              	.LASF41:
 2364 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2364      53657448 
 2364      6967684C 
 2364      696D6974 
 2364      00
 2365              	.LASF31:
 2366 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2366      4973456E 
 2366      64436F6E 
 2366      76657273 
 2366      696F6E00 
 2367              	.LASF17:
 2368 01c2 696E7436 		.ascii	"int64\000"
 2368      3400
 2369              	.LASF37:
 2370 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2370      53657443 
 2370      68616E4D 
 2370      61736B00 
 2371              	.LASF47:
 2372 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2372      53657447 
 2372      61696E00 
 2373              	.LASF15:
 2374 01e4 666C6F61 		.ascii	"float\000"
 2374      7400
 2375              	.LASF42:
 2376 01ea 68696768 		.ascii	"highLimit\000"
 2376      4C696D69 
 2376      7400
 2377              	.LASF49:
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 60


 2378 01f4 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2378      436F756E 
 2378      7473546F 
 2378      5F6D566F 
 2378      6C747300 
 2379              	.LASF39:
 2380 0208 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2380      5365744C 
 2380      6F774C69 
 2380      6D697400 
 2381              	.LASF61:
 2382 0218 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2382      6E657261 
 2382      7465645F 
 2382      536F7572 
 2382      63655C50 
 2383              	.LASF1:
 2384 0237 756E7369 		.ascii	"unsigned char\000"
 2384      676E6564 
 2384      20636861 
 2384      7200
 2385              	.LASF58:
 2386 0245 4144435F 		.ascii	"ADC_offset\000"
 2386      6F666673 
 2386      657400
 2387              	.LASF2:
 2388 0250 73686F72 		.ascii	"short int\000"
 2388      7420696E 
 2388      7400
 2389              	.LASF27:
 2390 025a 4144435F 		.ascii	"ADC_Stop\000"
 2390      53746F70 
 2390      00
 2391              	.LASF21:
 2392 0263 63684E75 		.ascii	"chNum\000"
 2392      6D00
 2393              	.LASF34:
 2394 0269 6368616E 		.ascii	"chan\000"
 2394      00
 2395              	.LASF18:
 2396 026e 63686172 		.ascii	"char\000"
 2396      00
 2397              	.LASF56:
 2398 0273 4144435F 		.ascii	"ADC_channelsConfig\000"
 2398      6368616E 
 2398      6E656C73 
 2398      436F6E66 
 2398      696700
 2399              	.LASF62:
 2400 0286 433A5C55 		.ascii	"C:\\Users\\Linette Helena\\Desktop\\store_kit_7kana"
 2400      73657273 
 2400      5C4C696E 
 2400      65747465 
 2400      2048656C 
 2401 02b5 6C65722E 		.ascii	"ler.cydsn\000"
 2401      63796473 
 2401      6E00
ARM GAS  C:\Users\LINETT~1\AppData\Local\Temp\ccKsa3bl.s 			page 61


 2402              	.LASF46:
 2403 02bf 6F666673 		.ascii	"offset\000"
 2403      657400
 2404              	.LASF50:
 2405 02c6 61646343 		.ascii	"adcCounts\000"
 2405      6F756E74 
 2405      7300
 2406              	.LASF26:
 2407 02d0 4144435F 		.ascii	"ADC_Enable\000"
 2407      456E6162 
 2407      6C6500
 2408              	.LASF12:
 2409 02db 696E7431 		.ascii	"int16\000"
 2409      3600
 2410              	.LASF45:
 2411 02e1 4144435F 		.ascii	"ADC_SetOffset\000"
 2411      5365744F 
 2411      66667365 
 2411      7400
 2412              	.LASF60:
 2413 02ef 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2413      4320342E 
 2413      392E3320 
 2413      32303135 
 2413      30333033 
 2414 0322 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2414      20726576 
 2414      6973696F 
 2414      6E203232 
 2414      31323230 
 2415 0355 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2415      66756E63 
 2415      74696F6E 
 2415      2D736563 
 2415      74696F6E 
 2416              	.LASF35:
 2417 037d 72657375 		.ascii	"result\000"
 2417      6C7400
 2418              	.LASF32:
 2419 0384 4144435F 		.ascii	"ADC_GetResult16\000"
 2419      47657452 
 2419      6573756C 
 2419      74313600 
 2420              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
